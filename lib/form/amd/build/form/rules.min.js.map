{"version":3,"file":"rules.min.js","sources":["../../src/form/rules.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains a set of rules that elements can be compared against to determine if they should be shown, hidden, etc...\n *\n * @See /lib/pear/HTML/QuickForm/Rule/Compare.php\n * @See https://pear.php.net/manual/en/package.html.html-quickform2.rules.list.php for a list of available rules.\n *\n * @module     core_form/form/rules\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nexport default class Rules {\n    /**\n     * @var {Form} form The instance of the form class that has a DOM node & references matched.\n     */\n    form;\n\n    // Shorthand helpers rather than requiring devs to export the value and use an eq or neq check.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    notchecked(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'notchecked').forEach((dependant, key) => {\n            lock = Boolean(key) !== target.checked;\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    checked(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'checked').forEach((dependant, key) => {\n            lock = Boolean(key) === target.checked;\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    // Handlers for default rules defined in the links in the JSDoc for this class.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    eq(target) {\n        const displayMap = this.form.mapTemplate();\n        const ctarget = this.getRadioFieldVal(target);\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'eq').forEach((dependant, key) => {\n            if (target.type === 'radio' && String(key) !== String(ctarget.value)) {\n                return;\n            } else if (target.type === 'hidden') {\n                // This is the hidden input that is part of an advcheckbox.\n                //hiddenVal = target.value === key;\n                return;\n            } else if (target.type === 'checkbox' && !target.checksed) {\n                lock = target.checked === Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            }\n            if (target.classList.contains('filepickerhidden')) {\n                lock = !M.form_filepicker.instances[target.id].fileadded;\n                determineDisplayMap(dependant, displayMap, lock);\n            } else if (target.tagName.toLowerCase() === 'select' && target.multiple) {\n                // Multiple selects can have one or more value assigned. A pipe (|) is used as a value separator\n                // when multiple values have to be selected at the same time.\n            } else {\n                lock = target.value === key;\n                determineDisplayMap(dependant, displayMap, lock);\n            }\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     * @See Moodle has some interesting aliasing ne && noteq, this is also the old \"default\" rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    neq(target) {\n        const displayMap = this.form.mapTemplate();\n        const ctarget = this.getRadioFieldVal(target);\n        let lock = false;\n\n        // Get all the aliases of neq and check them all at once.\n        const maps = [\n            ...this.getDependantsOfType(target.name, 'neq')?.entries() ?? [],\n            ...this.getDependantsOfType(target.name, 'ne')?.entries() ?? [],\n            ...this.getDependantsOfType(target.name, 'noteq')?.entries() ?? [],\n        ];\n        const condensedMaps = new Map(maps);\n        condensedMaps.forEach((dependant, key) => {\n            if (target.type === 'radio' && String(key) !== String(ctarget.value)) {\n                return;\n            } else if (target.type === 'hidden') {\n                // This is the hidden input that is part of an advcheckbox.\n                //hiddenVal = target.value === key;\n                return;\n            } else if (target.type === 'checkbox' && !target.checked) {\n                lock = target.checked === Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            }\n            if (target.classList.contains('filepickerhidden')) {\n                lock = !!M.form_filepicker.instances[target.id].fileadded;\n                determineDisplayMap(dependant, displayMap, lock);\n            } else if (target.tagName.toLowerCase() === 'select' && target.multiple) {\n                // Multiple selects can have one or more value assigned. A pipe (|) is used as a value separator\n                // when multiple values have to be selected at the same time.\n            } else {\n                lock = target.value !== key;\n                determineDisplayMap(dependant, displayMap, lock);\n            }\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    // Moodle addons to the rules list.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    in(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'in').forEach((dependant, key) => {\n            lock = key.split('|').includes(target.value);\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Call off to the Form() to grab the elements that listen to the passed rule for the given element.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        return this.form.getDependantsOfType(element, type);\n    }\n\n    /**\n     * Radio fields are a bit different, they need to be handled differently.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to find a potential radio field for.\n     * @returns {RadioNodeList|HTMLFormElement}\n     */\n    getRadioFieldVal(target) {\n        return target.type === 'radio' ? this.form.form.elements.namedItem(target.name) : target;\n    }\n\n    /**\n     * Constructor for the Rules class.\n     * @param {Form} form The form object that the rules are being applied to.\n     */\n    constructor(form) {\n        this.form = form;\n    }\n}\n\n/**\n * A small object that defines the behaviour of the dependency rules for readability.\n *\n * @type {{hide: number, disable: number}}\n */\nconst dependencyBehaviour = {\n    disable: 0,\n    hide: 1,\n};\n\n/**\n * Considering the dependant object and if we need to lock it, assign the elements to the correct displayMap key.\n *\n * @param {Object<Number, Array>} dependant The dependant object that contains the rules for hiding and locking.\n * @param {Map<String, Array>} displayMap The aggregation of elements that should be shown, hidden, locked, or unlocked.\n * @param {Boolean} lock According to the rules, should the element be locked or unlocked.\n */\nconst determineDisplayMap = (dependant, displayMap, lock) => {\n    const hide = dependant.hasOwnProperty(dependencyBehaviour.hide) ? lock : false;\n    if (dependant.hasOwnProperty(dependencyBehaviour.disable)) {\n        displayMap.get('show').push(dependant[dependencyBehaviour.disable]);\n        if (lock) {\n            displayMap.get('lock').push(dependant[dependencyBehaviour.disable]);\n        } else {\n            displayMap.get('unlock').push(dependant[dependencyBehaviour.disable]);\n        }\n    } else if (dependant.hasOwnProperty(dependencyBehaviour.hide)) {\n        if (hide) {\n            displayMap.get('hide').push(dependant[dependencyBehaviour.hide]);\n        } else {\n            displayMap.get('show').push(dependant[dependencyBehaviour.hide]);\n        }\n    }\n};\n"],"names":["notchecked","target","displayMap","this","form","mapTemplate","lock","getDependantsOfType","name","forEach","dependant","key","Boolean","checked","determineDisplayMap","displayMapPrune","eq","ctarget","getRadioFieldVal","type","String","value","checksed","classList","contains","M","form_filepicker","instances","id","fileadded","tagName","toLowerCase","multiple","neq","maps","_this$getDependantsOf2","entries","_this$getDependantsOf4","_this$getDependantsOf6","Map","in","split","includes","element","elements","namedItem","constructor","dependencyBehaviour","hide","hasOwnProperty","get","push"],"mappings":"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"}