{"version":3,"file":"rules.min.js","sources":["../../src/form/rules.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains a set of rules that elements can be compared against to determine if they should be shown, hidden, etc...\n *\n * @See /lib/pear/HTML/QuickForm/Rule/Compare.php\n * @See https://pear.php.net/manual/en/package.html.html-quickform2.rules.list.php for a list of available rules.\n *\n * @module     core_form/form/rules\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nexport default class Rules {\n    /**\n     * @var {Form} form The instance of the form class that has a DOM node & references matched.\n     */\n    form;\n\n    // Shorthand helpers rather than requiring devs to export the value and use an eq or neq check.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    notchecked(target) {\n        const displayMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'notchecked').forEach((dependant, key) => {\n            if (Boolean(key) === target.checked) {\n                showUnlock(dependant, displayMap);\n            } else {\n                hideLock(dependant, displayMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    checked(target) {\n        const displayMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'checked').forEach((dependant, key) => {\n            if (Boolean(key) !== target.checked) {\n                showUnlock(dependant, displayMap);\n            } else {\n                hideLock(dependant, displayMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(displayMap);\n    }\n\n    // Handlers for default rules defined in the links in the JSDoc for this class.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    eq(target) {\n        const displayMap = mapTemplate();\n        // TODO: Abstract this to a common call.\n        const radioFieldVal = (target.type === 'radio') ? this.form.form.elements.namedItem(target.name) : null;\n\n        this.getDependantsOfType(target.name, 'eq').forEach((dependant, key) => {\n            if (key === target.value || String(key) === String(radioFieldVal?.value)) {\n                showUnlock(dependant, displayMap);\n            } else {\n                hideLock(dependant, displayMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     * @See Moodle has some interesting aliasing ne && noteq, this is also the old \"default\" rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    neq(target) {\n        const displayMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'neq').forEach((dependant, key) => {\n            if (key !== target.value) {\n                hideLock(dependant, displayMap);\n            } else {\n                showUnlock(dependant, displayMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(displayMap);\n    }\n\n    // Moodle addons to the rules list.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    in(target) {\n        const displayMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'in').forEach((dependant, key) => {\n            if (key.split('|').includes(target.value)) {\n                hideLock(dependant, displayMap);\n            } else {\n                showUnlock(dependant, displayMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(displayMap);\n    }\n\n    /**\n     * Call off to the Form() to grab the elements that listen to the passed rule for the given element.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        return this.form.getDependantsOfType(element, type);\n    }\n\n    /**\n     * Constructor for the Rules class.\n     * @param {Form} form The form object that the rules are being applied to.\n     */\n    constructor(form) {\n        this.form = form;\n    }\n}\n\n/**\n * A small object that defines the behaviour of the dependency rules for readability.\n *\n * @type {{hide: number, disable: number}}\n */\nconst dependencyBehaviour = {\n    disable: 0,\n    hide: 1,\n};\n\n/**\n * Considering the dependant object, show and unlock the elements that are required.\n *\n * @param {Object<Number, Array>} dependant The dependant object that contains the rules for showing and unlocking.\n * @param {Map<String, Array>} displayMap The aggregation of elements that should be shown, hidden, locked, or unlocked.\n */\nconst showUnlock = (dependant, displayMap) => {\n    if (dependant.hasOwnProperty(dependencyBehaviour.hide)) {\n        displayMap.get('show').push(...dependant[dependencyBehaviour.hide]);\n    }\n    if (dependant.hasOwnProperty(dependencyBehaviour.disable)) {\n        displayMap.get('unlock').push(...dependant[dependencyBehaviour.disable]);\n    }\n};\n\n/**\n * Considering the dependant object, hide and lock the elements that are required.\n *\n * @param {Object<Number, Array>} dependant The dependant object that contains the rules for hiding and locking.\n * @param {Map<String, Array>} displayMap The aggregation of elements that should be shown, hidden, locked, or unlocked.\n */\nconst hideLock = (dependant, displayMap) => {\n    if (dependant.hasOwnProperty(dependencyBehaviour.hide)) {\n        displayMap.get('hide').push(...dependant[dependencyBehaviour.hide]);\n    }\n    if (dependant.hasOwnProperty(dependencyBehaviour.disable)) {\n        displayMap.get('lock').push(...dependant[dependencyBehaviour.disable]);\n    }\n};\n\n/**\n * A standard map that we'll be using to figure out what has to change and how.\n *\n * @returns {Map<String, Array>}\n */\nconst mapTemplate = () => {\n    return new Map([\n        ['hide', []],\n        ['show', []],\n        ['lock', []],\n        ['unlock', []],\n    ]);\n};\n\n/**\n * Given a map, remove any entries that have empty arrays / no elements to change.\n *\n * @param {Map<String, Array>} displayMap The map to prune empty entries from.\n * @returns {Map<String, Array>|Map<>} The pruned map or map even a fully pruned map if noting has to change.\n */\nconst pruneEmptyDisplayOptions = (displayMap) => {\n    for (const [key, value] of displayMap) {\n        if (value.length === 0) {\n            displayMap.delete(key);\n        }\n    }\n    return displayMap;\n};\n"],"names":["notchecked","target","displayMap","mapTemplate","getDependantsOfType","name","forEach","dependant","key","Boolean","checked","showUnlock","hideLock","pruneEmptyDisplayOptions","eq","radioFieldVal","type","this","form","elements","namedItem","value","String","neq","in","split","includes","element","constructor","dependencyBehaviour","hasOwnProperty","get","push","Map","length","delete"],"mappings":"qKA0CIA,WAAWC,cACDC,WAAaC,0BAEdC,oBAAoBH,OAAOI,KAAM,cAAcC,SAAQ,CAACC,UAAWC,OAChEC,QAAQD,OAASP,OAAOS,QACxBC,WAAWJ,UAAWL,YAEtBU,SAASL,UAAWL,eAIrBW,yBAAyBX,YASpCQ,QAAQT,cACEC,WAAaC,0BAEdC,oBAAoBH,OAAOI,KAAM,WAAWC,SAAQ,CAACC,UAAWC,OAC7DC,QAAQD,OAASP,OAAOS,QACxBC,WAAWJ,UAAWL,YAEtBU,SAASL,UAAWL,eAIrBW,yBAAyBX,YAWpCY,GAAGb,cACOC,WAAaC,cAEbY,cAAiC,UAAhBd,OAAOe,KAAoBC,KAAKC,KAAKA,KAAKC,SAASC,UAAUnB,OAAOI,MAAQ,iBAE9FD,oBAAoBH,OAAOI,KAAM,MAAMC,SAAQ,CAACC,UAAWC,OACxDA,MAAQP,OAAOoB,OAASC,OAAOd,OAASc,OAAOP,MAAAA,qBAAAA,cAAeM,OAC9DV,WAAWJ,UAAWL,YAEtBU,SAASL,UAAWL,eAIrBW,yBAAyBX,YAUpCqB,IAAItB,cACMC,WAAaC,0BAEdC,oBAAoBH,OAAOI,KAAM,OAAOC,SAAQ,CAACC,UAAWC,OACzDA,MAAQP,OAAOoB,MACfT,SAASL,UAAWL,YAEpBS,WAAWJ,UAAWL,eAIvBW,yBAAyBX,YAWpCsB,GAAGvB,cACOC,WAAaC,0BAEdC,oBAAoBH,OAAOI,KAAM,MAAMC,SAAQ,CAACC,UAAWC,OACxDA,IAAIiB,MAAM,KAAKC,SAASzB,OAAOoB,OAC/BT,SAASL,UAAWL,YAEpBS,WAAWJ,UAAWL,eAIvBW,yBAAyBX,YAUpCE,oBAAoBuB,QAASX,aAClBC,KAAKC,KAAKd,oBAAoBuB,QAASX,MAOlDY,YAAYV,yKACHA,KAAOA,aASdW,4BACO,EADPA,yBAEI,EASJlB,WAAa,CAACJ,UAAWL,cACvBK,UAAUuB,eAAeD,2BACzB3B,WAAW6B,IAAI,QAAQC,QAAQzB,UAAUsB,2BAEzCtB,UAAUuB,eAAeD,8BACzB3B,WAAW6B,IAAI,UAAUC,QAAQzB,UAAUsB,+BAU7CjB,SAAW,CAACL,UAAWL,cACrBK,UAAUuB,eAAeD,2BACzB3B,WAAW6B,IAAI,QAAQC,QAAQzB,UAAUsB,2BAEzCtB,UAAUuB,eAAeD,8BACzB3B,WAAW6B,IAAI,QAAQC,QAAQzB,UAAUsB,+BAS3C1B,YAAc,IACT,IAAI8B,IAAI,CACX,CAAC,OAAQ,IACT,CAAC,OAAQ,IACT,CAAC,OAAQ,IACT,CAAC,SAAU,MAUbpB,yBAA4BX,iBACzB,MAAOM,IAAKa,SAAUnB,WACF,IAAjBmB,MAAMa,QACNhC,WAAWiC,OAAO3B,YAGnBN"}