{"version":3,"file":"rules.min.js","sources":["../../src/form/rules.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains a set of rules that elements can be compared against to determine if they should be shown, hidden, etc...\n *\n * @See /lib/pear/HTML/QuickForm/Rule/Compare.php\n * @See https://pear.php.net/manual/en/package.html.html-quickform2.rules.list.php for a list of available rules.\n *\n * @module     core_form/form/rules\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nexport default class Rules {\n    /**\n     * @var {Form} form The instance of the form class that has a DOM node & references matched.\n     */\n    form;\n\n    // Shorthand helpers rather than requiring devs to export the value and use an eq or neq check.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    notchecked(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'notchecked').forEach((dependant, key) => {\n            if (Boolean(key) === target.checked) {\n                showUnlock(dependant, testMap);\n            } else {\n                hideLock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    checked(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'checked').forEach((dependant, key) => {\n            if (Boolean(key) !== target.checked) {\n                showUnlock(dependant, testMap);\n            } else {\n                hideLock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    // Handlers for default rules defined in the links in the JSDoc for this class.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    eq(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'eq').forEach((dependant, key) => {\n            if (key === target.value) {\n                showUnlock(dependant, testMap);\n            } else {\n                hideLock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    // TODO: Whats the difference between neq, ne && noteq?\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    neq(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'neq').forEach((dependant, key) => {\n            if (key !== target.value) {\n                hideLock(dependant, testMap);\n            } else {\n                showUnlock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    /**\n     * Alias for ne => neq rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    ne(target) {\n        return this.neq(target);\n    }\n\n    /**\n     * Alias for noteq => neq rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    noteq(target) {\n        return this.neq(target);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     * TODO: Likely needed for MDL-81410 and needs testing for confirmation of behaviour.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    gt(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'gt').forEach((dependant, key) => {\n            if (target.value > key) {\n                showUnlock(dependant, testMap);\n            } else {\n                hideLock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    // Moodle addons to the rules list.\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    in(target) {\n        const testMap = mapTemplate();\n\n        this.getDependantsOfType(target.name, 'in').forEach((dependant, key) => {\n            if (key.split('|').includes(target.value)) {\n                hideLock(dependant, testMap);\n            } else {\n                showUnlock(dependant, testMap);\n            }\n        });\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    /**\n     * TODO: Review YUI module to verify if this is needed / what this likely does.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    hide(target) {\n        const testMap = mapTemplate();\n\n        window.console.log('hide', target);\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    /**\n     * TODO: Review YUI module to verify if this is needed / what this likely does.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    default(target) {\n        const testMap = mapTemplate();\n\n        window.console.log('hide', target);\n\n        return pruneEmptyDisplayOptions(testMap);\n    }\n\n    /**\n     * Call off to the Form() to grab the elements that listen to the passed rule for the given element.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        return this.form.getDependantsOfType(element, type);\n    }\n\n    /**\n     * Constructor for the Rules class.\n     * @param {Form} form The form object that the rules are being applied to.\n     */\n    constructor(form) {\n        this.form = form;\n    }\n}\n\nconst dependencyBehaviour = {\n    disable: 0,\n    hide: 1,\n};\n\n/**\n * Considering the dependant object, show and unlock the elements that are required.\n *\n * @param {Object<Number, Array>} dependant The dependant object that contains the rules for showing and unlocking.\n * @param {Map<String, Array>} testMap The aggregation of elements that should be shown, hidden, locked, or unlocked.\n */\nconst showUnlock = (dependant, testMap) => {\n    if (dependant.hasOwnProperty(dependencyBehaviour.hide)) {\n        testMap.get('show').push(...dependant[dependencyBehaviour.hide]);\n    }\n    if (dependant.hasOwnProperty(dependencyBehaviour.disable)) {\n        testMap.get('unlock').push(...dependant[dependencyBehaviour.disable]);\n    }\n};\n\n/**\n * Considering the dependant object, hide and lock the elements that are required.\n *\n * @param {Object<Number, Array>} dependant The dependant object that contains the rules for hiding and locking.\n * @param {Map<String, Array>} testMap The aggregation of elements that should be shown, hidden, locked, or unlocked.\n */\nconst hideLock = (dependant, testMap) => {\n    if (dependant.hasOwnProperty(dependencyBehaviour.hide)) {\n        testMap.get('hide').push(...dependant[dependencyBehaviour.hide]);\n    }\n    if (dependant.hasOwnProperty(dependencyBehaviour.disable)) {\n        testMap.get('lock').push(...dependant[dependencyBehaviour.disable]);\n    }\n};\n\n/**\n * A standard map that we'll be using to figure out what has to change and how.\n *\n * @returns {Map<String, Array>}\n */\nconst mapTemplate = () => {\n    return new Map([\n        ['hide', []],\n        ['show', []],\n        ['lock', []],\n        ['unlock', []],\n    ]);\n};\n\n/**\n * Given a map, remove any entries that have empty arrays / no elements to change.\n *\n * @param {Map<String, Array>} testMap The map to prune empty entries from.\n * @returns {Map<String, Array>|Map<>} The pruned map or map even a fully pruned map if noting has to change.\n */\nconst pruneEmptyDisplayOptions = (testMap) => {\n    for (const [key, value] of testMap) {\n        if (value.length === 0) {\n            testMap.delete(key);\n        }\n    }\n    return testMap;\n};\n"],"names":["notchecked","target","testMap","mapTemplate","getDependantsOfType","name","forEach","dependant","key","Boolean","checked","showUnlock","hideLock","pruneEmptyDisplayOptions","eq","value","neq","ne","this","noteq","gt","in","split","includes","hide","window","console","log","default","element","type","form","constructor","dependencyBehaviour","hasOwnProperty","get","push","Map","length","delete"],"mappings":"qKA0CIA,WAAWC,cACDC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,cAAcC,SAAQ,CAACC,UAAWC,OAChEC,QAAQD,OAASP,OAAOS,QACxBC,WAAWJ,UAAWL,SAEtBU,SAASL,UAAWL,YAIrBW,yBAAyBX,SASpCQ,QAAQT,cACEC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,WAAWC,SAAQ,CAACC,UAAWC,OAC7DC,QAAQD,OAASP,OAAOS,QACxBC,WAAWJ,UAAWL,SAEtBU,SAASL,UAAWL,YAIrBW,yBAAyBX,SAWpCY,GAAGb,cACOC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,MAAMC,SAAQ,CAACC,UAAWC,OACxDA,MAAQP,OAAOc,MACfJ,WAAWJ,UAAWL,SAEtBU,SAASL,UAAWL,YAIrBW,yBAAyBX,SAUpCc,IAAIf,cACMC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,OAAOC,SAAQ,CAACC,UAAWC,OACzDA,MAAQP,OAAOc,MACfH,SAASL,UAAWL,SAEpBS,WAAWJ,UAAWL,YAIvBW,yBAAyBX,SASpCe,GAAGhB,eACQiB,KAAKF,IAAIf,QASpBkB,MAAMlB,eACKiB,KAAKF,IAAIf,QAUpBmB,GAAGnB,cACOC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,MAAMC,SAAQ,CAACC,UAAWC,OACxDP,OAAOc,MAAQP,IACfG,WAAWJ,UAAWL,SAEtBU,SAASL,UAAWL,YAIrBW,yBAAyBX,SAWpCmB,GAAGpB,cACOC,QAAUC,0BAEXC,oBAAoBH,OAAOI,KAAM,MAAMC,SAAQ,CAACC,UAAWC,OACxDA,IAAIc,MAAM,KAAKC,SAAStB,OAAOc,OAC/BH,SAASL,UAAWL,SAEpBS,WAAWJ,UAAWL,YAIvBW,yBAAyBX,SASpCsB,KAAKvB,cACKC,QAAUC,qBAEhBsB,OAAOC,QAAQC,IAAI,OAAQ1B,QAEpBY,yBAAyBX,SASpC0B,QAAQ3B,cACEC,QAAUC,qBAEhBsB,OAAOC,QAAQC,IAAI,OAAQ1B,QAEpBY,yBAAyBX,SAUpCE,oBAAoByB,QAASC,aAClBZ,KAAKa,KAAK3B,oBAAoByB,QAASC,MAOlDE,YAAYD,yKACHA,KAAOA,aAIdE,4BACO,EADPA,yBAEI,EASJtB,WAAa,CAACJ,UAAWL,WACvBK,UAAU2B,eAAeD,2BACzB/B,QAAQiC,IAAI,QAAQC,QAAQ7B,UAAU0B,2BAEtC1B,UAAU2B,eAAeD,8BACzB/B,QAAQiC,IAAI,UAAUC,QAAQ7B,UAAU0B,+BAU1CrB,SAAW,CAACL,UAAWL,WACrBK,UAAU2B,eAAeD,2BACzB/B,QAAQiC,IAAI,QAAQC,QAAQ7B,UAAU0B,2BAEtC1B,UAAU2B,eAAeD,8BACzB/B,QAAQiC,IAAI,QAAQC,QAAQ7B,UAAU0B,+BASxC9B,YAAc,IACT,IAAIkC,IAAI,CACX,CAAC,OAAQ,IACT,CAAC,OAAQ,IACT,CAAC,OAAQ,IACT,CAAC,SAAU,MAUbxB,yBAA4BX,cACzB,MAAOM,IAAKO,SAAUb,QACF,IAAjBa,MAAMuB,QACNpC,QAAQqC,OAAO/B,YAGhBN"}