{"version":3,"file":"rules.min.js","sources":["../../src/form/rules.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains a set of rules that elements can be compared against to determine if they should be shown, hidden, etc...\n *\n * @See /lib/pear/HTML/QuickForm/Rule/Compare.php\n * @See https://pear.php.net/manual/en/package.html.html-quickform2.rules.list.php for a list of available rules.\n *\n * @module     core_form/form/rules\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport {determineDisplayMap} from './display';\n\nexport default class Rules {\n    /**\n     * @var {Form} form The instance of the form class that has a DOM node & references matched.\n     */\n    form;\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    notchecked(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'notchecked').forEach((dependant, key) => {\n            lock = Boolean(key) !== target.checked;\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    checked(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'checked').forEach((dependant, key) => {\n            lock = Boolean(key) === target.checked;\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    eq(target) {\n        const displayMap = this.form.mapTemplate();\n        const rTarget = this.getRadioFieldVal(target);\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'eq').forEach((dependant, key) => {\n            if (target.type === 'radio') {\n                lock = String(key) === String(rTarget.value);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            } else if (target.type === 'hidden' && this.getHiddenCkbs(target)) {\n                // This is the hidden input that is part of an advcheckbox.\n                lock = target.checked === Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            } else if (target.type === 'checkbox' && !target.checked) {\n                lock = target.checked === Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            }\n            if (target.classList.contains('filepickerhidden')) {\n                lock = !M.form_filepicker.instances[target.id].fileadded;\n                determineDisplayMap(dependant, displayMap, lock);\n            } else if (target.tagName.toLowerCase() === 'select' && target.multiple) {\n                // Multiple selects can have one or more value assigned. A pipe (|) is used as a value separator\n                // when multiple values have to be selected at the same time.\n                window.console.error('This is a multiple select', target);\n            } else {\n                lock = target.value === key;\n                determineDisplayMap(dependant, displayMap, lock);\n            }\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     * @See Moodle has some interesting aliasing ne && noteq, this is also the old \"default\" rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    neq(target) {\n        const displayMap = this.form.mapTemplate();\n        const rTarget = this.getRadioFieldVal(target);\n        let lock = false;\n\n        // Get all the aliases of neq and check them all at once.\n        const maps = [\n            ...this.getDependantsOfType(target.name, 'neq')?.entries() ?? [],\n            ...this.getDependantsOfType(target.name, 'ne')?.entries() ?? [],\n            ...this.getDependantsOfType(target.name, 'noteq')?.entries() ?? [],\n        ];\n        const condensedMaps = new Map(maps);\n        condensedMaps.forEach((dependant, key) => {\n            if (target.type === 'radio') {\n                lock = String(key) !== String(rTarget.value);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            } else if (target.type === 'hidden' && this.getHiddenCkbs(target)) {\n                // This is the hidden input that is part of an advcheckbox.\n                lock = target.checked !== Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            } else if (target.type === 'checkbox' && !target.checked) {\n                lock = target.checked === Boolean(key);\n                determineDisplayMap(dependant, displayMap, lock);\n                return;\n            }\n            if (target.classList.contains('filepickerhidden')) {\n                lock = !!M.form_filepicker.instances[target.id].fileadded;\n                determineDisplayMap(dependant, displayMap, lock);\n            } else if (target.tagName.toLowerCase() === 'select' && target.multiple) {\n                // Multiple selects can have one or more value assigned. A pipe (|) is used as a value separator\n                // when multiple values have to be selected at the same time.\n                window.console.error('This is a multiple select', target);\n            } else {\n                lock = target.value !== key;\n                determineDisplayMap(dependant, displayMap, lock);\n            }\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    /**\n     * Compare the value of the changed DOM node to the requested rule.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to be compared against the requested rule.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    in(target) {\n        const displayMap = this.form.mapTemplate();\n        let lock = false;\n\n        this.getDependantsOfType(target.name, 'in').forEach((dependant, key) => {\n            lock = key.split('|').includes(target.value);\n            determineDisplayMap(dependant, displayMap, lock);\n        });\n\n        return this.form.displayMapPrune(displayMap);\n    }\n\n    // Getters of map values & form elements.\n\n    /**\n     * TODO: Maybe remove as this is only an alias kind of thing...\n     * Call off to the Form() to grab the elements that listen to the passed rule for the given element.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        return this.form.getDependantsOfType(element, type);\n    }\n\n    /**\n     * Radio fields are a bit different, they need to be handled differently.\n     *\n     * @param {HTMLFormElement} target The changed DOM node to find a potential radio field for.\n     * @returns {RadioNodeList|HTMLFormElement}\n     */\n    getRadioFieldVal(target) {\n        return target.type === 'radio' ? this.form.form.elements.namedItem(target.name) : target;\n    }\n\n    /**\n     * A small helper to determine if the advcheckboxes are being used.\n     *\n     * @param {HTMLElement} target The target element to get the hidden checkboxes for.\n     * @returns {boolean} Is this a hidden checkbox?\n     */\n    getHiddenCkbs(target) {\n        return this.form.form.querySelectorAll('input[type=checkbox][name=\"' + target.name + '\"]').length !== 0;\n    }\n\n    /**\n     * Constructor for the Rules class.\n     * @param {Form} form The form object that the rules are being applied to.\n     */\n    constructor(form) {\n        this.form = form;\n    }\n}\n"],"names":["notchecked","target","displayMap","this","form","mapTemplate","lock","getDependantsOfType","name","forEach","dependant","key","Boolean","checked","displayMapPrune","eq","rTarget","getRadioFieldVal","type","String","value","getHiddenCkbs","classList","contains","M","form_filepicker","instances","id","fileadded","tagName","toLowerCase","multiple","window","console","error","neq","maps","_this$getDependantsOf2","entries","_this$getDependantsOf4","_this$getDependantsOf6","Map","in","split","includes","element","elements","namedItem","querySelectorAll","length","constructor"],"mappings":"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"}