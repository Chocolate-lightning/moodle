{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains JS functionality required by mforms and is included automatically\n * when required.\n *\n * @see /lib/formslib.php#L2548 Candidate for removal, depends on grouped rules.\n *\n * @module     core_form/form\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\n// Pure form functionality.\nimport * as FormChangeChecker from './changechecker';\nimport * as FormEvents from './events';\nimport * as Submit from './submit';\n//import {serialize} from './util';\nimport Rules from './form/rules';\nimport * as MutateDom from './form/dom';\n\n// Maybe not needed but noted just in case.\n//import * as CollapseSections from './collapsesections'; // TODO: This is included via ../collapsesections.mustache\n//import * as EncryptedPassword from './encryptedpassword'; // TODO: This is included via ../setting_encryptedpassword.mustache\n//import * as FileTypes from './filetypes'; // TODO: This is included via /lib/form/filetypes.php#L152\n//import * as PasswordUnmask from './passwordunmask'; // TODO: This is included via ../element-passwordunmask.mustache\n//import * as ShowAdvanced from './showadvanced'; // TODO: This is included via /lib/formslib.php#L3349\n\n// Custom element types.\n//import * as ChoiceDropdown from 'core_form/choicedropdown'; // TODO: This is included via ../choicedropdown.mustache\n//import * as ConfigText_maxlength from 'core_form/configtext_maxlength'; // TODO: This is included via lib/adminlib.php#L2635\n//import * as DefaultCustom from 'core_form/defaultcustom'; // TODO: This is included via lib/form/defaultcustom.php#L253\n\nexport default class Form {\n    /**\n     * @var {HTMLFormElement} form Our very own form to work on.\n     */\n    form;\n\n    /**\n     * @var {Map} dependencies Our map of form dependencies.\n     */\n    dependencies;\n\n    /**\n     * Create a new form instance.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     */\n    constructor(formID, dependencies) {\n        // Set class properties.\n        this.form = document.querySelector(`#${formID}`);\n        this.dependencies = this.getDependencyMapper(dependencies);\n        this.rules = new Rules(this);\n\n        window.console.log('this.dependencies');\n        window.console.log(this.dependencies);\n\n        // Handle mutations within the form.\n        this.registerEventListeners();\n        // TODO: Vanity call...\n        FormChangeChecker.watchForm(this.form);\n    }\n\n    /**\n     * Add event listeners to the form.\n     */\n    registerEventListeners() {\n        this.form.addEventListener('change', (e) => {\n            if (e.target.type === 'submit') {\n                // TODO: Dummy calls so import list looks better...\n                // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n                FormEvents.notifyFormSubmittedByJavascript(this.form);\n                FormChangeChecker.resetFormDirtyState(this.form);\n                // TODO: Figure out what the Submit module does and if it is needed.\n                Submit.init(e.target.id);\n            }\n            if (e.target.type === 'reset') {\n                this.form.reset();\n            }\n            // Something changes based on this element.\n            if (this.dependencies.has(e.target.name)) {\n                this.dispatchDependencyRules(e.target);\n            }\n        });\n    }\n\n    /**\n     * Dispatch the dependency rules to the appropriate rule handler.\n     *\n     * @param {HTMLFormElement} target The name associated to the element that has changed.\n     */\n    dispatchDependencyRules(target) {\n        const dependents = this.dependencies.get(target.name);\n\n        dependents.forEach((dependants, ruleName) => {\n            if (!this.rules[ruleName]) {\n                return;\n            }\n            const elNamesObj = this.rules[ruleName](target);\n            window.console.log(ruleName);\n            window.console.log(elNamesObj);\n            // TODO: Maybe collate the results of the rules into a single object to then dispatch to the DOM.\n            //this.domDispatch(elNamesObj);\n        });\n    }\n\n    /**\n     * For a given element, get the names of DOM nodes that can change based on the given rule type name.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        if (this.dependencies.get(element) !== 'undefined'){\n            return this.dependencies.get(element).get(type) ?? [];\n        }\n        return [];\n    }\n\n    /**\n     * Dispatch the DOM manipulation to the appropriate function.\n     *\n     * @param {Object<hide[String], show[String], lock[String], unlock[String]>} elNamesObj What needs to change.\n     */\n    domDispatch(elNamesObj) {\n        // TODO: Remove empty arrays from the map / never add a map entry if array is empty back in Rules()....\n        const mappedObj = new Map(Object.entries(elNamesObj));\n        mappedObj.forEach((elements, domUpdateOpt) => {\n            if (!MutateDom[domUpdateOpt]) {\n                return;\n            }\n            const nodes = this.elementNamesToDomNodes(elements);\n            nodes.forEach((node) => {\n                if (node === null) {\n                    return;\n                }\n                MutateDom[domUpdateOpt](node);\n            });\n        });\n    }\n\n    /**\n     * Convert the element names into DOM nodes based on the element names.\n     *\n     * @param {Array<String>} elementNames The name of dependent elements to get associated DOM nodes.\n     * @returns {Array<HTMLFormElement>}\n     */\n    elementNamesToDomNodes(elementNames) {\n        return elementNames.map((element) => {\n            return this.form.elements.namedItem(element);\n        });\n    }\n\n    /**\n     * Convert the dependencies object into a map of elements and their associated rules.\n     *\n     * @example\n     * Note: This is a simplified example of the returned map showing the rules for the grade type element in assign.\n     *\n     *      \"grade[modgrade_type]\" => Map {\n     *          \"eq\" => Map {\n     *              \"none\" => Object {\n     *                  1 => Array [\n     *                      \"advancedgradingmethod_submissions\",\n     *                      \"gradecat\",\n     *                      \"gradepass\",\n     *                      \"completionusegrade\",\n     *                      \"completionusegrade\",\n     *                  ]\n     *              }\n     *          },\n     *          \"neq\" => Map {\n     *              \"point\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_point]\",\n     *                      \"grade[modgrade_rescalegrades]\"\n     *                  ]\n     *              },\n     *              \"scale\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_scale]\"\n     *                  ]\n     *              }\n     *          }\n     *      }\n     *\n     * Note: If the value of grade[modgrade_type] === \"none\" then the array of elements defined should be hidden.\n     * Note: If the value of grade[modgrade_type] !== \"point\" then the array of elements defined within the following:\n     * \"eq\" => \"none\" && \"neq\" => \"scale\" should be hidden.\n     *\n     * Note: The object within the \"rule\" map can contain either 0 or 1 this helps determine if the element should be:\n     *       hidden or locked if the rule is met.\n     * @See /lib/formslib.php DEP_DISABLE & DEP_HIDE.\n     *\n     * @param {Object} dependencies The supplied object of form dependencies to migrate into a map.\n     * @returns {Map<String, Map>} A map of elements and their associated rules.\n     */\n    getDependencyMapper(dependencies) {\n        /**\n         * Convert the object into a first level map. i.e. elementName => ruleType.\n         *\n         * @type {Map<string, Map>} The map of rules associated to the given element.\n         * @example \"grade[modgrade_type]\" => Map<\"eq\", \"neq\">\n         */\n        const elementMap = new Map(Object.entries(dependencies));\n        elementMap.forEach((elementrules, key) => {\n            /**\n             * Convert the element rules object into a map.\n             *\n             * @type {Map<string, Map>} The map of rules associated to the given element.\n             * @example \"eq\" => Map<\"none\" => Object<Number, Array>>\n             * @example \"neq\" => Map<\"point\" => Object<Number, Array>, \"scale\" => Object<Number, Array>>\n             */\n            const ruleMap = new Map(Object.entries(elementrules));\n            ruleMap.forEach((ruleComparisons, key) => {\n                ruleMap.set(key, new Map(Object.entries(ruleComparisons)));\n            });\n            elementMap.set(key, ruleMap);\n        });\n        return elementMap;\n    }\n\n    /**\n     * Initialize the form and its dependencies.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     * @returns {Form} An instance associated to a specific form on an given page.\n     */\n    static init(formID, dependencies) {\n        return new Form(formID, dependencies);\n    }\n}\n"],"names":["Form","constructor","formID","dependencies","form","document","querySelector","this","getDependencyMapper","rules","Rules","window","console","log","registerEventListeners","FormChangeChecker","watchForm","addEventListener","e","target","type","FormEvents","notifyFormSubmittedByJavascript","resetFormDirtyState","Submit","init","id","reset","has","name","dispatchDependencyRules","get","forEach","dependants","ruleName","elNamesObj","getDependantsOfType","element","domDispatch","Map","Object","entries","elements","domUpdateOpt","MutateDom","elementNamesToDomNodes","node","elementNames","map","namedItem","elementMap","elementrules","key","ruleMap","ruleComparisons","set"],"mappings":"gmDAgDqBA,KAiBjBC,YAAYC,OAAQC,mGAEXC,KAAOC,SAASC,yBAAkBJ,cAClCC,aAAeI,KAAKC,oBAAoBL,mBACxCM,MAAQ,IAAIC,eAAMH,MAEvBI,OAAOC,QAAQC,IAAI,qBACnBF,OAAOC,QAAQC,IAAIN,KAAKJ,mBAGnBW,yBAELC,kBAAkBC,UAAUT,KAAKH,MAMrCU,8BACSV,KAAKa,iBAAiB,UAAWC,IACZ,WAAlBA,EAAEC,OAAOC,OAGTC,WAAWC,gCAAgCf,KAAKH,MAChDW,kBAAkBQ,oBAAoBhB,KAAKH,MAE3CoB,OAAOC,KAAKP,EAAEC,OAAOO,KAEH,UAAlBR,EAAEC,OAAOC,WACJhB,KAAKuB,QAGVpB,KAAKJ,aAAayB,IAAIV,EAAEC,OAAOU,YAC1BC,wBAAwBZ,EAAEC,WAU3CW,wBAAwBX,QACDZ,KAAKJ,aAAa4B,IAAIZ,OAAOU,MAErCG,SAAQ,CAACC,WAAYC,gBACvB3B,KAAKE,MAAMyB,uBAGVC,WAAa5B,KAAKE,MAAMyB,UAAUf,QACxCR,OAAOC,QAAQC,IAAIqB,UACnBvB,OAAOC,QAAQC,IAAIsB,eAa3BC,oBAAoBC,QAASjB,sCACc,cAAnCb,KAAKJ,aAAa4B,IAAIM,wCACf9B,KAAKJ,aAAa4B,IAAIM,SAASN,IAAIX,6DAEvC,GAQXkB,YAAYH,YAEU,IAAII,IAAIC,OAAOC,QAAQN,aAC/BH,SAAQ,CAACU,SAAUC,oBACpBC,UAAUD,qBAGDpC,KAAKsC,uBAAuBH,UACpCV,SAASc,OACE,OAATA,MAGJF,UAAUD,cAAcG,YAWpCD,uBAAuBE,qBACZA,aAAaC,KAAKX,SACd9B,KAAKH,KAAKsC,SAASO,UAAUZ,WAgD5C7B,oBAAoBL,oBAOV+C,WAAa,IAAIX,IAAIC,OAAOC,QAAQtC,sBAC1C+C,WAAWlB,SAAQ,CAACmB,aAAcC,aAQxBC,QAAU,IAAId,IAAIC,OAAOC,QAAQU,eACvCE,QAAQrB,SAAQ,CAACsB,gBAAiBF,OAC9BC,QAAQE,IAAIH,IAAK,IAAIb,IAAIC,OAAOC,QAAQa,sBAE5CJ,WAAWK,IAAIH,IAAKC,YAEjBH,uBAUChD,OAAQC,qBACT,IAAIH,KAAKE,OAAQC"}