{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains JS functionality required by mforms and is included automatically\n * when required.\n *\n * @see /lib/formslib.php#L2548 Candidate for removal, depends on grouped rules.\n * @see /lib/amd/src/showhidesettings.js Candidate for removal.\n *\n * @module     core_form/form\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport * as FormChangeChecker from './changechecker';\nimport * as Submit from './submit';\nimport Rules from './form/rules';\nimport {mapTemplate} from './form/display';\nimport * as MutateDom from './form/display';\nimport Pending from 'core/pending';\n\n/**\n * @var {Map<string, Form>} M.form2 Global map of forms currently on the page.\n */\nM.form2 = M.form2 || new Map();\n\nexport default class Form {\n    /**\n     * @var {HTMLFormElement} form Our very own form to work on.\n     */\n    form;\n\n    /**\n     * @var {Map} dependencies Our map of form dependencies.\n     * @See this.getDependencyMapper() for structure info.\n     */\n    dependencies;\n\n    /**\n     * @var {Map<String, Boolean>} editors Our map of form editors used get the right selector.\n     */\n    editors;\n\n    /**\n     * @var {Array<String>} initialDisabledHidden An array of element names that were hidden or disabled by default.\n     */\n    initialDisabledHidden = [];\n\n    /**\n     * Create a new Form instance.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     */\n    constructor(formID, dependencies) {\n        // Handle constructing the dependency map, finding editors and init the rules.\n        const pendingPromise = new Pending('construction');\n        this.form = document.querySelector(`#${formID}`);\n        this.dependencies = this.getDependencyMapper(dependencies);\n        this.editors = this.findEditors();\n        this.rules = new Rules(this);\n\n        // Apply the initial state of the form.\n        this.applyInitialState();\n\n        // Handle mutations within the form.\n        this.registerEventListeners();\n        FormChangeChecker.watchForm(this.form);\n        pendingPromise.resolve();\n    }\n\n    /**\n     * On page load, apply the initial state of the form by checking the shown items and running their rules.\n     * We also want to confirm if anything has been hidden or disabled by a PHP callback on load and respect\n     * their wishes on page load.\n     */\n    applyInitialState() {\n        // Find any elements that are hidden or disabled by a PHP callback rule.\n        [...this.form.elements].forEach((element) => {\n            if ((element.disabled || element.hidden) && element.name !== '') {\n                this.initialDisabledHidden.push(element.name);\n            }\n        });\n        // Run through the form elements looking for anything to run rules against on load.\n        const map = this.generateDisplayMap();\n        this.domDispatch(map, true);\n    }\n\n    /**\n     * Somewhere out there, we have a form that wants to ensure the state of the form reflects their changes.\n     */\n    formUpdatedExternally() {\n        const map = this.generateDisplayMap();\n        this.domDispatch(map);\n\n        if (map.get('show') !== undefined) {\n            const opened = this.elementNamesToDomNodes(map.get('show'));\n            const filterNullNodes = opened.filter((node) => node !== null);\n\n            filterNullNodes.forEach((node) => {\n                if (this.dependencies.has(node.name)) {\n                    const secondLvlResult = this.displayMapPrune(this.dispatchDependencyRules(node));\n                    this.domDispatch(secondLvlResult);\n                }\n            });\n        }\n    }\n\n    /**\n     * Helper to iterate all the form elements that have a rule associated with them and generate a display map.\n     *\n     * @returns {Map<String, Array>}\n     */\n    generateDisplayMap() {\n        const map = mapTemplate();\n        [...this.form.elements].forEach((element) => {\n            if (this.dependencies.has(element.name)) {\n                const elDisplayMap = this.displayMapPrune(this.dispatchDependencyRules(element));\n                for (const [key, value] of elDisplayMap) {\n                    map.get(key).push(...value);\n                }\n            }\n        });\n        return map;\n    }\n\n    /**\n     * Add event listeners to the form.\n     */\n    registerEventListeners() {\n        // TODO: Choice dropdown does not trigger here.\n        this.form.addEventListener('change', async(e) => {\n            if (e.target.type === 'submit') {\n                FormChangeChecker.resetFormDirtyState(this.form);\n                Submit.init(e.target.id);\n            }\n            if (e.target.type === 'reset') {\n                FormChangeChecker.resetFormDirtyState(this.form);\n                this.form.reset();\n            }\n            // Something changes based on this element.\n            if (this.dependencies.has(e.target.name)) {\n                FormChangeChecker.markFormChangedFromNode(e.target);\n                const pendingPromise = new Pending('update');\n                const results = this.displayMapPrune(this.dispatchDependencyRules(e.target));\n                await this.domDispatch(results);\n\n                // Given that we are showing something,\n                // we'll do a second order check to see if we need to show more based on the new state of the form.\n                if (results.get('show') !== undefined) {\n                    const opened = this.elementNamesToDomNodes(results.get('show'));\n                    const filterNullNodes = opened.filter((node) => node !== null);\n\n                    filterNullNodes.forEach((node) => {\n                        const pendingPromise = new Pending('updatesecond');\n                        // RadioNodeList needs to be iterated through as it is not a simple element.\n                        if (node instanceof RadioNodeList) {\n                            node.forEach((n) => {\n                                if (this.dependencies.has(n.name)) {\n                                    const secondLvlResult = this.displayMapPrune(this.dispatchDependencyRules(n));\n                                    this.domDispatch(secondLvlResult);\n                                }\n                            });\n                        }\n                        if (this.dependencies.has(node.name)) {\n                            const secondLvlResult = this.displayMapPrune(this.dispatchDependencyRules(node));\n                            this.domDispatch(secondLvlResult);\n                        }\n                        pendingPromise.resolve();\n                    });\n                }\n                pendingPromise.resolve();\n            }\n        });\n    }\n\n    /**\n     * Dispatch the dependency rules to the appropriate rule handler and get back a map of display options.\n     *\n     * @param {HTMLFormElement} target The name associated to the element that has changed.\n     * @returns {Map<String, Array<String>>} Actions to be taken along with element names that should be affected.\n     */\n    dispatchDependencyRules(target) {\n        const displayMap = mapTemplate();\n        this.dependencies.get(target.name).forEach((dependants, ruleName) => {\n            // If the rule exists, use it, otherwise fallback to 'neq' which seems to be the \"default\" rule originally.\n            const elNamesMap = this.rules[ruleName] ? this.rules[ruleName](target) : this.rules.neq(target);\n            // Merge the current rule map with the final display map.\n            elNamesMap.forEach((nodeNames, displayOption) => {\n                // We want to merge in the new array values into the existing array otherwise,\n                // we would get an array of arrays which is needless complexity.\n                displayMap.set(displayOption, [...displayMap.get(displayOption), ...nodeNames.values()].flat());\n            });\n        });\n        return displayMap;\n    }\n\n    /**\n     * By default, the full display map contains empty entries and potential duplicated DOM node names.\n     *\n     * First: We review the unlock array for node names that have to be hidden. If a match is found,\n     * the node name will be removed from being unlocked.\n     * Then: We review the show array for node names that have to be hidden. If a match is found,\n     * the node name will be removed from being shown as a rule has specified this should actually be hidden.\n     * Finally: We get rid of any empty entries within the display map to prevent running pointless display updates.\n     *\n     * @param {Map<String, Array>} displayMap Map of elements and their associated rules to prune.\n     * @returns {Map<String, Array>|Map<>} The pruned map or map even a fully pruned map if noting has to change.\n     */\n    displayMapPrune(displayMap) {\n        // Filter any unlocked items that pegged to be hidden as they must be locked if they are hidden.\n        // Using something like !displayMap.get('hide').toString().includes(x.toString()) did not work as\n        // it could result in false positives such as contentfoobar includes content when doing the eval.\n        if (displayMap.get('unlock') !== undefined) {\n            if (displayMap.get('hide') !== undefined) {\n                const hideEvenIfUnlocked = displayMap.get('unlock').filter(x => {\n                    return displayMap.get('hide').indexOf(x.toString()) === -1;\n                });\n                displayMap.set('unlock', hideEvenIfUnlocked);\n            }\n            if (displayMap.get('lock') !== undefined) {\n                const lockEvenIfUnlocked = displayMap.get('unlock').filter(x => {\n                    return displayMap.get('lock').indexOf(x.toString()) === -1;\n                });\n                displayMap.set('unlock', lockEvenIfUnlocked);\n            }\n        }\n\n        // Filter any shown items that pegged to be hidden.\n        if (displayMap.get('show') !== undefined && displayMap.get('hide') !== undefined) {\n            const hideEvenIfShown = displayMap.get('show').filter(x => {\n                return displayMap.get('hide').indexOf(x.toString()) === -1;\n            });\n            displayMap.set('show', hideEvenIfShown);\n        }\n\n        // Remove any empty entries.\n        for (const [key, value] of displayMap) {\n            if (value.length === 0) {\n                displayMap.delete(key);\n            }\n        }\n        return displayMap;\n    }\n\n    /**\n     * For a given element, get the names of DOM nodes that can change based on the given rule type name.\n     *\n     * @param {String} elementName The name of the element to get the dependants for.\n     * @param {String} ruleName The rule type to get the dependants for.\n     * @returns {Map<String, Array>|[]} Either the rule comparison value with associated node names to update or an empty array.\n     */\n    getDependantsOfType(elementName, ruleName) {\n        return this.dependencies.get(elementName) !== 'undefined' ? this.dependencies.get(elementName).get(ruleName) ?? [] : [];\n    }\n\n    /**\n     * Dispatch the DOM manipulation to the appropriate function.\n     *\n     * @param {Map<String, Array>} elNamesMap What needs to change.\n     * @param {Boolean|Null} firstRun Whether this is the first run of the form if so,\n     * filter some elements based on PHP rule callback values.\n     */\n    domDispatch(elNamesMap, firstRun = false) {\n        elNamesMap = this.displayMapPrune(elNamesMap);\n        // Go through the pruned display map and perform the requested display action.\n        elNamesMap.forEach((elements, domUpdateOpt) => {\n            // The requested display function somehow does not exist.\n            if (!MutateDom[domUpdateOpt]) {\n                return;\n            }\n            // If something was hidden or disabled by default via PHP rule callback, we don't want to touch it.\n            if (firstRun) {\n                elements = elements.filter((el) => !this.initialDisabledHidden.includes(el));\n            }\n\n            // Given the node names to update for a given display action, grab their associated HTMLFormElement and update them.\n            this.elementNamesToDomNodes(elements).forEach((node) => {\n                // Ensure we only update form items, instanceof check is a bit too much here as we have RadioNodeList items.\n                if (node === null) {\n                    return;\n                }\n                if (node instanceof RadioNodeList) {\n                    node.forEach((el) => {\n                        MutateDom[domUpdateOpt](el);\n                    });\n                } else {\n                    // Given a HTMLFormElement, perform the requested display action.\n                    MutateDom[domUpdateOpt](node);\n                }\n            });\n        });\n    }\n\n    /**\n     * Convert element names into DOM nodes based on the element name or a compound selector based on the given name.\n     *\n     * @param {Array<String>} elementNames The name of dependent elements to get associated DOM nodes.\n     * @returns {Array<HTMLFormElement>} DOM items to perform display actions on.\n     */\n    elementNamesToDomNodes(elementNames) {\n        return elementNames.map((element) => {\n            if (this.form.querySelector(`[data-groupname=\"${element}\"]`)) {\n                return this.form.querySelector(`[data-groupname=\"${element}\"]`);\n            }\n            if (this.editors.get(`${element}[text]`)) {\n                // Text editors are stupid.\n                return this.form.elements.namedItem(`${element}[text]`);\n            } else if (!this.form.elements.namedItem(element)) {\n                // Grouped items are stupid.\n                return this.form.elements.namedItem(`id_${element}`);\n            }\n            // Regular happy plain form item or RadioNodeList.\n            return this.form.elements.namedItem(element);\n        });\n    }\n\n    /**\n     * During init, look through the form and identify which elements are editors.\n     *\n     * @returns {Map<String, Boolean>} Map of found editors.\n     */\n    findEditors() {\n        let found = new Map();\n        const fEditors = this.form.querySelectorAll('[data-fieldtype=\"editor\"] textarea');\n        Array.from(fEditors).forEach((node) => {\n            found.set(node.name, true);\n        });\n        return found;\n    }\n\n    /**\n     * Convert the dependencies object into a map of elements and their associated rules.\n     *\n     * @example\n     * Note: This is a simplified example of the returned map showing the rules for the grade type element in assign.\n     *\n     *      \"grade[modgrade_type]\" => Map {\n     *          \"eq\" => Map {\n     *              \"none\" => Object {\n     *                  1 => Array [\n     *                      \"advancedgradingmethod_submissions\",\n     *                      \"gradecat\",\n     *                      \"gradepass\",\n     *                      \"completionusegrade\",\n     *                      \"completionusegrade\",\n     *                  ]\n     *              }\n     *          },\n     *          \"neq\" => Map {\n     *              \"point\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_point]\",\n     *                      \"grade[modgrade_rescalegrades]\"\n     *                  ]\n     *              },\n     *              \"scale\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_scale]\"\n     *                  ]\n     *              }\n     *          }\n     *      }\n     *\n     * Note: If the value of grade[modgrade_type] === \"none\" then the array of elements defined should be hidden.\n     * Note: If the value of grade[modgrade_type] !== \"point\" then the array of elements defined within the following:\n     * \"eq\" => \"none\" && \"neq\" => \"scale\" should be hidden.\n     *\n     * Note: The object within the \"rule\" map can contain either 0 or 1 this helps determine if the element should be:\n     *       hidden or locked if the rule is met.\n     * @See /lib/formslib.php DEP_DISABLE & DEP_HIDE.\n     *\n     * @param {Object} dependencies The supplied object of form dependencies to migrate into a map.\n     * @returns {Map<String, Map>} A map of elements and their associated rules.\n     */\n    getDependencyMapper(dependencies) {\n        /**\n         * Convert the object into a first level map. i.e. elementName => ruleType.\n         *\n         * @type {Map<string, Map>} The map of rules associated to the given element.\n         * @example \"grade[modgrade_type]\" => Map<\"eq\", \"neq\">\n         */\n        const elementMap = new Map(Object.entries(dependencies));\n        elementMap.forEach((elementrules, key) => {\n            /**\n             * Convert the element rules object into a map.\n             *\n             * @type {Map<string, Map>} The map of rules associated to the given element.\n             * @example \"eq\" => Map<\"none\" => Object<Number, Array>>\n             * @example \"neq\" => Map<\"point\" => Object<Number, Array>, \"scale\" => Object<Number, Array>>\n             */\n            const ruleMap = new Map(Object.entries(elementrules));\n            ruleMap.forEach((ruleComparisons, key) => {\n                /**\n                 * Convert any disabledIf rules into objects, so we can manage them the same as hideIf items.\n                 *\n                 * @type {Map<string, Map>} The map of comparison values.\n                 * @example \"none\" => \"none\" => Object<Number, Array>\n                 * @example \"neq\" => \"point\" => Object<Number, Array>\n                 */\n                const hideDefine = new Map(Object.entries(ruleComparisons));\n                hideDefine.forEach((action, compVal) => {\n                    if (Array.isArray(action)) {\n                        action = {...action};\n                    }\n                    hideDefine.set(compVal, action);\n                });\n                ruleMap.set(key, hideDefine);\n            });\n            elementMap.set(key, ruleMap);\n        });\n        return elementMap;\n    }\n\n    /**\n     * Initialize the form and its dependencies. Also add the Form instance to the global state.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     * @returns {Form} An instance associated to a specific form on a given page.\n     */\n    static init(formID, dependencies) {\n        const instance = new Form(formID, dependencies);\n        // Add the Form instance to the global state so other modules can access this instance.\n        M.form2.set(formID, instance);\n        return instance;\n    }\n}\n"],"names":["M","form2","Map","Form","constructor","formID","dependencies","pendingPromise","Pending","form","document","querySelector","this","getDependencyMapper","editors","findEditors","rules","Rules","applyInitialState","registerEventListeners","FormChangeChecker","watchForm","resolve","elements","forEach","element","disabled","hidden","name","initialDisabledHidden","push","map","generateDisplayMap","domDispatch","formUpdatedExternally","undefined","get","elementNamesToDomNodes","filter","node","has","secondLvlResult","displayMapPrune","dispatchDependencyRules","elDisplayMap","key","value","addEventListener","async","e","target","type","resetFormDirtyState","Submit","init","id","reset","markFormChangedFromNode","results","RadioNodeList","n","displayMap","dependants","ruleName","neq","nodeNames","displayOption","set","values","flat","hideEvenIfUnlocked","x","indexOf","toString","lockEvenIfUnlocked","hideEvenIfShown","length","delete","getDependantsOfType","elementName","elNamesMap","firstRun","domUpdateOpt","MutateDom","el","includes","elementNames","namedItem","found","fEditors","querySelectorAll","Array","from","elementMap","Object","entries","elementrules","ruleMap","ruleComparisons","hideDefine","action","compVal","isArray","instance"],"mappings":"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"}