{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains JS functionality required by mforms and is included automatically\n * when required.\n *\n * @module     core_form/form\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import * as FormChangeChecker from 'core_form/changechecker';\n// import * as FormEvents from 'core_form/events';\nimport {Rules} from 'core_form/form/rules';\nimport {disableElement, enableElement, hideElement, showElement} from 'core_form/form/dom';\n\nexport default class Form {\n    form = '';\n    dependencies = [];\n\n    /**\n     * Create a new form instance.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     */\n    constructor(formID, dependencies) {\n        // Set class properties.\n        this.form = document.querySelector(`#${formID}`);\n        this.dependencies = this.dependencyMapper(dependencies);\n        this.rules = new Rules();\n\n        // Handle mutations within the form.\n        this.registerEventListeners();\n    }\n\n    /**\n     * Add event listeners to the form.\n     */\n    registerEventListeners() {\n        this.form.addEventListener('change', (e) => {\n            if (e.target.type === 'submit') {\n                this.form.submit();\n            }\n            if (e.target.type === 'reset') {\n                this.form.reset();\n            }\n            // Something changes based on this element.\n            if (this.dependencies.has(e.target.name)) {\n                this.dependencyDispatcher(e.target, this.dependencies.get(e.target.name));\n            }\n        });\n    }\n\n    /**\n     * Dispatch the dependency rules to the appropriate rule handler.\n     *\n     * @param {HTMLFormElement} target The name associated to the element that has changed.\n     * @param {Map<String, Map>} dependants The map of rules that are associated to the element.\n     */\n    dependencyDispatcher(target, dependants) {\n        let elementsNames = {};\n        if (dependants.has('checked')) {\n            this.rules.checked(target.value, dependants.get('checked'));\n        }\n        if (dependants.has('notchecked')) {\n            this.rules.notChecked(target.value, dependants.get('notchecked'));\n        }\n        if (dependants.has('eq')) {\n            elementsNames = this.rules.eq(target.value, dependants.get('eq'));\n            this.domDispatch(elementsNames);\n        }\n        if (dependants.has('neq')) {\n            elementsNames = this.rules.neq(target.value, dependants.get('neq'));\n            this.domDispatch(elementsNames);\n        }\n        if (dependants.has('ne')) {\n            this.rules.ne(target.value, dependants.get('ne'));\n        }\n        if (dependants.has('gt')) {\n            this.rules.gt(target.value, dependants.get('gt'));\n        }\n        if (dependants.has('lt')) {\n            this.rules.lt(target.value, dependants.get('lt'));\n        }\n    }\n\n    /**\n     * Dispatch the DOM manipulation to the appropriate function.\n     *\n     * @param {Object<hide[String], show[String], lock[String], unlock[String]>} elementsNames What needs to change.\n     */\n    domDispatch(elementsNames) {\n        this.elementNamesToDomNodes(elementsNames.hide).forEach((element) => {\n            if (element === null) {\n                return;\n            }\n            hideElement(element);\n        });\n        this.elementNamesToDomNodes(elementsNames.lock).forEach((element) => {\n            if (element === null) {\n                return;\n            }\n            disableElement(element);\n        });\n        this.elementNamesToDomNodes(elementsNames.show).forEach((element) => {\n            if (element === null) {\n                return;\n            }\n            showElement(element);\n        });\n        this.elementNamesToDomNodes(elementsNames.unlock).forEach((element) => {\n            if (element === null) {\n                return;\n            }\n            enableElement(element);\n        });\n    }\n\n    /**\n     * Convert the element names into DOM nodes based on the element names.\n     *\n     * @param {Array<String>} elementNames The name of dependent elements to get associated DOM nodes.\n     * @returns {Array<HTMLFormElement>}\n     */\n    elementNamesToDomNodes(elementNames) {\n        return elementNames.map((element) => {\n            return this.form.elements.namedItem(element);\n        });\n    }\n\n    /**\n     * Convert the dependencies object into a map of elements and their associated rules.\n     *\n     * @example\n     * Note: This is a simplified example of the returned map showing the rules for the grade type element in assign.\n     *\n     *      \"grade[modgrade_type]\" => Map {\n     *          \"eq\" => Map {\n     *              \"none\" => Object {\n     *                  1 => Array [\n     *                      \"advancedgradingmethod_submissions\",\n     *                      \"gradecat\",\n     *                      \"gradepass\",\n     *                      \"completionusegrade\",\n     *                      \"completionusegrade\",\n     *                  ]\n     *              }\n     *          },\n     *          \"neq\" => Map {\n     *              \"point\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_point]\",\n     *                      \"grade[modgrade_rescalegrades]\"\n     *                  ]\n     *              },\n     *              \"scale\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_scale]\"\n     *                  ]\n     *              }\n     *          }\n     *      }\n     *\n     * Note: If the value of grade[modgrade_type] === \"none\" then the array of elements defined should be hidden.\n     * Note: If the value of grade[modgrade_type] !== \"point\" then the array of elements defined within the following:\n     * \"eq\" => \"none\" && \"neq\" => \"scale\" should be hidden.\n     *\n     * Note: The object within the \"rule\" map can contain either 0 or 1 this helps determine if the element should be:\n     *       hidden or locked if the rule is met.\n     * @See formslib.php DEP_DISABLE & DEP_HIDE.\n     *\n     * @param {Object} dependencies The supplied object of form dependencies to migrate into a map.\n     * @returns {Map<String, Map>} A map of elements and their associated rules.\n     */\n    dependencyMapper(dependencies) {\n        /**\n         * Convert the object into a first level map. i.e. elementName => ruleType.\n         *\n         * @type {Map<string, Map>} The map of rules associated to the given element.\n         * @example \"grade[modgrade_type]\" => Map<\"eq\", \"neq\">\n         */\n        const elementMap = new Map(Object.entries(dependencies));\n        elementMap.forEach((elementrules, key) => {\n            /**\n             * Convert the element rules object into a map.\n             *\n             * @type {Map<string, Map>} The map of rules associated to the given element.\n             * @example \"eq\" => Map<\"none\" => Object<Number, Array>>\n             * @example \"neq\" => Map<\"point\" => Object<Number, Array>, \"scale\" => Object<Number, Array>>\n             */\n            const ruleMap = new Map(Object.entries(elementrules));\n            ruleMap.forEach((ruleComparisons, key) => {\n                ruleMap.set(key, new Map(Object.entries(ruleComparisons)));\n            });\n            elementMap.set(key, ruleMap);\n        });\n        return elementMap;\n    }\n\n    /**\n     * Initialize the form and its dependencies.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     * @returns {Form} An instance associated to a specific form on an given page.\n     */\n    static init(formID, dependencies) {\n        return new Form(formID, dependencies);\n    }\n}\n"],"names":["Form","constructor","formID","dependencies","form","document","querySelector","this","dependencyMapper","rules","Rules","registerEventListeners","addEventListener","e","target","type","submit","reset","has","name","dependencyDispatcher","get","dependants","elementsNames","checked","value","notChecked","eq","domDispatch","neq","ne","gt","lt","elementNamesToDomNodes","hide","forEach","element","lock","show","unlock","elementNames","map","elements","namedItem","elementMap","Map","Object","entries","elementrules","key","ruleMap","ruleComparisons","set"],"mappings":"0WA6BqBA,KAUjBC,YAAYC,OAAQC,0CATb,wCACQ,SAUNC,KAAOC,SAASC,yBAAkBJ,cAClCC,aAAeI,KAAKC,iBAAiBL,mBACrCM,MAAQ,IAAIC,kBAGZC,yBAMTA,8BACSP,KAAKQ,iBAAiB,UAAWC,IACZ,WAAlBA,EAAEC,OAAOC,WACJX,KAAKY,SAEQ,UAAlBH,EAAEC,OAAOC,WACJX,KAAKa,QAGVV,KAAKJ,aAAae,IAAIL,EAAEC,OAAOK,YAC1BC,qBAAqBP,EAAEC,OAAQP,KAAKJ,aAAakB,IAAIR,EAAEC,OAAOK,UAW/EC,qBAAqBN,OAAQQ,gBACrBC,cAAgB,GAChBD,WAAWJ,IAAI,iBACVT,MAAMe,QAAQV,OAAOW,MAAOH,WAAWD,IAAI,YAEhDC,WAAWJ,IAAI,oBACVT,MAAMiB,WAAWZ,OAAOW,MAAOH,WAAWD,IAAI,eAEnDC,WAAWJ,IAAI,QACfK,cAAgBhB,KAAKE,MAAMkB,GAAGb,OAAOW,MAAOH,WAAWD,IAAI,YACtDO,YAAYL,gBAEjBD,WAAWJ,IAAI,SACfK,cAAgBhB,KAAKE,MAAMoB,IAAIf,OAAOW,MAAOH,WAAWD,IAAI,aACvDO,YAAYL,gBAEjBD,WAAWJ,IAAI,YACVT,MAAMqB,GAAGhB,OAAOW,MAAOH,WAAWD,IAAI,OAE3CC,WAAWJ,IAAI,YACVT,MAAMsB,GAAGjB,OAAOW,MAAOH,WAAWD,IAAI,OAE3CC,WAAWJ,IAAI,YACVT,MAAMuB,GAAGlB,OAAOW,MAAOH,WAAWD,IAAI,OASnDO,YAAYL,oBACHU,uBAAuBV,cAAcW,MAAMC,SAASC,UACrC,OAAZA,8BAGQA,iBAEXH,uBAAuBV,cAAcc,MAAMF,SAASC,UACrC,OAAZA,iCAGWA,iBAEdH,uBAAuBV,cAAce,MAAMH,SAASC,UACrC,OAAZA,8BAGQA,iBAEXH,uBAAuBV,cAAcgB,QAAQJ,SAASC,UACvC,OAAZA,gCAGUA,YAUtBH,uBAAuBO,qBACZA,aAAaC,KAAKL,SACd7B,KAAKH,KAAKsC,SAASC,UAAUP,WAgD5C5B,iBAAiBL,oBAOPyC,WAAa,IAAIC,IAAIC,OAAOC,QAAQ5C,sBAC1CyC,WAAWT,SAAQ,CAACa,aAAcC,aAQxBC,QAAU,IAAIL,IAAIC,OAAOC,QAAQC,eACvCE,QAAQf,SAAQ,CAACgB,gBAAiBF,OAC9BC,QAAQE,IAAIH,IAAK,IAAIJ,IAAIC,OAAOC,QAAQI,sBAE5CP,WAAWQ,IAAIH,IAAKC,YAEjBN,uBAUC1C,OAAQC,qBACT,IAAIH,KAAKE,OAAQC"}