{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This file contains JS functionality required by mforms and is included automatically\n * when required.\n *\n * @see /lib/formslib.php#L2548 Candidate for removal, depends on grouped rules.\n * @see /lib/amd/src/showhidesettings.js Candidate for removal.\n *\n * @module     core_form/form\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\n// Pure form functionality.\n// import {serialize} from './util';\nimport * as FormChangeChecker from './changechecker';\nimport * as Submit from './submit';\nimport Rules from './form/rules';\nimport * as MutateDom from './form/dom';\nimport Pending from 'core/pending';\n\n// Maybe not needed but noted just in case.\n// import * as CollapseSections from './collapsesections'; // This is included via ../collapsesections.mustache\n// import * as EncryptedPassword from './encryptedpassword'; // This is included via ../setting_encryptedpassword.mustache\n// import * as FileTypes from './filetypes'; // This is included via /lib/form/filetypes.php#L152\n// import * as PasswordUnmask from './passwordunmask'; // This is included via ../element-passwordunmask.mustache\n// import * as ShowAdvanced from './showadvanced'; // This is included via /lib/formslib.php#L3349\n\n// Custom element types, Likely not needed.\n// import * as ChoiceDropdown from 'core_form/choicedropdown'; // This is included via ../choicedropdown.mustache\n// import * as ConfigText_maxlength from 'core_form/configtext_maxlength'; // This is included via lib/adminlib.php#L2635\n// import * as DefaultCustom from 'core_form/defaultcustom'; // This is included via lib/form/defaultcustom.php#L253\n\nexport default class Form {\n    /**\n     * @var {HTMLFormElement} form Our very own form to work on.\n     */\n    form;\n\n    /**\n     * @var {Map} dependencies Our map of form dependencies.\n     */\n    dependencies;\n\n    editors = new Map();\n    /**\n     * Create a new form instance.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     */\n    constructor(formID, dependencies) {\n        // Set class properties.\n        this.form = document.querySelector(`#${formID}`);\n        this.dependencies = this.getDependencyMapper(dependencies);\n        this.isEditor();\n        this.rules = new Rules(this);\n\n        // Apply the initial state of the form.\n        this.applyInitialState();\n\n        // Handle mutations within the form.\n        this.registerEventListeners();\n        FormChangeChecker.watchForm(this.form);\n    }\n\n    /**\n     * Given the page has loaded, apply the initial state of the form.\n     */\n    applyInitialState() {\n        [...this.form.elements].forEach((element) => {\n            if (this.dependencies.has(element.name)) {\n                this.domDispatch(this.displayMapPrune(this.dispatchDependencyRules(element)));\n            }\n        });\n    }\n\n    /**\n     * Add event listeners to the form.\n     */\n    registerEventListeners() {\n        this.form.addEventListener('change', async(e) => {\n            if (e.target.type === 'submit') {\n                FormChangeChecker.resetFormDirtyState(this.form);\n                Submit.init(e.target.id);\n            }\n            if (e.target.type === 'reset') {\n                FormChangeChecker.resetFormDirtyState(this.form);\n                this.form.reset();\n            }\n            // Something changes based on this element.\n            if (this.dependencies.has(e.target.name)) {\n                FormChangeChecker.markFormChangedFromNode(e.target);\n                // Add a pending?\n                const pendingPromise = new Pending('core/form:update');\n                await this.domDispatch(this.displayMapPrune(this.dispatchDependencyRules(e.target)));\n                pendingPromise.resolve();\n            }\n        });\n    }\n\n    /**\n     * Dispatch the dependency rules to the appropriate rule handler.\n     *\n     * @param {HTMLFormElement} target The name associated to the element that has changed.\n     * @returns {Map<String, Array>} Actions to be taken along with elements that should be affected.\n     */\n    dispatchDependencyRules(target) {\n        const displayMap = this.mapTemplate();\n        this.dependencies.get(target.name).forEach((dependants, ruleName) => {\n            // If the rule exists, use it, otherwise fallback to 'neq' which seems to be the \"default\" rule originally.\n            const elNamesMap = this.rules[ruleName] ? this.rules[ruleName](target) : this.rules.neq(target);\n            // Merge the current rule map with the final display map.\n            elNamesMap.forEach((nodeNames, displayOption) => {\n                displayMap.get(displayOption).push(...nodeNames);\n            });\n        });\n        return displayMap;\n    }\n\n    /**\n     * By default, the full display map contains empty entries and potential duplicated DOM node names.\n     * Here we will get rid of any empty entries and review the locked array. If a node name exists in both\n     * the locked and hidden array, it should be removed from the locked array as nodes are locked / disabled when hidden.\n     *\n     * @param {Map<String, Array>} displayMap Map of elements and their associated rules to prune.\n     * @returns {Map<String, Array>|Map<>} The pruned map or map even a fully pruned map if noting has to change.\n     */\n    displayMapPrune(displayMap) {\n        // Filter any unlocked items that pegged to be hidden as they must be locked if they are hidden.\n        const removeunlockifhidden = displayMap.get('unlock').filter(x => {\n            return !displayMap.get('hide').toString().includes(x.toString());\n        });\n        displayMap.set('unlock', removeunlockifhidden);\n\n        // Remove any empty entries.\n        for (const [key, value] of displayMap) {\n            if (value.length === 0) {\n                displayMap.delete(key);\n            }\n        }\n        return displayMap;\n    }\n\n    /**\n     * For a given element, get the names of DOM nodes that can change based on the given rule type name.\n     *\n     * @param {String} element The name of the element to get the dependants for.\n     * @param {String} type The rule type to get the dependants for.\n     * @returns {Array<String>|[]}\n     */\n    getDependantsOfType(element, type) {\n        return this.dependencies.get(element) !== 'undefined' ? this.dependencies.get(element).get(type) ?? [] : [];\n    }\n\n    /**\n     * Dispatch the DOM manipulation to the appropriate function.\n     *\n     * @param {Map<String, Array>} elNamesMap What needs to change.\n     */\n    domDispatch(elNamesMap) {\n        window.console.log('elNamesMap', elNamesMap);\n        elNamesMap.forEach((elements, domUpdateOpt) => {\n            if (!MutateDom[domUpdateOpt]) {\n                return;\n            }\n            const nodes = this.elementNamesToDomNodes(elements);\n            nodes.forEach((node) => {\n                if (node === null) {\n                    return;\n                }\n                MutateDom[domUpdateOpt](node);\n            });\n        });\n    }\n\n    /**\n     * Convert the element names into DOM nodes based on the element names.\n     *\n     * @param {Array<Array>} elementNames The name of dependent elements to get associated DOM nodes.\n     * @returns {Array<HTMLFormElement|RadioNodeList>}\n     */\n    elementNamesToDomNodes(elementNames) {\n        return elementNames.map((element) => {\n            // TODO: Rename and document why we need to deep look if there are multiple nodes effected by the rule.\n            return element.map((element2) => {\n                if (this.isEditor(element2)) {\n                    return this.form.elements.namedItem(`${element2}[text]`);\n                }\n                return this.form.elements.namedItem(element2);\n            });\n        });\n    }\n\n    isEditor(elementName = '') {\n        if (this.editors.size === 0) {\n            const fEditors = this.form.querySelectorAll('[data-fieldtype=\"editor\"] textarea');\n            Array.from(fEditors).forEach((node) => {\n                this.editors.set(node.name, true);\n            });\n        }\n\n        return this.editors.get(`${elementName}[text]`) || false;\n    }\n\n    /**\n     * Convert the dependencies object into a map of elements and their associated rules.\n     *\n     * @example\n     * Note: This is a simplified example of the returned map showing the rules for the grade type element in assign.\n     *\n     *      \"grade[modgrade_type]\" => Map {\n     *          \"eq\" => Map {\n     *              \"none\" => Object {\n     *                  1 => Array [\n     *                      \"advancedgradingmethod_submissions\",\n     *                      \"gradecat\",\n     *                      \"gradepass\",\n     *                      \"completionusegrade\",\n     *                      \"completionusegrade\",\n     *                  ]\n     *              }\n     *          },\n     *          \"neq\" => Map {\n     *              \"point\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_point]\",\n     *                      \"grade[modgrade_rescalegrades]\"\n     *                  ]\n     *              },\n     *              \"scale\" => Object {\n     *                  1 => Array [\n     *                      \"grade[modgrade_scale]\"\n     *                  ]\n     *              }\n     *          }\n     *      }\n     *\n     * Note: If the value of grade[modgrade_type] === \"none\" then the array of elements defined should be hidden.\n     * Note: If the value of grade[modgrade_type] !== \"point\" then the array of elements defined within the following:\n     * \"eq\" => \"none\" && \"neq\" => \"scale\" should be hidden.\n     *\n     * Note: The object within the \"rule\" map can contain either 0 or 1 this helps determine if the element should be:\n     *       hidden or locked if the rule is met.\n     * @See /lib/formslib.php DEP_DISABLE & DEP_HIDE.\n     *\n     * @param {Object} dependencies The supplied object of form dependencies to migrate into a map.\n     * @returns {Map<String, Map>} A map of elements and their associated rules.\n     */\n    getDependencyMapper(dependencies) {\n        /**\n         * Convert the object into a first level map. i.e. elementName => ruleType.\n         *\n         * @type {Map<string, Map>} The map of rules associated to the given element.\n         * @example \"grade[modgrade_type]\" => Map<\"eq\", \"neq\">\n         */\n        const elementMap = new Map(Object.entries(dependencies));\n        elementMap.forEach((elementrules, key) => {\n            /**\n             * Convert the element rules object into a map.\n             *\n             * @type {Map<string, Map>} The map of rules associated to the given element.\n             * @example \"eq\" => Map<\"none\" => Object<Number, Array>>\n             * @example \"neq\" => Map<\"point\" => Object<Number, Array>, \"scale\" => Object<Number, Array>>\n             */\n            const ruleMap = new Map(Object.entries(elementrules));\n            ruleMap.forEach((ruleComparisons, key) => {\n                /**\n                 * Convert any disabledIf rules into objects, so we can manage them the same as hideIf items.\n                 *\n                 * @type {Map<string, Map>} The map of comparison values t.\n                 * @example \"none\" => \"none\" => Object<Number, Array>\n                 * @example \"neq\" => \"point\" => Object<Number, Array>\n                 */\n                const hideDefine = new Map(Object.entries(ruleComparisons));\n                hideDefine.forEach((action, compVal) => {\n                    if (Array.isArray(action)) {\n                        action = {...action};\n                    }\n                    hideDefine.set(compVal, action);\n                });\n                ruleMap.set(key, hideDefine);\n            });\n            elementMap.set(key, ruleMap);\n        });\n        return elementMap;\n    }\n\n    /**\n     * A standard map that we'll be using to figure out what has to change and how.\n     *\n     * @returns {Map<String, Array>}\n     */\n    mapTemplate() {\n        return new Map([\n            ['hide', []],\n            ['show', []],\n            ['lock', []],\n            ['unlock', []],\n        ]);\n    }\n\n    /**\n     * Initialize the form and its dependencies.\n     *\n     * @param {String} formID The ID of the form to be managed.\n     * @param {Object} dependencies The passed object of form dependencies.\n     * @returns {Form} An instance associated to a specific form on a given page.\n     */\n    static init(formID, dependencies) {\n        return new Form(formID, dependencies);\n    }\n}\n"],"names":["Form","constructor","formID","dependencies","Map","form","document","querySelector","this","getDependencyMapper","isEditor","rules","Rules","applyInitialState","registerEventListeners","FormChangeChecker","watchForm","elements","forEach","element","has","name","domDispatch","displayMapPrune","dispatchDependencyRules","addEventListener","async","e","target","type","resetFormDirtyState","Submit","init","id","reset","markFormChangedFromNode","pendingPromise","Pending","resolve","displayMap","mapTemplate","get","dependants","ruleName","neq","nodeNames","displayOption","push","removeunlockifhidden","filter","x","toString","includes","set","key","value","length","delete","getDependantsOfType","elNamesMap","window","console","log","domUpdateOpt","MutateDom","elementNamesToDomNodes","node","elementNames","map","element2","namedItem","elementName","editors","size","fEditors","querySelectorAll","Array","from","elementMap","Object","entries","elementrules","ruleMap","ruleComparisons","hideDefine","action","compVal","isArray"],"mappings":"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"}