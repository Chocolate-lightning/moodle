define("core_form/form",["exports","core_form/form/rules","core_form/form/dom"],(function(_exports,_rules,_dom){function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;class Form{constructor(formID,dependencies){_defineProperty(this,"form",""),_defineProperty(this,"dependencies",[]),this.form=document.querySelector("#".concat(formID)),this.dependencies=this.dependencyMapper(dependencies),this.rules=new _rules.Rules,this.registerEventListeners()}registerEventListeners(){this.form.addEventListener("change",(e=>{"submit"===e.target.type&&this.form.submit(),"reset"===e.target.type&&this.form.reset(),this.dependencies.has(e.target.name)&&this.dependencyDispatcher(e.target,this.dependencies.get(e.target.name))}))}dependencyDispatcher(target,dependants){let elementsNames={};dependants.has("checked")&&this.rules.checked(target.value,dependants.get("checked")),dependants.has("notchecked")&&this.rules.notChecked(target.value,dependants.get("notchecked")),dependants.has("eq")&&(elementsNames=this.rules.eq(target.value,dependants.get("eq")),this.domDispatch(elementsNames)),dependants.has("neq")&&(elementsNames=this.rules.neq(target.value,dependants.get("neq")),this.domDispatch(elementsNames)),dependants.has("ne")&&this.rules.ne(target.value,dependants.get("ne")),dependants.has("gt")&&this.rules.gt(target.value,dependants.get("gt")),dependants.has("lt")&&this.rules.lt(target.value,dependants.get("lt"))}domDispatch(elementsNames){this.elementNamesToDomNodes(elementsNames.hide).forEach((element=>{null!==element&&(0,_dom.hideElement)(element)})),this.elementNamesToDomNodes(elementsNames.lock).forEach((element=>{null!==element&&(0,_dom.disableElement)(element)})),this.elementNamesToDomNodes(elementsNames.show).forEach((element=>{null!==element&&(0,_dom.showElement)(element)})),this.elementNamesToDomNodes(elementsNames.unlock).forEach((element=>{null!==element&&(0,_dom.enableElement)(element)}))}elementNamesToDomNodes(elementNames){return elementNames.map((element=>this.form.elements.namedItem(element)))}dependencyMapper(dependencies){const elementMap=new Map(Object.entries(dependencies));return elementMap.forEach(((elementrules,key)=>{const ruleMap=new Map(Object.entries(elementrules));ruleMap.forEach(((ruleComparisons,key)=>{ruleMap.set(key,new Map(Object.entries(ruleComparisons)))})),elementMap.set(key,ruleMap)})),elementMap}static init(formID,dependencies){return new Form(formID,dependencies)}}return _exports.default=Form,_exports.default}));

//# sourceMappingURL=form.min.js.map