{"version":3,"file":"grader.min.js","sources":["../src/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all the different calls the gradable module will make.\n *\n * @module     mod_assign/grades/grader\n * @copyright  2024 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport * as Selectors from 'mod_assign/grader/selectors';\nimport * as Grader from 'core_grades/local/grader';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\n/**\n * Get the submissions for the user and cmid provided.\n *\n * @param {number} userid\n * @param {number} moduleid\n * @return {*|Promise}\n */\nconst getSubmissionByUserID = (userid, moduleid) => {\n    // TODO: This would need to be changed to use the file API & tinyMCE API to get the content.\n    const request = {\n        methodname: 'mod_assign_get_submission_status',\n        args: {\n            assignid: moduleid,\n            userid: userid,\n        },\n    };\n    return Ajax.call([request])[0];\n};\n\n/**\n * Curried function with module id set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} moduleid\n */\nconst getContentForUserIdFunction = (moduleid) => (userid) => {\n    return getSubmissionByUserID(userid, moduleid)\n        .then(context => {\n            window.console.log(context);\n            return Templates.render('mod_assign/grades/grader/submission', context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID, onlyActive) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID, onlyActive);\n\n    return context.users;\n};\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchSubmissionGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_assign',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n    const onlyActive = data.gradeOnlyActiveUsers;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID, onlyActive),\n        getContentForUserIdFunction(data.moduleId),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_assign',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeAssign)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchSubmissionGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeAssign)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"names":["getContentForUserIdFunction","moduleid","userid","request","methodname","args","assignid","Ajax","call","getSubmissionByUserID","then","context","window","console","log","Templates","render","catch","Notification","exception","getUsersForCmidFunction","cmid","groupID","onlyActive","async","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","document","addEventListener","e","target","matches","launch","rootNode","Error","gradableItems","wholeAssign","preventDefault","focusOnClose","data","dataset","gradingPanelFunctions","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","group","gradeOnlyActiveUsers","moduleId","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","id","courseId","sendStudentNotifications","launchSubmissionGrading","error","viewGrade","view","launchViewGrading"],"mappings":";;;;;;;qXAsDMA,4BAA+BC,UAAcC,QAjBrB,EAACA,OAAQD,kBAE7BE,QAAU,CACZC,WAAY,mCACZC,KAAM,CACFC,SAAUL,SACVC,OAAQA,gBAGTK,cAAKC,KAAK,CAACL,UAAU,IASrBM,CAAsBP,OAAQD,UAChCS,MAAKC,UACFC,OAAOC,QAAQC,IAAIH,SACZI,mBAAUC,OAAO,sCAAuCL,YAElEM,MAAMC,sBAAaC,WAYtBC,wBAA0B,CAACC,KAAMC,QAASC,aAAeC,gBACrCC,oBAAiBC,2BAA2BL,KAAMC,QAASC,aAElEI,MAGbC,iBAAmBC,MAAQA,KAAKC,QAAQC,UAAUC,+CA+EjB,KACnCC,SAASC,iBAAiB,SAASV,MAAAA,OAC3BW,EAAEC,OAAOC,QAAQN,UAAUO,QAAS,OAC9BC,SAAWX,iBAAiBO,EAAEC,YAE/BG,eACKC,MAAM,sCAGZD,SAASF,QAAQN,UAAUU,cAAcC,mBAYnCF,MAAM,wCATZL,EAAEQ,2BAlFcnB,eAAMe,cAAUK,aAC5CA,aAAe,6DACf,SACMC,KAAON,SAASO,QAChBC,4BAA8BC,OAAOC,yBACvC,aACAJ,KAAKK,UACLL,KAAKM,iBACLN,KAAKO,wBACLP,KAAKQ,kBAGH/B,QAAUuB,KAAKS,MAAQT,KAAKS,MAAQ,EACpC/B,WAAasB,KAAKU,2BAElBP,OAAOV,OACTlB,wBAAwByB,KAAKxB,KAAMC,QAASC,YAC5CvB,4BAA4B6C,KAAKW,UACjCT,sBAAsBU,OACtBV,sBAAsBW,OACtB,CACIC,QAASd,KAAKc,QACdC,cAAef,KAAKgB,cACpBC,WAAYjB,KAAKkB,KACjBC,WAAYnB,KAAKmB,WACjBC,WAAW,oBAAY,mBAAoB,CAACC,GAAIrB,KAAKsB,WACrDC,yBAA0BvB,KAAKuB,yBAC/BxB,aAAAA,eAyDcyB,CAAwB9B,SAAU,CACpCK,aAAcT,EAAEC,SAEtB,MAAOkC,6BACQnD,UAAUmD,WAM/BnC,EAAEC,OAAOC,QAAQN,UAAUwC,WAAY,CACvCpC,EAAEQ,uBACIJ,SAAWX,iBAAiBO,EAAEC,YAE/BG,eACKC,MAAM,sCAGZD,SAASF,QAAQN,UAAUU,cAAcC,mBAYnCF,MAAM,wCATZL,EAAEQ,2BAlEQnB,eAAMe,cAAUK,aACtCA,aAAe,6DACf,SACMC,KAAON,SAASO,QAChBC,4BAA8BC,OAAOC,yBACvC,aACAJ,KAAKK,UACLL,KAAKM,iBACLN,KAAKO,wBACLP,KAAKQ,wBAGHL,OAAOwB,KACTzB,sBAAsBU,OACtBZ,KAAK3C,OACL2C,KAAKkB,KACL,CACIJ,QAASd,KAAKc,QACdC,cAAef,KAAKgB,cACpBC,WAAYjB,KAAKkB,KACjBC,WAAYnB,KAAKmB,WACjBC,WAAW,oBAAY,mBAAoB,CAACC,GAAIrB,KAAKsB,WACrDC,yBAA0BvB,KAAKuB,yBAC/BxB,aAAAA,eA6Cc6B,CAAkBlC,SAAU,CAC9BK,aAAcT,EAAEC,SAEtB,MAAOkC,6BACQnD,UAAUmD"}