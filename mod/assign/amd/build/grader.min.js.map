{"version":3,"file":"grader.min.js","sources":["../src/grader.js"],"sourcesContent":["import * as Selectors from './grader/selectors';\nimport * as Grader from 'core_grades/local/grader';\nimport Repository from './grader/repo';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n */\nconst getContentForUserIdFunction = (cmid) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.foo(userid, cmid)\n        .then((context) => {\n            return Templates.render('gradereport_singleview/page_toggler', context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @param {Boolean} onlyActive Whether to fetch only the active enrolled users or all enrolled users in the course.\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID, onlyActive) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID, onlyActive);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_assign',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n    const onlyActive = data.gradeOnlyActiveUsers;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID, onlyActive),\n        getContentForUserIdFunction(data.cmid),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeAssign)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"names":["getContentForUserIdFunction","cmid","userid","Repository","foo","then","context","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","onlyActive","async","CourseRepository","getUsersFromCourseModuleID","users","document","addEventListener","e","target","matches","Selectors","launch","rootNode","closest","gradableItem","Error","gradableItems","wholeAssign","preventDefault","focusOnClose","data","dataset","gradingPanelFunctions","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","group","gradeOnlyActiveUsers","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","id","courseId","sendStudentNotifications","launchWholeForumGrading","error"],"mappings":"8nDAaMA,4BAA+BC,MAAUC,QAMpCC,cAAWC,IAAIF,OAAQD,MACzBI,MAAMC,SACIC,mBAAUC,OAAO,sCAAuCF,WAElEG,MAAMC,sBAAaC,WAYtBC,wBAA0B,CAACX,KAAMY,QAASC,aAAeC,gBACrCC,oBAAiBC,2BAA2BhB,KAAMY,QAASC,aAElEI,uCAgDoB,KACnCC,SAASC,iBAAiB,SAASL,MAAAA,OAC3BM,EAAEC,OAAOC,QAAQC,UAAUC,QAAS,OAC9BC,SAA4BL,EAAEC,OA/CVK,QAAQH,UAAUI,kBAiDvCF,eACKG,MAAM,sCAGZH,SAASH,QAAQC,UAAUM,cAAcC,mBAYnCF,MAAM,wCATZR,EAAEW,2BA/CcjB,eAAMW,cAAUO,aAC5CA,aAAe,6DACf,SACMC,KAAOR,SAASS,QAChBC,4BAA8BC,OAAOC,yBACvC,aACAJ,KAAKK,UACLL,KAAKM,iBACLN,KAAKO,wBACLP,KAAKQ,kBAGH7B,QAAUqB,KAAKS,MAAQT,KAAKS,MAAQ,EACpC7B,WAAaoB,KAAKU,2BAElBP,OAAOZ,OACTb,wBAAwBsB,KAAKjC,KAAMY,QAASC,YAC5Cd,4BAA4BkC,KAAKjC,MACjCmC,sBAAsBS,OACtBT,sBAAsBU,OACtB,CACIC,QAASb,KAAKa,QACdC,cAAed,KAAKe,cACpBC,WAAYhB,KAAKiB,KACjBC,WAAYlB,KAAKkB,WACjBC,WAAW,oBAAY,mBAAoB,CAACC,GAAIpB,KAAKqB,WACrDC,yBAA0BtB,KAAKsB,yBAC/BvB,aAAAA,eAsBcwB,CAAwB/B,SAAU,CACpCO,aAAcZ,EAAEC,SAEtB,MAAOoC,6BACQ/C,UAAU+C"}