{"version":3,"file":"drag_reorder.min.js","sources":["../src/drag_reorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Generic library to allow things in a vertical list to be re-ordered using drag and drop.\n *\n * To make a set of things draggable, create a new instance of this object passing the\n * necessary config, as explained in the comment on the constructor.\n *\n * @package   qtype_ordering\n * @copyright 2018 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n'use strict';\n\nimport $ from 'jquery';\nimport drag from 'core/dragdrop';\nimport keys from 'core/key_codes';\n\nexport default class DragReorder {\n\n    config = {reorderStart: 'undefined', reorderEnd: 'undefined'}; // Config object with some basic definitions.\n    dragStart = null; // Information about when and where the drag started.\n    originalOrder = null; // Array of ids.\n    itemDragging = null; // Item being moved by dragging (jQuery object).\n    itemMoving = null; // Item being moved using the accessible modal (jQuery object).\n    orderList = null; // Order list (jQuery object).\n    proxy = null; // Drag proxy (jQuery object).\n\n    /**\n     * Constructor.\n     *\n     * To make a list draggable, create a new instance of this object, passing the necessary config.\n     * For example:\n     * {\n     *      // Selector for the list (or lists) to be reordered.\n     *      list: 'ul.my-list',\n     *\n     *      // Selector, relative to the list selector, for the items that can be moved.\n     *      item: '> li',\n     *\n     *      // The user actually drags a proxy object, which is constructed from this string,\n     *      // and then added directly as a child of <body>. The token %%ITEM_HTML%% is\n     *      // replaced with the innerHtml of the item being dragged. The token %%ITEM_CLASS_NAME%%\n     *      // is replaced with the class attribute of the item being dragged. Because of this,\n     *      // the styling of the contents of your list item needs to work for the proxy, as well as\n     *      // for items in place in the context of the list. Your CSS also needs to ensure\n     *      // that this proxy has position: absolute. You probably want other styles, like a\n     *      // drop shadow. Using class osep-itemmoving might be all you need to do.\n     *      proxyHtml: '<div class=\"osep-itemmoving %%ITEM_CLASS_NAME%%\">%%ITEM_HTML%%</div>,\n     *\n     *      // While the proxy is being dragged, this class is added to the item being moved.\n     *      // You can probably use \"osep-itemmoving\" here.\n     *      itemMovingClass: \"osep-itemmoving\",\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns the string that uniquely identifies each item.\n     *      // Therefore, the result of the drag action will be represented by the array\n     *      // obtained by calling this method on each item in the list in order.\n     *      idGetter: function(item) { return $(node).data('id'); },\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns a string that is the name of the item.\n     *      nameGetter: function(item) { return $(node).text(); },\n     *\n     *      // Function that will be called when a re-order starts (optional, can be not set).\n     *      // Useful if you need to save information about the initial state.\n     *      // This function should have two parameters. The first will be a\n     *      // jQuery object for the list that was reordered, the second will\n     *      // be the jQuery object for the item moved - which will not yet have been moved.\n     *      // Note, it is quite possible for reorderStart to be called with no\n     *      // subsequent call to reorderDone.\n     *      reorderStart: function($list, $item) { ... }\n     *\n     *      // Function that will be called when a drag has finished, and the list\n     *      // has been reordered. This function should have three parameters. The first will be\n     *      // a jQuery object for the list that was reordered, the second will be the jQuery\n     *      // object for the item moved, and the third will be the new order, which is\n     *      // an array of ids obtained by calling idGetter on each item in the list in order.\n     *      // This callback will only be called in the new order is actually different from the old order.\n     *      reorderDone: function($list, $item, newOrder) { ... }\n     *\n     *      // Function that is always called when a re-order ends (optional, can be not set)\n     *      // whether the order has changed. Useful if you need to undo changes made\n     *      // in reorderStart, since reorderDone is only called if the new order is different\n     *      // from the original order.\n     *      reorderEnd: function($list, $item) { ... }\n     *  }\n     *\n     * There is a subtlety, If you have items in your list that do not have a drag handle,\n     * they are considered to be placeholders in otherwise empty containers.\n     *\n     * @param {Object} config As above.\n     */\n    constructor(config) {\n\n        this.config = config;\n\n        this.config.itemInPage = this.combineSelectors(config.list, config.item);\n\n        // AJAX for section drag and click-to-move.\n        $(this.config.list).on('mousedown touchstart', config.item, e => {\n            const details = drag.prepare(e);\n            if (details.start) {\n                this.startDrag(e, details);\n            }\n        });\n\n        $(this.config.list).on('keydown', config.item, e => {\n            this.itemMoving = $(e.currentTarget).closest(config.itemInPage);\n            this.originalOrder = this.getCurrentOrder();\n            this.itemMovedByKeyboard(e, this.itemMoving);\n            const newOrder = this.getCurrentOrder();\n            if (!this.arrayEquals(this.originalOrder, newOrder)) {\n                // Order has changed, call the callback.\n                this.config.reorderDone(this.itemMoving.closest(this.config.list), this.itemMoving, newOrder);\n            }\n        });\n\n        // Make the items tabbable.\n        $(this.config.itemInPage).attr('tabindex', '0');\n    }\n\n    /**\n     * Start dragging.\n     *\n     * @param {jQuery} e The jQuery event which is either mousedown or touchstart.\n     * @param {Object} details Object with start (boolean flag) and x, y (only if flag true) values\n     */\n    startDrag(e, details) {\n        this.orderList = $(this.config.list);\n\n        this.dragStart = {\n            time: new Date().getTime(),\n            x: details.x,\n            y: details.y\n        };\n\n        this.itemDragging = $(e.currentTarget).closest(this.config.itemInPage);\n\n        if (typeof this.config.reorderStart !== 'undefined') {\n            this.config.reorderStart(this.itemDragging.closest(this.config.list), this.itemDragging);\n        }\n\n        this.originalOrder = this.getCurrentOrder();\n        this.proxy = $(this.config.proxyHtml.replace('%%ITEM_HTML%%', this.itemDragging.html())\n            .replace('%%ITEM_CLASS_NAME%%', this.itemDragging.attr('class'))\n            .replace('%%LIST_CLASS_NAME%%', this.orderList.attr('class')));\n\n        $(document.body).append(this.proxy);\n        this.proxy.css('position', 'absolute');\n        this.proxy.css(this.itemDragging.offset());\n        this.proxy.width(this.itemDragging.outerWidth());\n        this.proxy.height(this.itemDragging.outerHeight());\n        this.itemDragging.addClass(this.config.itemMovingClass);\n        this.updateProxy();\n\n        // Start drag.\n        drag.start(e, this.proxy, this.dragMove.bind(this), this.dragEnd.bind(this));\n    }\n\n    /**\n     * Move the proxy to the current mouse position.\n     */\n    dragMove() {\n        const list = this.itemDragging.closest(this.config.list);\n        let closestItem = null;\n        let closestDistance = null;\n        list.find(this.config.item).each((index, element) => {\n            const distance = this.distanceBetweenElements(element, this.proxy);\n            if (closestItem === null || distance < closestDistance) {\n                closestItem = $(element);\n                closestDistance = distance;\n            }\n        });\n\n        if (closestItem[0] === this.itemDragging[0]) {\n            return;\n        }\n\n        // Set offset depending on if item is being dragged downwards/upwards.\n        const offsetValue = this.midY(this.proxy) < this.midY(closestItem) ? 20 : -20;\n        if (this.midY(this.proxy) + offsetValue < this.midY(closestItem)) {\n            this.itemDragging.insertBefore(closestItem);\n        } else {\n            this.itemDragging.insertAfter(closestItem);\n        }\n        this.updateProxy();\n    }\n\n    /**\n     * Update proxy's position.\n     */\n    updateProxy() {\n        const list = this.itemDragging.closest('ol, ul');\n        const items = list.find('li');\n        const count = items.length;\n        for (let i = 0; i < count; ++i) {\n            if (this.itemDragging[0] === items[i]) {\n                this.proxy.find('li').attr('value', i + 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Our outer and inner are two CSS selectors, which may contain commas.\n     * We want to combine them safely. So for instance combineSelectors('a, b', 'c, d')\n     * gives 'a c, a d, b c, b d'.\n     *\n     * @param {String} outer The selector for the outer element.\n     * @param {String} inner The selector for the inner element.\n     * @returns {String} The combined selector used to listen to the list item.\n     */\n    combineSelectors(outer, inner) {\n        let combined = [];\n        outer.split(',').forEach(firstSelector => {\n            inner.split(',').forEach(secondSelector => {\n                combined.push(firstSelector.trim() + ' ' + secondSelector.trim());\n            });\n        });\n        return combined.join(', ');\n    }\n\n    /**\n     * End dragging.\n     *\n     * @param {number} x X co-ordinate\n     * @param {number} y Y co-ordinate\n     */\n    dragEnd(x, y) {\n        if (typeof this.config.reorderEnd !== 'undefined') {\n            this.config.reorderEnd(this.itemDragging.closest(this.config.list), this.itemDragging);\n        }\n\n        const newOrder = this.getCurrentOrder();\n        if (!this.arrayEquals(this.originalOrder, newOrder)) {\n            // Order has changed, call the callback.\n            this.config.reorderDone(this.itemDragging.closest(this.config.list), this.itemDragging, newOrder);\n\n        } else if (new Date().getTime() - this.dragStart.time < 500 &&\n            Math.abs(this.dragStart.x - x) < 10 && Math.abs(this.dragStart.y - y) < 10) {\n            // This was really a click. Set the focus on the current item.\n            this.itemDragging[0].focus();\n        }\n        this.proxy.remove();\n        this.proxy = null;\n        this.itemDragging.removeClass(this.config.itemMovingClass);\n        this.itemDragging = null;\n        this.dragStart = null;\n    }\n\n    /**\n     * Items can be moved and placed using certain keys.\n     * Tab for tabbing though and choose the item to be moved\n     * space, arrow-right arrow-down for moving current element forwards.\n     * arrow-right arrow-down for moving the current element backwards.\n     *\n     * @param {Event} e The keyboard event.\n     * @param {jQuery} current An object representing the current moving item and the previous item we just moved past.\n     */\n    itemMovedByKeyboard(e, current) {\n        switch (e.keyCode) {\n            case keys.space:\n            case keys.arrowRight:\n            case keys.arrowDown:\n                e.preventDefault();\n                e.stopPropagation();\n                if (current.next().length) {\n                    current.next().insertBefore(current);\n                }\n                break;\n\n            case keys.arrowLeft:\n            case keys.arrowUp:\n                e.preventDefault();\n                e.stopPropagation();\n                if (current.prev().length) {\n                    current.prev().insertAfter(current);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Get the x-position of the middle of the DOM node represented by the given jQuery object.\n     *\n     * @param {jQuery} node jQuery wrapping a DOM node.\n     * @returns {number} Number the x-coordinate of the middle (left plus half outerWidth).\n     */\n    midX(node) {\n        return node.offset().left + node.outerWidth() / 2;\n    }\n\n    /**\n     * Get the y-position of the middle of the DOM node represented by the given jQuery object.\n     *\n     * @param {jQuery} node jQuery wrapped DOM node.\n     * @returns {number} Number the y-coordinate of the middle (top plus half outerHeight).\n     */\n    midY(node) {\n        return node.offset().top + node.outerHeight() / 2;\n    }\n\n    /**\n     * Calculate the distance between the centres of two elements.\n     *\n     * @param {HTMLLIElement} element1 DOM node of a list item.\n     * @param {HTMLLIElement} element2 DOM node of a list item.\n     * @return {number} number the distance in pixels.\n     */\n    distanceBetweenElements(element1, element2) {\n        const [e1, e2] = [$(element1), $(element2)];\n        const [dx, dy] = [this.midX(e1) - this.midX(e2), this.midY(e1) - this.midY(e2)];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Get the current order of the list containing itemDragging.\n     *\n     * @returns {Array} Array of strings, the id of each element in order.\n     */\n    getCurrentOrder() {\n        return (this.itemDragging || this.itemMoving).closest(this.config.list).find(this.config.item).map(\n            (index, item) => {\n                return this.config.idGetter(item);\n            }).get();\n    }\n\n    /**\n     * Compare two arrays which contain primitive types to see if they are equal.\n     * @param {Array} a1 first array.\n     * @param {Array} a2 second array.\n     * @return {Boolean} boolean true if they both contain the same elements in the same order, else false.\n     */\n    arrayEquals(a1, a2) {\n        return a1.length === a2.length &&\n            a1.every((v, i) => {\n                return v === a2[i];\n            });\n    }\n\n    /**\n     * Initialise one ordering question.\n     *\n     * @param {String} sortableid id of ul for this question.\n     * @param {String} responseid id of hidden field for this question.\n     */\n    static init(sortableid, responseid) {\n        new DragReorder({\n            list: 'ul#' + sortableid,\n            item: 'li.sortableitem',\n            proxyHtml: '<div class=\"que ordering dragproxy\">' +\n                '<ul class=\"%%LIST_CLASS_NAME%%\"><li class=\"%%ITEM_CLASS_NAME%% item-moving\">' +\n                '%%ITEM_HTML%%</li></ul></div>',\n            itemMovingClass: \"current-drop\",\n            idGetter: item => {\n                return $(item).attr('id');\n            },\n            nameGetter: item => {\n                return $(item).text;\n            },\n            reorderDone: (list, item, newOrder) => {\n                $('input#' + responseid)[0].value = newOrder.join(',');\n            }\n        });\n    }\n}\n"],"names":["DragReorder","constructor","config","reorderStart","reorderEnd","itemInPage","this","combineSelectors","list","item","on","e","details","drag","prepare","start","startDrag","itemMoving","currentTarget","closest","originalOrder","getCurrentOrder","itemMovedByKeyboard","newOrder","arrayEquals","reorderDone","attr","orderList","dragStart","time","Date","getTime","x","y","itemDragging","proxy","proxyHtml","replace","html","document","body","append","css","offset","width","outerWidth","height","outerHeight","addClass","itemMovingClass","updateProxy","dragMove","bind","dragEnd","closestItem","closestDistance","find","each","index","element","distance","distanceBetweenElements","offsetValue","midY","insertBefore","insertAfter","items","count","length","i","outer","inner","combined","split","forEach","firstSelector","secondSelector","push","trim","join","Math","abs","focus","remove","removeClass","current","keyCode","keys","space","arrowRight","arrowDown","preventDefault","stopPropagation","next","arrowLeft","arrowUp","prev","midX","node","left","top","element1","element2","e1","e2","dx","dy","sqrt","map","idGetter","get","a1","a2","every","v","sortableid","responseid","nameGetter","text","value"],"mappings":"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"}