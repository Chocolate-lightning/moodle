{"version":3,"file":"drag_reorder.min.js","sources":["../src/drag_reorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Generic library to allow things in a vertical list to be re-ordered using drag and drop.\n *\n * To make a set of things draggable, create a new instance of this object passing the\n * necessary config, as explained in the comment on the constructor.\n *\n * @package   qtype_ordering\n * @copyright 2018 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n'use strict';\n\nimport $ from 'jquery';\nimport drag from 'core/dragdrop';\nimport keys from 'core/key_codes';\n\nexport default class DragReorder {\n\n    config = null; // Config object.\n    dragStart = null; // Information about when and where the drag started.\n    originalOrder = null; // Array of ids.\n    itemDragging = null; // Item being moved by dragging (jQuery object).\n    itemMoving = null; // Item being moved using the accessible modal (jQuery object).\n    orderList = null; // Order list (jQuery object).\n    proxy = null; // Drag proxy (jQuery object).\n\n    /**\n     * Constructor.\n     *\n     * To make a list draggable, create a new instance of this object, passing the necessary config.\n     * For example:\n     * {\n     *      // Selector for the list (or lists) to be reordered.\n     *      list: 'ul.my-list',\n     *\n     *      // Selector, relative to the list selector, for the items that can be moved.\n     *      item: '> li',\n     *\n     *      // The user actually drags a proxy object, which is constructed from this string,\n     *      // and then added directly as a child of <body>. The token %%ITEM_HTML%% is\n     *      // replaced with the innerHtml of the item being dragged. The token %%ITEM_CLASS_NAME%%\n     *      // is replaced with the class attribute of the item being dragged. Because of this,\n     *      // the styling of the contents of your list item needs to work for the proxy, as well as\n     *      // for items in place in the context of the list. Your CSS also needs to ensure\n     *      // that this proxy has position: absolute. You probably want other styles, like a\n     *      // drop shadow. Using class osep-itemmoving might be all you need to do.\n     *      proxyHtml: '<div class=\"osep-itemmoving %%ITEM_CLASS_NAME%%\">%%ITEM_HTML%%</div>,\n     *\n     *      // While the proxy is being dragged, this class is added to the item being moved.\n     *      // You can probably use \"osep-itemmoving\" here.\n     *      itemMovingClass: \"osep-itemmoving\",\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns the string that uniquely identifies each item.\n     *      // Therefore, the result of the drag action will be represented by the array\n     *      // obtained by calling this method on each item in the list in order.\n     *      idGetter: function(item) { return $(node).data('id'); },\n     *\n     *      // This is a callback which, when called with the DOM node for an item,\n     *      // returns a string that is the name of the item.\n     *      nameGetter: function(item) { return $(node).text(); },\n     *\n     *      // Function that will be called when a re-order starts (optional, can be not set).\n     *      // Useful if you need to save information about the initial state.\n     *      // This function should have two parameters. The first will be a\n     *      // jQuery object for the list that was reordered, the second will\n     *      // be the jQuery object for the item moved - which will not yet have been moved.\n     *      // Note, it is quite possible for reorderStart to be called with no\n     *      // subsequent call to reorderDone.\n     *      reorderStart: function($list, $item) { ... }\n     *\n     *      // Function that will be called when a drag has finished, and the list\n     *      // has been reordered. This function should have three parameters. The first will be\n     *      // a jQuery object for the list that was reordered, the second will be the jQuery\n     *      // object for the item moved, and the third will be the new order, which is\n     *      // an array of ids obtained by calling idGetter on each item in the list in order.\n     *      // This callback will only be called in the new order is actually different from the old order.\n     *      reorderDone: function($list, $item, newOrder) { ... }\n     *\n     *      // Function that is alwasy called when a re-order ends (optional, can be not set)\n     *      // whether or not the order has changed. Useful if you need to undo changes made\n     *      // in reorderStart, since reorderDone is only called if the new order is different\n     *      // from the original order.\n     *      reorderEnd: function($list, $item) { ... }\n     *  }\n     *\n     * There is a subtlety ( === hack?) that you can use. If you have items in your list that do not\n     * have a drag handle, they they are considered to be placeholders in otherwise empty containers.\n     * See how block_userlinks does it, if this seems like it might be useful. nameGetter should return\n     * the container name for these items.\n     *\n     * @param {Object} config As above.\n     */\n    constructor(config) {\n\n        this.config = config;\n\n        this.config.itemInPage = this.combineSelectors(config.list, config.item);\n\n        // AJAX for section drag and click-to-move.\n        $(this.config.list).on('mousedown touchstart', config.item, function(event) {\n            var details = drag.prepare(event);\n            if (details.start) {\n                this.startDrag(event, details);\n            }\n        }.bind(this));\n\n        $(this.config.list).on('keydown', config.item, function(event) {\n            this.itemMoving = $(event.currentTarget).closest(config.itemInPage);\n            this.originalOrder = this.getCurrentOrder();\n            this.itemMovedByKeyboard(event, this.itemMoving);\n            var newOrder = this.getCurrentOrder();\n            if (!this.arrayEquals(this.originalOrder, newOrder)) {\n                // Order has changed, call the callback.\n                this.config.reorderDone(this.itemMoving.closest(this.config.list), this.itemMoving, newOrder);\n            }\n        }.bind(this));\n\n        // Make the items tabbable.\n        $(this.config.itemInPage).attr('tabindex', '0');\n    }\n\n    startDrag(event, details) {\n        this.orderList = $(this.config.list);\n\n        this.dragStart = {\n            time: new Date().getTime(),\n            x: details.x,\n            y: details.y\n        };\n\n        this.itemDragging = $(event.currentTarget).closest(this.config.itemInPage);\n\n        if (typeof this.config.reorderStart !== 'undefined') {\n            this.config.reorderStart(this.itemDragging.closest(this.config.list), this.itemDragging);\n        }\n\n        this.originalOrder = this.getCurrentOrder();\n        this.proxy = $(this.config.proxyHtml.replace('%%ITEM_HTML%%', this.itemDragging.html())\n            .replace('%%ITEM_CLASS_NAME%%', this.itemDragging.attr('class'))\n            .replace('%%LIST_CLASS_NAME%%', this.orderList.attr('class')));\n\n        $(document.body).append(this.proxy);\n        this.proxy.css('position', 'absolute');\n        this.proxy.css(this.itemDragging.offset());\n        this.proxy.width(this.itemDragging.outerWidth());\n        this.proxy.height(this.itemDragging.outerHeight());\n        this.itemDragging.addClass(this.config.itemMovingClass);\n        this.updateProxy();\n\n        // Start drag.\n        drag.start(event, this.proxy, this.dragMove.bind(this), this.dragEnd.bind(this));\n    }\n\n    dragMove() {\n        var list = this.itemDragging.closest(this.config.list);\n        var closestItem = null;\n        var closestDistance = null;\n        list.find(this.config.item).each(function(index, element) {\n            var distance = this.distanceBetweenElements(element, this.proxy);\n            if (closestItem === null || distance < closestDistance) {\n                closestItem = $(element);\n                closestDistance = distance;\n            }\n        }.bind(this));\n\n        if (closestItem[0] === this.itemDragging[0]) {\n            return;\n        }\n        var offsetValue = 0;\n        // Set offset depending on if item is being dragged downwards/upwards.\n        if (this.midY(this.proxy) < this.midY(closestItem)) {\n            offsetValue = 20;\n            window.console.log(\"For midY(proxy) < midY(closestItem) offset is: \" + offsetValue);\n        } else {\n            offsetValue = -20;\n            window.console.log(\"For midY(proxy) < midY(closestItem) offset is: \" + offsetValue);\n        }\n        if (this.midY(this.proxy) + offsetValue < this.midY(closestItem)) {\n            this.itemDragging.insertBefore(closestItem);\n        } else {\n            this.itemDragging.insertAfter(closestItem);\n        }\n        this.updateProxy();\n    }\n\n    /**\n     * Update proxy's position.\n     */\n    updateProxy() {\n        var list = this.itemDragging.closest('ol, ul');\n        var items = list.find('li');\n        var count = items.length;\n        for (var i = 0; i < count; ++i) {\n            if (this.itemDragging[0] === items[i]) {\n                this.proxy.find('li').attr('value', i + 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * It outer and inner are two CSS selectors, which may contain commas,\n     * then combine them safely. So combineSelectors('a, b', 'c, d')\n     * gives 'a c, a d, b c, b d'.\n     * @param {Selector} outer\n     * @param {Selector} inner\n     * @returns {string}\n     */\n    combineSelectors(outer, inner) {\n        var combined = [];\n        outer.split(',').forEach(function(firstSelector) {\n            inner.split(',').forEach(function(secondSelector) {\n                combined.push(firstSelector.trim() + ' ' + secondSelector.trim());\n            });\n        });\n        return combined.join(', ');\n    }\n\n    dragEnd(x, y) {\n        if (typeof this.config.reorderEnd !== 'undefined') {\n            this.config.reorderEnd(this.itemDragging.closest(this.config.list), this.itemDragging);\n        }\n\n        var newOrder = this.getCurrentOrder();\n        if (!this.arrayEquals(this.originalOrder, newOrder)) {\n            // Order has changed, call the callback.\n            this.config.reorderDone(this.itemDragging.closest(this.config.list), this.itemDragging, newOrder);\n\n        } else if (new Date().getTime() - this.dragStart.time < 500 &&\n            Math.abs(this.dragStart.x - x) < 10 && Math.abs(this.dragStart.y - y) < 10) {\n            // This was really a click. Set the focus on the current item.\n            this.itemDragging[0].focus();\n        }\n        this.proxy.remove();\n        this.proxy = null;\n        this.itemDragging.removeClass(this.config.itemMovingClass);\n        this.itemDragging = null;\n        this.dragStart = null;\n    }\n\n    /**\n     * Items can be moved and placed using certain keys.\n     * Tab for tabbing though and choose the item to be moved\n     * space, arrow-right arrow-down for moving current element forewards.\n     * arrow-right arrow-down for moving the current element backwards.\n     * @param {Object} e the event\n     * @param {jQuery} current the current moving item\n     */\n    itemMovedByKeyboard(e, current) {\n        switch (e.keyCode) {\n            case keys.space:\n            case keys.arrowRight:\n            case keys.arrowDown:\n                e.preventDefault();\n                e.stopPropagation();\n                var next = current.next();\n                if (next.length) {\n                    next.insertBefore(current);\n                }\n                break;\n\n            case keys.arrowLeft:\n            case keys.arrowUp:\n                e.preventDefault();\n                e.stopPropagation();\n                var prev = current.prev();\n                if (prev.length) {\n                    prev.insertAfter(current);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Get the x-position of the middle of the DOM node represented by the given jQuery object.\n     * @param {jQuery} jQuery wrapping a DOM node.\n     * @returns {number} Number the x-coordinate of the middle (left plus half outerWidth).\n     */\n    midX(jQuery) {\n        return jQuery.offset().left + jQuery.outerWidth() / 2;\n    }\n\n    /**\n     * Get the y-position of the middle of the DOM node represented by the given jQuery object.\n     * @param {jQuery} jQuery wrapping a DOM node.\n     * @returns {number} Number the y-coordinate of the middle (top plus half outerHeight).\n     */\n    midY(jQuery) {\n        return jQuery.offset().top + jQuery.outerHeight() / 2;\n    }\n\n    /**\n     * Calculate the distance between the centres of two elements.\n     * @param {Selector|Element|jQuery} element1 selector, element or jQuery.\n     * @param {Selector|Element|jQuery} element2 selector, element or jQuery.\n     * @return {number} number the distance in pixels.\n     */\n    distanceBetweenElements(element1, element2) {\n        var e1 = $(element1);\n        var e2 = $(element2);\n        var dx = this.midX(e1) - this.midX(e2);\n        var dy = this.midY(e1) - this.midY(e2);\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Get the current order of the list containing itemDragging.\n     * @returns {Array} Array of strings, the id of each element in order.\n     */\n    getCurrentOrder() {\n        return (this.itemDragging || this.itemMoving).closest(this.config.list).find(this.config.item).map(\n            function(index, item) {\n                return this.config.idGetter(item);\n            }.bind(this)).get();\n    }\n\n    /**\n     * Compare two arrays, which just contain simple values like ints or strings,\n     * to see if they are equal.\n     * @param {Array} a1 first array.\n     * @param {Array} a2 second array.\n     * @return {Boolean} boolean true if they both contain the same elements in the same order, else false.\n     */\n    arrayEquals(a1, a2) {\n        return a1.length === a2.length &&\n            a1.every(function(v, i) {\n                return v === a2[i];\n            });\n    }\n\n    /**\n     * Initialise one ordering question.\n     *\n     * @param {String} sortableid id of ul for this question.\n     * @param {String} responseid id of hidden field for this question.\n     */\n    static init(sortableid, responseid) {\n        new DragReorder({\n            list: 'ul#' + sortableid,\n            item: 'li.sortableitem',\n            proxyHtml: '<div class=\"que ordering dragproxy\">' +\n                '<ul class=\"%%LIST_CLASS_NAME%%\"><li class=\"%%ITEM_CLASS_NAME%% item-moving\">' +\n                '%%ITEM_HTML%%</li></ul></div>',\n            itemMovingClass: \"current-drop\",\n            idGetter: function(item) {\n                return $(item).attr('id');\n            },\n            nameGetter: function(item) {\n                return $(item).text;\n            },\n            reorderDone: function(list, item, newOrder) {\n                $('input#' + responseid)[0].value = newOrder.join(',');\n            }\n        });\n    }\n}\n"],"names":["DragReorder","constructor","config","itemInPage","this","combineSelectors","list","item","on","event","details","drag","prepare","start","startDrag","bind","itemMoving","currentTarget","closest","originalOrder","getCurrentOrder","itemMovedByKeyboard","newOrder","arrayEquals","reorderDone","attr","orderList","dragStart","time","Date","getTime","x","y","itemDragging","reorderStart","proxy","proxyHtml","replace","html","document","body","append","css","offset","width","outerWidth","height","outerHeight","addClass","itemMovingClass","updateProxy","dragMove","dragEnd","closestItem","closestDistance","find","each","index","element","distance","distanceBetweenElements","offsetValue","midY","window","console","log","insertBefore","insertAfter","items","count","length","i","outer","inner","combined","split","forEach","firstSelector","secondSelector","push","trim","join","reorderEnd","Math","abs","focus","remove","removeClass","e","current","keyCode","keys","space","arrowRight","arrowDown","preventDefault","stopPropagation","next","arrowLeft","arrowUp","prev","midX","jQuery","left","top","element1","element2","e1","e2","dx","dy","sqrt","map","idGetter","get","a1","a2","every","v","sortableid","responseid","nameGetter","text","value"],"mappings":"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"}