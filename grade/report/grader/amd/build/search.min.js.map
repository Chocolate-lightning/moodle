{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for learners within the grader report.\n * Have to basically search twice on the dataset to avoid passing around massive csv params whilst allowing debouncing.\n *\n * @module    gradereport_grader/search\n * @copyright 2022 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport {enter, arrowUp, arrowDown, home, end, space, escape, tab} from 'core/key_codes';\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport * as Repository from 'gradereport_grader/search/repository';\nimport {get_strings as getStrings} from 'core/str';\nimport Url from 'core/url';\nimport {moveToFirstNode, moveToLastNode, moveToNode} from 'gradereport_grader/search/node_handling';\n\n/**\n * Whether the event listener has already been registered for this module.\n *\n * @type {boolean}\n */\nlet registered = false;\n\n/**\n * A Map of the strings we may require for the user matching fields.\n *\n * @type {?Map}\n */\nlet profilestringmap = null;\n\n/**\n * A string array of profile fields we do not want to search upon.\n *\n * @type {string[]}\n */\nconst bannedFilterFields = ['profileimageurlsmall', 'profileimageurl', 'id', 'link', 'matchingField', 'matchingFieldName'];\n\nconst Up = -1;\nconst Down = 1;\n/**\n * Build up the view all link.\n *\n * @param {String} searchTerm The current users' search term.\n * @param {Number} courseID The ID of the course to fetch the report of.\n * @param {Null|Number} userID The potential ID of the user selected.\n * @returns {string|*}\n */\nconst selectAllResultsLink = (searchTerm, courseID, userID = null) => {\n    const params = {\n        id: courseID,\n        searchvalue: searchTerm\n    };\n    if (userID !== null) {\n        params.userid = userID;\n    }\n    return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n};\n\n/**\n * Currently who the user is looking for.\n *\n * @type String\n */\nlet searchTerm = '';\n\n// Our general selectors used within the module.\nconst selectors = {\n    'component': '.user-search',\n    'courseid': '[data-region=\"courseid\"]',\n    'trigger': '.usersearchwidget',\n    'input': '[data-action=\"search\"]',\n    'clearSearch': '[data-action=\"clearsearch\"]',\n    'dropdown': '.usersearchdropdown',\n    'resultitems': '[role=\"menuitem\"]',\n    'viewall': '#select-all',\n};\n\n/**\n * The hook into this module that does some basic setup.\n *\n * @returns {Promise<void>}\n */\nexport const init = async() => {\n    if (registered) {\n        return;\n    }\n    const pendingPromise = new Pending();\n    const component = document.querySelector(selectors.component);\n    const courseID = component.querySelector(selectors.courseid).dataset.courseid;\n\n    await fetchStrings();\n    const userData = await Repository.userFetch(courseID).catch(Notification.exception);\n    registerListenerEvents(userData.users, component, courseID);\n\n    pendingPromise.resolve();\n    registered = true;\n};\n\n/**\n * Given the set of profile fields we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @returns {Promise<void>}\n */\nconst fetchStrings = async() => {\n    const requiredStrings = [\n        'username',\n        'firstname',\n        'lastname',\n        'email',\n        'city',\n        'country',\n        'department',\n        'institution',\n        'idnumber',\n        'phone1',\n        'phone2',\n    ];\n    profilestringmap = await getStrings(requiredStrings.map((key) => ({key})))\n        .then((stringArray) => {\n            return new Map(requiredStrings.map((key, index) => ([key, stringArray[index]])));\n        }).catch(Notification.exception);\n};\n\n/**\n * Register event listeners.\n *\n * @method registerListenerEvents\n * @param {Array} users The users within the grader report to filter.\n * @param {HTMLElement} component The DOM node that contains the entire searching module.\n * @param {Number} courseID The ID of the course to fetch the report of.\n */\nconst registerListenerEvents = (users, component, courseID) => {\n    const events = [\n        'click',\n        'keydown',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n    CustomEvents.define(document, events);\n\n    const searchInput = component.querySelector(selectors.input);\n    const searchDropdown = component.querySelector(selectors.dropdown);\n    const $searchButton = $(selectors.trigger);\n    const clearSearchButton = component.querySelector(selectors.clearSearch);\n\n    // Handy little function to handle general closing of the search component.\n    const closeSearch = () => {\n        dropdownHandler(component, $searchButton, searchDropdown);\n        // Hide the \"clear\" search button search bar.\n        clearSearchButton.classList.add('d-none');\n        // Clear the entered search query in the search bar and hide the search results container.\n        searchInput.value = \"\";\n\n    };\n    // Prevent the click triggering the dropdown.\n\n    $searchButton.on('click', () => {\n        dropdownHandler(component, $searchButton, searchDropdown);\n    });\n    // Register click events.\n    events.forEach((event) => {\n        component.addEventListener(event, (e) => {\n            const resultnodes = [...component.querySelectorAll(selectors.resultitems)];\n            const current = resultnodes.find(r => r.id === document.activeElement.id);\n            const viewAll = component.querySelector(selectors.viewall);\n\n            // Prevent normal key presses activating this.\n            if (e.target.closest('.dropdown-item') && e.which === 1) {\n                window.location = e.target.closest('.dropdown-item').href;\n            }\n            if (e.target === viewAll && (e.which === enter || e.which === space || e.which === 1)) {\n                window.location = selectAllResultsLink(searchTerm, courseID);\n            }\n            // The \"clear search\" button is triggered.\n            if (e.target.closest(selectors.clearSearch) && e.which === 1) {\n                closeSearch();\n                searchInput.focus({preventScroll: true});\n            }\n            // Switch the key presses to handle keyboard nav.\n            switch (e.which) {\n                case arrowUp:\n                    moveUpDown(resultnodes, Up, searchInput, current, e);\n                    break;\n                case arrowDown:\n                    moveUpDown(resultnodes, Down, searchInput, current, e);\n                    break;\n                case home:\n                    e.preventDefault();\n                    moveToFirstNode(resultnodes);\n                    break;\n                case end:\n                    e.preventDefault();\n                    moveToLastNode(resultnodes);\n                    break;\n                case escape:\n                    dropdownHandler(component, $searchButton, searchDropdown);\n                    searchInput.focus({preventScroll: true});\n                    break;\n                case enter:\n                case space:\n                    if (document.activeElement === searchInput) {\n                        if (e.which === space) {\n                            break;\n                        } else {\n                            window.location = selectAllResultsLink(searchTerm, courseID);\n                            break;\n                        }\n                    }\n                    if (document.activeElement === clearSearchButton) {\n                        closeSearch();\n                        break;\n                    }\n                    e.preventDefault();\n                    window.location = e.target.closest('.dropdown-item').href;\n                    break;\n                case tab:\n                    // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                    if (e.target.closest(selectors.clearSearch)) {\n                        if (viewAll) {\n                            e.preventDefault();\n                            viewAll.focus({preventScroll: true});\n                        } else {\n                            closeSearch();\n                        }\n                    }\n                    // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                    if (e.target.closest(selectors.viewall)) {\n                        closeSearch();\n                    }\n                    break;\n            }\n        });\n\n        // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n        document.addEventListener(event, (e) => {\n            if (!e.target.closest(selectors.component) && searchDropdown.classList.contains('show')) {\n                dropdownHandler(component, $searchButton, searchDropdown);\n            }\n        });\n    });\n\n    // Register & handle the text input.\n    searchInput.addEventListener('input', debounce(async() => {\n        searchTerm = searchInput.value;\n        // We can also require a set amount of input before search.\n        if (searchTerm === '') {\n            dropdownHandler(component, $searchButton, searchDropdown);\n            // Hide the \"clear\" search button in the search bar.\n            clearSearchButton.classList.add('d-none');\n        } else {\n            // Display the \"clear\" search button in the search bar.\n            clearSearchButton.classList.remove('d-none');\n            // Filter the users on the given criteria, replace the dropdown node contents and show the results.\n            // Await to prevent the little flash of template render.\n            await makeDropdownBodyContent(\n                users.length,\n                filterUsers(searchTerm, users),\n                searchTerm,\n                component,\n                courseID,\n                searchDropdown\n            );\n            dropdownHandler(component, $searchButton, searchDropdown, true);\n        }\n    }, 300));\n};\n\n/**\n * When called, update the dropdown fields.\n *\n * @param {HTMLElement} component The DOM node that contains the entire searching module.\n * @param {object} $searchButton The jQuery button object that triggers the dropdown.\n * @param {HTMLElement} searchDropdown The child node that contains the dropdown area.\n * @param {Boolean} on Flag to toggle hiding or showing values.\n */\nconst dropdownHandler = (component, $searchButton, searchDropdown, on = false) => {\n    $(component).dropdown('toggle');\n    $searchButton.attr('aria-expanded', on);\n    if (on) {\n        searchDropdown.classList.add('show');\n        $(searchDropdown).show();\n    } else {\n        searchDropdown.classList.remove('show');\n        $(searchDropdown).hide();\n    }\n};\n\n/**\n * Filter the dataset to find if any of the fields include the string the user is searching for.\n *\n * @param {String} searchTerm The current users' search term from the text input element.\n * @param {Array} users The array of users that we can debounce & filter against.\n * @returns {Array} The users found for the given search term.\n */\nconst filterUsers = (searchTerm, users) => {\n    if (searchTerm === '') {\n        return users;\n    }\n    const preppedSearchTerm = searchTerm.toLowerCase();\n    return users.filter((user) => Object.keys(user).some((key) => {\n        if (user[key] === \"\" || bannedFilterFields.includes(key)) {\n            return false;\n        }\n        return user[key].toString().toLowerCase().includes(preppedSearchTerm);\n    }));\n};\n\n/**\n * Given some values, build the content then replace the node.\n *\n * @param {Number} datasetSize The total count of users that we may find users within.\n * @param {Array} userData The users found for the given search term.\n * @param {String} searchTerm The current users' search term.\n * @param {HTMLElement} component The DOM node that contains the entire searching module.\n * @param {Number} courseID The ID of the course to fetch the report of.\n * @param {HTMLElement} searchDropdown The child node that contains the dropdown area.\n * @returns {Promise<void>}\n */\nconst makeDropdownBodyContent = async(datasetSize, userData, searchTerm, component, courseID, searchDropdown) => {\n    const users = addMatchIndicatorToUsers(userData.slice(0, 20), searchTerm, courseID);\n    const {html, js} = await Templates.renderForPromise('gradereport_grader/search/resultset', {\n        'users': users,\n        'hasusers': users.length > 0,\n        'total': datasetSize,\n        'found': users.length,\n        'searchterm': searchTerm,\n        'selectall': selectAllResultsLink(searchTerm, courseID),\n    });\n    Templates.replaceNodeContents(searchDropdown, html, js);\n};\n\n/**\n * Given we have a subset of users, set the field that we matched upon to inform the end user.\n *\n * @param {Array} users The users we will render out.\n * @param {String} searchTerm The current users' search term.\n * @param {Number} courseID The ID of the course to fetch the report of.\n * @returns {Array} The user to render with the matched fields set.\n */\nconst addMatchIndicatorToUsers = (users, searchTerm, courseID) => {\n    const preppedSearchTerm = searchTerm.toLowerCase();\n    return users.map((user) => {\n        for (const [key, value] of Object.entries(user)) {\n            const valueString = value.toString().toLowerCase();\n            if (!valueString.includes(preppedSearchTerm)) {\n                continue;\n            }\n\n            // Ensure we have a good string, otherwise fallback to the key.\n            user.matchingFieldName = profilestringmap.get(key) ?? key;\n            user.matchingField = valueString.replace(preppedSearchTerm, `<span class=\"font-weight-bold\">${searchTerm}</span>`);\n            user.link = selectAllResultsLink(searchTerm, courseID, user.id);\n            break;\n        }\n        return user;\n    });\n};\n\n/**\n * Set the current focus either on the preceding or next result item.\n *\n * @param {Array} resultNodes The array of nodes to switch focus upon.\n * @param {Number} direction Is the user moving up or down the resultset?\n * @param {HTMLElement} searchInput The input field that contains focus potentially.\n * @param {HTMLElement} current The currently focused field.\n * @param {Event} e The JS event from the event handler.\n */\nconst moveUpDown = (resultNodes, direction, searchInput, current, e) => {\n    e.preventDefault();\n    // Stop Bootstrap from being clever.\n    e.stopPropagation();\n    if (document.activeElement === searchInput && resultNodes.length > 0) {\n        if (direction === Up) {\n            moveToLastNode(resultNodes);\n        } else {\n            moveToFirstNode(resultNodes);\n        }\n    }\n    const index = resultNodes.indexOf(current);\n    if (current) {\n        if (direction === Up) {\n            if (index === 0) {\n                moveToLastNode(resultNodes);\n            } else {\n                moveToNode(resultNodes, index - 1);\n            }\n        } else {\n            if (index + 1 >= resultNodes.length) {\n                moveToFirstNode(resultNodes);\n            } else {\n                moveToNode(resultNodes, index + 1);\n            }\n        }\n    }\n};\n"],"names":["registered","profilestringmap","bannedFilterFields","selectAllResultsLink","searchTerm","courseID","userID","params","id","searchvalue","userid","Url","relativeUrl","selectors","async","pendingPromise","Pending","component","document","querySelector","dataset","courseid","fetchStrings","userData","Repository","userFetch","catch","Notification","exception","registerListenerEvents","users","resolve","requiredStrings","map","key","then","stringArray","Map","index","events","CustomEvents","activate","keyboardActivate","define","searchInput","searchDropdown","$searchButton","clearSearchButton","closeSearch","dropdownHandler","classList","add","value","on","forEach","event","addEventListener","e","resultnodes","querySelectorAll","current","find","r","activeElement","viewAll","target","closest","which","window","location","href","enter","space","focus","preventScroll","arrowUp","moveUpDown","arrowDown","home","preventDefault","end","escape","tab","contains","remove","makeDropdownBodyContent","length","filterUsers","dropdown","attr","show","hide","preppedSearchTerm","toLowerCase","filter","user","Object","keys","some","includes","toString","datasetSize","addMatchIndicatorToUsers","slice","html","js","Templates","renderForPromise","replaceNodeContents","entries","valueString","matchingFieldName","get","matchingField","replace","link","resultNodes","direction","stopPropagation","indexOf"],"mappings":"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"}