{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for learners within the grader report.\n * Have to basically search twice on the dataset to avoid passing around massive csv params whilst allowing debouncing.\n *\n * @module    gradereport_grader/search\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Pending from 'core/pending';\nimport {gradebookSearchClass} from 'gradereport_grader/search/search_class';\nimport * as Repository from 'gradereport_grader/search/repository';\nimport Notification from 'core/notification';\nimport {get_strings as getStrings} from 'core/str';\nimport Url from 'core/url';\nimport * as Templates from 'core/templates';\n\nconst bannedFilterFields = ['profileimageurlsmall', 'profileimageurl', 'id', 'link', 'matchingField', 'matchingFieldName'];\nlet profilestringmap = null;\n\n/**\n * Given the set of profile fields we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @returns {Promise<void>}\n */\nconst fetchRequiredStrings = async() => {\n    const requiredStrings = [\n        'username',\n        'firstname',\n        'lastname',\n        'email',\n        'city',\n        'country',\n        'department',\n        'institution',\n        'idnumber',\n        'phone1',\n        'phone2',\n    ];\n    profilestringmap = await getStrings(requiredStrings.map((key) => ({key})))\n        .then((stringArray) => {\n            return new Map(requiredStrings.map((key, index) => ([key, stringArray[index]])));\n        }).catch(Notification.exception);\n};\n\n/**\n * The hook into this module that calls off to the search component.\n *\n * @returns {Promise<void>}\n */\nexport const init = async() => {\n    const pendingPromise = new Pending();\n    await fetchRequiredStrings();\n    new gradebookSearchClass(fetchFilterbleData(), filter(), filterMatchIndicator(), render(), selectAll());\n    pendingPromise.resolve();\n};\n\n/**\n * Get the data we will be searching against in this component.\n *\n * @returns {function(*): Promise<*>}\n */\nconst fetchFilterbleData = () => {\n    return (courseID) => {\n        return Repository.userFetch(courseID).then(r => {\n            return r.users;\n        }).catch(Notification.exception);\n    };\n};\n\n/**\n * Dictate to the search component how and what we want to match upon.\n *\n * @returns {function(*, *): *}\n */\nconst filter = () => {\n    return (dataset, searchTerm) => {\n        const preppedSearchTerm = searchTerm.toLowerCase();\n        return dataset.filter((user) => Object.keys(user).some((key) => {\n            if (user[key] === \"\" || bannedFilterFields.includes(key)) {\n                return false;\n            }\n            return user[key].toString().toLowerCase().includes(preppedSearchTerm);\n        }));\n    };\n};\n\nconst filterMatchIndicator = () => {\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @param {Array} matchedResultsSubset The results we will render out.\n     * @param {String} searchTerm wow.\n     * @param {Number} courseID wow.\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    return (matchedResultsSubset, searchTerm, courseID) => {\n        const preppedSearchTerm = searchTerm.toLowerCase();\n        return matchedResultsSubset.map((user) => {\n            for (const [key, value] of Object.entries(user)) {\n                const valueString = value.toString().toLowerCase();\n                if (!valueString.includes(preppedSearchTerm)) {\n                    continue;\n                }\n\n                // Ensure we have a good string, otherwise fallback to the key.\n                user.matchingFieldName = profilestringmap.get(key) ?? key;\n                user.matchingField = valueString.replace(\n                    preppedSearchTerm,\n                    `<span class=\"font-weight-bold\">${searchTerm}</span>`\n                );\n                user.link = selectOneLink(user.id, searchTerm, courseID);\n                break;\n            }\n            return user;\n        });\n    };\n};\n\n/**\n * Build the content then replace the node.\n *\n */\nconst render = () => {\n    return async(results, dataset, courseID, searchDropdown, searchTerm, selectAllResultsLink) => {\n        const {html, js} = await Templates.renderForPromise('gradereport_grader/search/resultset', {\n            'users': results,\n            'hasusers': results.length > 0,\n            'total': dataset.length,\n            'found': results.length,\n            'searchterm': searchTerm,\n            'selectall': selectAllResultsLink(searchTerm, courseID),\n        });\n        Templates.replaceNodeContents(searchDropdown, html, js);\n    };\n};\n\n/**\n * Build up the view all link.\n *\n * @returns {string|*}\n */\nconst selectAll = () => {\n    return (searchTerm, courseID) => {\n        const params = {\n            id: courseID,\n            searchvalue: searchTerm\n        };\n        return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n    };\n};\n\n/**\n * Build up the view all link that is dedicated to a particular result.\n *\n * @param {Number} userID The selected users' ID.\n * @param {String} searchTerm What the current user is looking for.\n * @param {Number} courseID The course ID that the grader report belongs to.\n *\n * @returns {string|*}\n */\nconst selectOneLink = (userID, searchTerm, courseID) => {\n    const params = {\n        id: courseID,\n        searchvalue: searchTerm,\n        userid: userID,\n    };\n    return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n};\n"],"names":["bannedFilterFields","profilestringmap","async","pendingPromise","Pending","requiredStrings","map","key","then","stringArray","Map","index","catch","Notification","exception","fetchRequiredStrings","gradebookSearchClass","fetchFilterbleData","filter","filterMatchIndicator","render","selectAll","resolve","courseID","Repository","userFetch","r","users","dataset","searchTerm","preppedSearchTerm","toLowerCase","user","Object","keys","some","includes","toString","matchedResultsSubset","value","entries","valueString","matchingFieldName","get","matchingField","replace","link","selectOneLink","id","results","searchDropdown","selectAllResultsLink","html","js","Templates","renderForPromise","length","replaceNodeContents","params","searchvalue","Url","relativeUrl","userID","userid"],"mappings":";;;;;;;;oTA+BMA,mBAAqB,CAAC,uBAAwB,kBAAmB,KAAM,OAAQ,gBAAiB,yBAClGC,iBAAmB,mBAiCHC,gBACVC,eAAiB,IAAIC,sBA1BFF,iBACnBG,gBAAkB,CACpB,WACA,YACA,WACA,QACA,OACA,UACA,aACA,cACA,WACA,SACA,UAEJJ,uBAAyB,oBAAWI,gBAAgBC,KAAKC,OAAUA,IAAAA,SAC9DC,MAAMC,aACI,IAAIC,IAAIL,gBAAgBC,KAAI,CAACC,IAAKI,QAAW,CAACJ,IAAKE,YAAYE,aACvEC,MAAMC,sBAAaC,YAUpBC,OACFC,mCAAqBC,qBAAsBC,SAAUC,uBAAwBC,SAAUC,aAC3FlB,eAAemB,iBAQbL,mBAAqB,IACfM,UACGC,WAAWC,UAAUF,UAAUf,MAAKkB,GAChCA,EAAEC,QACVf,MAAMC,sBAAaC,WASxBI,OAAS,IACJ,CAACU,QAASC,oBACPC,kBAAoBD,WAAWE,qBAC9BH,QAAQV,QAAQc,MAASC,OAAOC,KAAKF,MAAMG,MAAM5B,KAClC,KAAdyB,KAAKzB,OAAeP,mBAAmBoC,SAAS7B,MAG7CyB,KAAKzB,KAAK8B,WAAWN,cAAcK,SAASN,wBAKzDX,qBAAuB,IASlB,CAACmB,qBAAsBT,WAAYN,kBAChCO,kBAAoBD,WAAWE,qBAC9BO,qBAAqBhC,KAAK0B,WACxB,MAAOzB,IAAKgC,SAAUN,OAAOO,QAAQR,MAAO,iCACvCS,YAAcF,MAAMF,WAAWN,iBAChCU,YAAYL,SAASN,oBAK1BE,KAAKU,gDAAoBzC,iBAAiB0C,IAAIpC,4DAAQA,IACtDyB,KAAKY,cAAgBH,YAAYI,QAC7Bf,2DACkCD,uBAEtCG,KAAKc,KAAOC,cAAcf,KAAKgB,GAAInB,WAAYN,wBAG5CS,SASbZ,OAAS,IACJlB,MAAM+C,QAASrB,QAASL,SAAU2B,eAAgBrB,WAAYsB,8BAC3DC,KAACA,KAADC,GAAOA,UAAYC,UAAUC,iBAAiB,sCAAuC,OAC9EN,iBACGA,QAAQO,OAAS,QACpB5B,QAAQ4B,aACRP,QAAQO,kBACH3B,qBACDsB,qBAAqBtB,WAAYN,YAElD+B,UAAUG,oBAAoBP,eAAgBE,KAAMC,KAStDhC,UAAY,IACP,CAACQ,WAAYN,kBACVmC,OAAS,CACXV,GAAIzB,SACJoC,YAAa9B,mBAEV+B,aAAIC,YAAY,iCAAkCH,QAAQ,IAanEX,cAAgB,CAACe,OAAQjC,WAAYN,kBACjCmC,OAAS,CACXV,GAAIzB,SACJoC,YAAa9B,WACbkC,OAAQD,eAELF,aAAIC,YAAY,iCAAkCH,QAAQ"}