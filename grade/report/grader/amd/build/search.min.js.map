{"version":3,"file":"search.min.js","sources":["../src/search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to search for learners within the grader report.\n * Have to basically search twice on the dataset to avoid passing around massive csv params whilst allowing debouncing.\n *\n * @module    gradereport_grader/search\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport GradebookSearchClass from 'gradereport_grader/search/search_class';\nimport * as Repository from 'gradereport_grader/search/repository';\nimport {get_strings as getStrings} from 'core/str';\nimport Url from 'core/url';\nimport {renderForPromise, replaceNodeContents} from 'core/templates';\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.user-search',\n    courseid: '[data-region=\"courseid\"]',\n};\nconst component = document.querySelector(selectors.component);\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst bannedFilterFields = ['profileimageurlsmall', 'profileimageurl', 'id', 'link', 'matchingField', 'matchingFieldName'];\n\nexport default class UserSearch extends GradebookSearchClass {\n\n    // A map of user profile field names that is human-readable.\n    profilestringmap = null;\n\n    constructor() {\n        super();\n    }\n\n    static init() {\n        return new UserSearch();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.user-search';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.usersearchdropdown';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.usersearchwidget';\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/search/resultset', {\n            users: this.getMatchedResults(),\n            hasusers: this.getMatchedResults().length > 0,\n            total: this.getDatasetSize(),\n            found: this.getMatchedResults().length,\n            searchterm: this.getSearchTerm(),\n            selectall: this.selectAllResultsLink(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {Promise<*>}\n     */\n    fetchDataset() {\n        return Repository.userFetch(courseID).then((r) => r.users);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} The users that match the given criteria.\n     */\n    async filterDataset(filterableData) {\n        return filterableData.filter((user) => Object.keys(user).some((key) => {\n            if (user[key] === \"\" || bannedFilterFields.includes(key)) {\n                return false;\n            }\n            return user[key].toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        }));\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    async filterMatchDataset() {\n        const stringMap = await this.getStringMap();\n        this.setMatchedResults(\n            this.getMatchedResults().map((user) => {\n                for (const [key, value] of Object.entries(user)) {\n                    const valueString = value.toString().toLowerCase();\n                    if (!valueString.includes(this.getPreppedSearchTerm())) {\n                        continue;\n                    }\n                    // Ensure we have a good string, otherwise fallback to the key.\n                    user.matchingFieldName = stringMap.get(key) ?? key;\n                    user.matchingField = valueString.replace(\n                        this.getPreppedSearchTerm(),\n                        `<span class=\"font-weight-bold\">${this.getSearchTerm()}</span>`\n                    );\n                    user.link = this.selectOneLink(user.id);\n                    break;\n                }\n                return user;\n            })\n        );\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        super.clickHandler(e);\n        if (e.target === this.getHTMLElements().currentViewAll && e.button === 0) {\n            window.location = this.selectAllResultsLink();\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        super.keyHandler(e);\n\n        if (e.target === this.getHTMLElements().currentViewAll && (e.key === 'Enter' || e.key === 'Space')) {\n            window.location = this.selectAllResultsLink();\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'Enter':\n            case ' ':\n                if (document.activeElement === this.getHTMLElements().searchInput) {\n                    if (e.key === ' ') {\n                        break;\n                    } else {\n                        window.location = this.selectAllResultsLink();\n                        break;\n                    }\n                }\n                if (document.activeElement === this.getHTMLElements().clearSearchButton) {\n                    this.closeSearch();\n                    break;\n                }\n                e.preventDefault();\n                window.location = e.target.closest('.dropdown-item').href;\n                break;\n        }\n    }\n\n    /**\n     * Build up the view all link.\n     *\n     * @returns {string|*}\n     */\n    selectAllResultsLink() {\n        return Url.relativeUrl('/grade/report/grader/index.php', {\n            id: courseID,\n            searchvalue: this.getSearchTerm()\n        }, false);\n    }\n\n    /**\n     * Build up the view all link that is dedicated to a particular result.\n     *\n     * @param {Number} userID The ID of the user selected.\n     * @returns {string|*}\n     */\n    selectOneLink(userID) {\n        return Url.relativeUrl('/grade/report/grader/index.php', {\n            id: courseID,\n            searchvalue: this.getSearchTerm(),\n            userid: userID,\n            }, false);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    getStringMap() {\n        if (!this.profilestringmap) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.profilestringmap = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.profilestringmap;\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_search_class","Repository","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","desc","set","_interopRequireWildcard","_url","selectors","courseID","document","querySelector","dataset","courseid","bannedFilterFields","UserSearch","GradebookSearchClass","constructor","super","static","setComponentSelector","setDropdownSelector","setTriggerSelector","async","html","js","renderForPromise","users","this","getMatchedResults","hasusers","length","total","getDatasetSize","found","searchterm","getSearchTerm","selectall","selectAllResultsLink","replaceNodeContents","getHTMLElements","searchDropdown","fetchDataset","userFetch","then","r","filterableData","filter","user","keys","some","includes","toString","toLowerCase","getPreppedSearchTerm","stringMap","getStringMap","setMatchedResults","map","entries","_stringMap$get","valueString","matchingFieldName","matchingField","replace","concat","link","selectOneLink","id","clickHandler","e","target","currentViewAll","button","window","location","keyHandler","activeElement","searchInput","clearSearchButton","closeSearch","preventDefault","closest","href","Url","relativeUrl","searchvalue","userID","userid","profilestringmap","requiredStrings","getStrings","stringArray","Map","index","_exports"],"mappings":"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"}