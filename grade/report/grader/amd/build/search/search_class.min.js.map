{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport {enter, arrowUp, arrowDown, home, end, space, escape, tab} from 'core/key_codes';\nimport {debounce} from 'core/utils';\nimport {moveToFirstNode, moveToLastNode, moveToNode} from 'gradereport_grader/search/node_handling';\n\n/**\n * The class that manages the state of the user search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Define our standard lookups.\nconst selectors = {\n    'courseid': '[data-region=\"courseid\"]',\n    'input': '[data-action=\"search\"]',\n    'clearSearch': '[data-action=\"clearsearch\"]',\n    'resultitems': '[role=\"menuitem\"]',\n    'viewall': '#select-all',\n};\n\nconst selectorsAbstract = {\n    'component': '.user-search',\n    'dropdown': '.usersearchdropdown',\n    'trigger': '.usersearchwidget',\n};\n\n// DOM nodes that persist.\nconst component = document.querySelector(selectorsAbstract.component);\nconst searchDropdown = component.querySelector(selectorsAbstract.dropdown);\nconst $searchButton = $(selectorsAbstract.trigger);\n\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst searchInput = component.querySelector(selectors.input);\nconst clearSearchButton = component.querySelector(selectors.clearSearch);\n\n// Reused variables for the class.\nconst UP = -1;\nconst DOWN = 1;\nconst events = [\n    'click',\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nlet dataset = [];\n\nexport const gradebookSearchClass = class {\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    // The function defined by the caller that'll filter the dataset.\n    filterFunction = null;\n\n    // The function defined by the caller that mutates the results to indicate to the user what matched.\n    filterFunctionIndicator = null;\n\n    // The function defined by the caller that allows the mutation of the matching dataset.\n    matchAllFunction = false;\n\n    // The function defined by the caller that dictates how the results are rendered out.\n    render = null;\n\n    constructor(fetchFunc, filterFunc, filterMatchIndFunc, render, matchAllBuild = false) {\n        // Assign the appropriate filter and indicator functions for this search.\n        this.filterFunction = filterFunc;\n        this.filterFunctionIndicator = filterMatchIndFunc;\n\n        // Grab the dataset via the passed in function that dictates what we are filtering.\n        this.fetchDataset(fetchFunc);\n\n        this.matchAllFunction = matchAllBuild ? matchAllBuild : false;\n        this.render = render;\n\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...component.querySelectorAll(selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = component.querySelector(selectors.viewall);\n    }\n\n    /**\n     * Given we have been provided with a caller, grab the data ready to search.\n     *\n     * @param {Function} fetchFunc Call the curried function to populate the dataset.\n     * @returns {Promise<void>}\n     */\n    async fetchDataset(fetchFunc) {\n        dataset = await fetchFunc(courseID);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        CustomEvents.define(document, events);\n\n        // Prevent the click triggering the dropdown.\n        $searchButton.on('click', () => {\n            this.mutateDropdown();\n        });\n        // Register click events.\n        events.forEach((event) => {\n            component.addEventListener(event, this.clickHandler.bind(this));\n\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n            document.addEventListener(event, (e) => {\n                if (!e.target.closest(selectorsAbstract.component) && searchDropdown.classList.contains('show')) {\n                    this.mutateDropdown();\n                }\n            });\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        searchInput.addEventListener('input', debounce(async() => {\n            this.searchTerm = searchInput.value;\n            // We can also require a set amount of input before search.\n            if (this.searchTerm === '') {\n                this.mutateDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                clearSearchButton.classList.remove('d-none');\n                // User has given something for us to filter against.\n                this.matchedResults = this.filterDataset();\n                // Replace the dropdown node contents and show the results.\n                await this.render(\n                    this.filterFunctionIndicator(\n                        this.matchedResults.slice(0, 20),\n                        this.searchTerm,\n                        courseID\n                    ),\n                    dataset,\n                    courseID,\n                    searchDropdown,\n                    this.searchTerm,\n                    this.matchAllFunction,\n                );\n                // Set the dropdown to open.\n                this.mutateDropdown(true);\n            }\n        }, 300));\n    }\n\n    /**\n     * Filter the dataset to find if any of the fields include the string the user is searching for.\n     *\n     * @returns {Array} The results found for the given search term.\n     */\n    filterDataset() {\n        return this.filterFunction(dataset, this.searchTerm);\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    mutateDropdown(on = false) {\n        $(component).dropdown('toggle');\n        $searchButton.attr('aria-expanded', on);\n        if (on) {\n            searchDropdown.classList.add('show');\n            $(searchDropdown).show();\n        } else {\n            searchDropdown.classList.remove('show');\n            $(searchDropdown).hide();\n        }\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {Event} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                moveToLastNode(this.resultNodes);\n            } else {\n                moveToFirstNode(this.resultNodes);\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    moveToLastNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    moveToFirstNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        // Handy little function to handle general closing of the search component.\n        const closeSearch = () => {\n            this.mutateDropdown();\n            // Hide the \"clear\" search button search bar.\n            clearSearchButton.classList.add('d-none');\n            // Clear the entered search query in the search bar and hide the search results container.\n            searchInput.value = \"\";\n        };\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.which === 1) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        if (e.target === this.currentViewAll && (e.which === enter || e.which === space || e.which === 1)) {\n            if (this.matchAllFunction) {\n                window.location = this.matchAllFunction(this.searchTerm, courseID);\n            }\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.clearSearch) && e.which === 1) {\n            closeSearch();\n            searchInput.focus({preventScroll: true});\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        this.keySwitching(e, closeSearch);\n    }\n\n    /**\n     * Switch the users key input.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     * @param {Function} closeSearch Helper function that handles the case we want to close the dropdown.\n     */\n    keySwitching(e, closeSearch) {\n        switch (e.which) {\n            case arrowUp:\n                this.keyUpDown(UP, e);\n                break;\n            case arrowDown:\n                this.keyUpDown(DOWN, e);\n                break;\n            case home:\n                e.preventDefault();\n                moveToFirstNode(this.resultNodes);\n                break;\n            case end:\n                e.preventDefault();\n                moveToLastNode(this.resultNodes);\n                break;\n            case escape:\n                this.mutateDropdown();\n                searchInput.focus({preventScroll: true});\n                break;\n            case enter:\n            case space:\n                if (document.activeElement === searchInput) {\n                    if (e.which === space) {\n                        break;\n                    } else {\n                        if (this.matchAllFunction) {\n                            window.location = this.matchAllFunction(this.searchTerm, courseID);\n                        }\n                        break;\n                    }\n                }\n                if (document.activeElement === clearSearchButton) {\n                    closeSearch();\n                    break;\n                }\n                e.preventDefault();\n                window.location = e.target.closest('.dropdown-item').href;\n                break;\n            case tab:\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                if (e.target.closest(selectors.viewall)) {\n                    closeSearch();\n                }\n                break;\n        }\n    }\n};\n"],"names":["selectors","selectorsAbstract","component","document","querySelector","searchDropdown","$searchButton","courseID","dataset","courseid","searchInput","clearSearchButton","events","CustomEvents","activate","keyboardActivate","constructor","fetchFunc","filterFunc","filterMatchIndFunc","render","matchAllBuild","filterFunction","filterFunctionIndicator","fetchDataset","matchAllFunction","registerClickHandlers","registerInputHandlers","updateNodes","resultNodes","querySelectorAll","currentNode","this","find","r","id","activeElement","currentViewAll","define","on","mutateDropdown","forEach","event","addEventListener","clickHandler","bind","e","target","closest","classList","contains","async","searchTerm","value","add","remove","matchedResults","filterDataset","slice","dropdown","attr","show","hide","keyUpDown","direction","preventDefault","stopPropagation","length","index","indexOf","closeSearch","which","window","location","href","enter","space","focus","preventScroll","keySwitching","arrowUp","arrowDown","home","end","escape","tab"],"mappings":";;;;;;;8NA8BMA,mBACU,2BADVA,gBAEO,yBAFPA,sBAGa,8BAHbA,sBAIa,oBAJbA,kBAKS,cAGTC,4BACW,eADXA,2BAEU,sBAFVA,0BAGS,oBAITC,UAAYC,SAASC,cAAcH,6BACnCI,eAAiBH,UAAUE,cAAcH,4BACzCK,eAAgB,mBAAEL,2BAElBM,SAAWL,UAAUE,cAAcJ,oBAAoBQ,QAAQC,SAC/DC,YAAcR,UAAUE,cAAcJ,iBACtCW,kBAAoBT,UAAUE,cAAcJ,uBAK5CY,OAAS,CACX,QACA,UACAC,mCAAaD,OAAOE,SACpBD,mCAAaD,OAAOG,sBAEpBP,QAAU,iCAEsB,MA4BhCQ,YAAYC,UAAWC,WAAYC,mBAAoBC,YAAQC,4GA1B9C,sCAGJ,uCAGC,uCAGA,4CAGG,4CAGA,qDAGS,+CAGP,iCAGV,WAIAC,eAAiBJ,gBACjBK,wBAA0BJ,wBAG1BK,aAAaP,gBAEbQ,iBAAmBJ,gBAAgC,OACnDD,OAASA,YAGTM,6BACAC,wBAMTC,mBACSC,YAAc,IAAI3B,UAAU4B,iBAAiB9B,6BAC7C+B,YAAcC,KAAKH,YAAYI,MAAKC,GAAKA,EAAEC,KAAOhC,SAASiC,cAAcD,UACzEE,eAAiBnC,UAAUE,cAAcJ,sCAS/BiB,WACfT,cAAgBS,UAAUV,UAM9BmB,2DACiBY,OAAOnC,SAAUS,QAG9BN,cAAciC,GAAG,SAAS,UACjBC,oBAGT5B,OAAO6B,SAASC,QACZxC,UAAUyC,iBAAiBD,MAAOV,KAAKY,aAAaC,KAAKb,OAGzD7B,SAASwC,iBAAiBD,OAAQI,KACzBA,EAAEC,OAAOC,QAAQ/C,8BAAgCI,eAAe4C,UAAUC,SAAS,cAC/EV,uBASrBb,wBAEIjB,YAAYiC,iBAAiB,SAAS,oBAASQ,eACtCC,WAAa1C,YAAY2C,MAEN,KAApBrB,KAAKoB,iBACAZ,iBAEL7B,kBAAkBsC,UAAUK,IAAI,YAGhC3C,kBAAkBsC,UAAUM,OAAO,eAE9BC,eAAiBxB,KAAKyB,sBAErBzB,KAAKZ,OACPY,KAAKT,wBACDS,KAAKwB,eAAeE,MAAM,EAAG,IAC7B1B,KAAKoB,WACL7C,UAEJC,QACAD,SACAF,eACA2B,KAAKoB,WACLpB,KAAKP,uBAGJe,gBAAe,MAEzB,MAQPiB,uBACWzB,KAAKV,eAAed,QAASwB,KAAKoB,YAQ7CZ,qBAAeD,+EACTrC,WAAWyD,SAAS,UACtBrD,cAAcsD,KAAK,gBAAiBrB,IAChCA,IACAlC,eAAe4C,UAAUK,IAAI,4BAC3BjD,gBAAgBwD,SAElBxD,eAAe4C,UAAUM,OAAO,4BAC9BlD,gBAAgByD,QAU1BC,UAAUC,UAAWlB,GACjBA,EAAEmB,iBAEFnB,EAAEoB,kBAEE/D,SAASiC,gBAAkB1B,aAAesB,KAAKH,YAAYsC,OAAS,KAzKrE,IA0KKH,4CACehC,KAAKH,gDAEJG,KAAKH,oBAGvBuC,MAAQpC,KAAKH,YAAYwC,QAAQrC,KAAKD,aACxCC,KAAKD,eAjLN,IAkLKiC,UACc,IAAVI,wCACepC,KAAKH,2CAETG,KAAKH,YAAauC,MAAQ,GAGrCA,MAAQ,GAAKpC,KAAKH,YAAYsC,0CACdnC,KAAKH,2CAEVG,KAAKH,YAAauC,MAAQ,IAWrDxB,aAAaE,SAEHwB,YAAc,UACX9B,iBAEL7B,kBAAkBsC,UAAUK,IAAI,UAEhC5C,YAAY2C,MAAQ,SAEnBzB,cAGDkB,EAAEC,OAAOC,QAAQ,mBAAiC,IAAZF,EAAEyB,QACxCC,OAAOC,SAAW3B,EAAEC,OAAOC,QAAQ,kBAAkB0B,MAErD5B,EAAEC,SAAWf,KAAKK,gBAAmBS,EAAEyB,QAAUI,kBAAS7B,EAAEyB,QAAUK,kBAAqB,IAAZ9B,EAAEyB,OAC7EvC,KAAKP,mBACL+C,OAAOC,SAAWzC,KAAKP,iBAAiBO,KAAKoB,WAAY7C,WAI7DuC,EAAEC,OAAOC,QAAQhD,wBAAsC,IAAZ8C,EAAEyB,QAC7CD,cACA5D,YAAYmE,MAAM,CAACC,eAAe,UAIjCC,aAAajC,EAAGwB,aASzBS,aAAajC,EAAGwB,oBACJxB,EAAEyB,YACDS,wBACIjB,WA9OV,EA8OwBjB,cAElBmC,0BACIlB,UAhPR,EAgPwBjB,cAEpBoC,gBACDpC,EAAEmB,oDACcjC,KAAKH,wBAEpBsD,eACDrC,EAAEmB,mDACajC,KAAKH,wBAEnBuD,uBACI5C,iBACL9B,YAAYmE,MAAM,CAACC,eAAe,eAEjCH,sBACAC,oBACGzE,SAASiC,gBAAkB1B,YAAa,IACpCoC,EAAEyB,QAAUK,uBAGR5C,KAAKP,mBACL+C,OAAOC,SAAWzC,KAAKP,iBAAiBO,KAAKoB,WAAY7C,oBAKjEJ,SAASiC,gBAAkBzB,kBAAmB,CAC9C2D,oBAGJxB,EAAEmB,iBACFO,OAAOC,SAAW3B,EAAEC,OAAOC,QAAQ,kBAAkB0B,gBAEpDW,eAEGvC,EAAEC,OAAOC,QAAQhD,yBACbgC,KAAKK,gBACLS,EAAEmB,sBACG5B,eAAewC,MAAM,CAACC,eAAe,KAE1CR,eAIJxB,EAAEC,OAAOC,QAAQhD,oBACjBsE"}