{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport {debounce} from 'core/utils';\n\n/**\n * The class that manages the state of the search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Reused variables for the class.\nconst events = [\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nconst UP = -1;\nconst DOWN = 1;\n\nexport default class {\n    // Define our standard lookups.\n    selectors = {\n        component: this.setComponentSelector(),\n        trigger: this.setTriggerSelector(),\n        input: '[data-action=\"search\"]',\n        clearSearch: '[data-action=\"clearsearch\"]',\n        dropdown: this.setDropdownSelector(),\n        resultitems: '[role=\"option\"]',\n        viewall: '#select-all',\n    };\n\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // What the user searched for as a lowercase.\n    preppedSearchTerm = null;\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    dataset = null;\n\n    datasetSize = 0;\n\n    // DOM nodes that persist.\n    component = document.querySelector(this.selectors.component);\n    searchInput = this.component.querySelector(this.selectors.input);\n    searchDropdown = this.component.querySelector(this.selectors.dropdown);\n    $searchButton = $(this.selectors.trigger);\n    clearSearchButton = this.component.querySelector(this.selectors.clearSearch);\n    $component = $(this.component);\n\n    constructor() {\n        this.setSearchTerms(this.searchInput.value ?? '');\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerKeyHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    fetchDataset() {\n        throw new Error(`fetchDataset() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     * @param {Array} dataset\n     */\n    filterDataset(dataset) {\n        throw new Error(`filterDataset(${dataset}) must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    filterMatchDataset() {\n        throw new Error(`filterMatchDataset() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    renderDropdown() {\n        throw new Error(`renderDropdown() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    setComponentSelector() {\n        throw new Error(`setComponentSelector() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    setDropdownSelector() {\n        throw new Error(`setDropdownSelector() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    setTriggerSelector() {\n        throw new Error(`setTriggerSelector() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Promise<null>}\n     */\n    async getDataset() {\n        if (!this.dataset) {\n            this.dataset = await this.fetchDataset();\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Return the size of the dataset.\n     *\n     * @returns {number}\n     */\n    getDatasetSize() {\n        return this.datasetSize;\n    }\n\n    /**\n     * Return the results of the filter upon the dataset.\n     *\n     * @returns {Array}\n     */\n    getMatchedResults() {\n        return this.matchedResults;\n    }\n\n    /**\n     * Given a filter has been run across the dataset, store the matched results.\n     *\n     * @param {Array} result\n     */\n    setMatchedResults(result) {\n        this.matchedResults = result;\n    }\n\n    /**\n     * Get the value that the user entered.\n     *\n     * @returns {string}\n     */\n    getSearchTerm() {\n        return this.searchTerm;\n    }\n\n    /**\n     * Get the transformed search value.\n     *\n     * @returns {string}\n     */\n    getPreppedSearchTerm() {\n        return this.preppedSearchTerm;\n    }\n\n    /**\n     * When a user searches for something, set our variable to manage it.\n     *\n     * @param {string} result\n     */\n    setSearchTerms(result) {\n        this.searchTerm = result;\n        this.preppedSearchTerm = result.toLowerCase();\n    }\n\n    /**\n     * Return an object containing a handfull of dom nodes that we sometimes need the value of.\n     *\n     * @returns {object}\n     */\n    getHTMLElements() {\n        this.updateNodes();\n        return {\n            searchDropdown: this.searchDropdown,\n            currentViewAll: this.currentViewAll,\n            searchInput: this.searchInput,\n            clearSearchButton: this.clearSearchButton\n        };\n    }\n\n    /**\n     * When called, close the dropdown and reset the input field attributes.\n     */\n    closeSearch() {\n        this.toggleDropdown();\n        // Hide the \"clear\" search button search bar.\n        this.clearSearchButton.classList.add('d-none');\n        // Clear the entered search query in the search bar and hide the search results container.\n        this.setSearchTerms('');\n        this.searchInput.value = \"\";\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    toggleDropdown(on = false) {\n        this.$component.dropdown('toggle');\n        this.$searchButton.attr('aria-expanded', on);\n        if (on) {\n            this.searchDropdown.classList.add('show');\n            $(this.searchDropdown).show();\n        } else {\n            this.searchDropdown.classList.remove('show');\n            $(this.searchDropdown).hide();\n        }\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...this.component.querySelectorAll(this.selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = this.component.querySelector(this.selectors.viewall);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Prevent the click triggering the dropdown.\n        this.$searchButton.on('click', () => {\n            this.toggleDropdown();\n        });\n\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        // Register a small click event onto the document since we need to check if they are clicking off the component.\n        document.addEventListener('click', (e) => {\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n            if (!e.target.closest(this.selectors.component) && this.searchDropdown.classList.contains('show')) {\n                this.toggleDropdown();\n            }\n        });\n    }\n\n    /**\n     * Register key event listeners.\n     */\n    registerKeyHandlers() {\n        CustomEvents.define(document, events);\n\n        // Register click events.\n        events.forEach((event) => {\n            this.component.addEventListener(event, this.keyHandler.bind(this));\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.getSearchTerm() === '') {\n                this.toggleDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n                await this.renderAndShow();\n            }\n        }, 300));\n    }\n\n    /**\n     * A combo method to take the matching fields and render out the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderAndShow() {\n        // User has given something for us to filter against.\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        await this.filterMatchDataset();\n        // Replace the dropdown node contents and show the results.\n        await this.renderDropdown();\n        // Set the dropdown to open.\n        this.toggleDropdown(true);\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {KeyboardEvent} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === this.searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                this.moveToLastNode();\n            } else {\n                this.moveToFirstNode();\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    this.moveToLastNode();\n                } else {\n                    this.moveToNode(index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    this.moveToFirstNode();\n                } else {\n                    this.moveToNode(index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {MouseEvent} e The triggering event that we are working with.\n     */\n    async clickHandler(e) {\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(this.selectors.clearSearch) && e.button === 0) {\n            this.closeSearch();\n            this.searchInput.focus({preventScroll: true});\n        }\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\n        if (e.target.closest(this.selectors.input) && this.getSearchTerm() !== '' && e.button === 0) {\n            await this.renderAndShow();\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {KeyboardEvent} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        this.updateNodes();\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'ArrowUp':\n                this.keyUpDown(UP, e);\n                break;\n            case 'ArrowDown':\n                this.keyUpDown(DOWN, e);\n                break;\n            case 'Home':\n                e.preventDefault();\n                this.moveToFirstNode();\n                break;\n            case 'End':\n                e.preventDefault();\n                this.moveToLastNode();\n                break;\n            case 'Escape':\n                this.toggleDropdown();\n                this.searchInput.focus({preventScroll: true});\n                break;\n            case 'Tab':\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(this.selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        this.closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tertiary nav item.\n                if (e.target.closest(this.selectors.viewall)) {\n                    this.closeSearch();\n                }\n                break;\n        }\n    }\n\n    /**\n     * Set focus on a given node after parsed through the calling functions.\n     *\n     * @param {HTMLElement} node The node to set focus upon.\n     */\n    selectNode = (node) => {\n        node.focus({preventScroll: true});\n        this.searchDropdown.scrollTop = node.offsetTop - (node.clientHeight / 2);\n    };\n\n    /**\n     * Set the focus on the first node within the array.\n     */\n    moveToFirstNode = () => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[0]);\n        }\n    };\n\n    /**\n     * Set the focus to the final node within the array.\n     */\n    moveToLastNode = () => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[this.resultNodes.length - 1]);\n        }\n    };\n\n    /**\n     * Set focus on any given specified node within the node array.\n     *\n     * @param {Number} index Which item within the array to set focus upon.\n     */\n    moveToNode = (index) => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[index]);\n        }\n    };\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_jquery","events","_custom_interaction_events","activate","CustomEvents","keyboardActivate","_exports","constructor","_this$searchInput$val","this","component","setComponentSelector","trigger","setTriggerSelector","clearSearch","dropdown","setDropdownSelector","resultitems","viewall","document","querySelector","selectors","$","node","focus","preventScroll","searchDropdown","scrollTop","offsetTop","clientHeight","resultNodes","length","selectNode","index","setSearchTerms","searchInput","registerClickHandlers","registerKeyHandlers","registerInputHandlers","fetchDataset","Error","concat","name","filterDataset","dataset","filterMatchDataset","renderDropdown","async","datasetSize","getDatasetSize","getMatchedResults","matchedResults","setMatchedResults","result","getSearchTerm","searchTerm","getPreppedSearchTerm","preppedSearchTerm","toLowerCase","getHTMLElements","updateNodes","currentViewAll","clearSearchButton","closeSearch","toggleDropdown","classList","add","on","arguments","$component","$searchButton","attr","show","remove","hide","querySelectorAll","currentNode","find","r","id","activeElement","addEventListener","clickHandler","bind","e","target","closest","contains","define","forEach","event","keyHandler","debounce","renderAndShow","getDataset","keyUpDown","direction","preventDefault","stopPropagation","moveToLastNode","moveToFirstNode","indexOf","moveToNode","button","window","location","href"],"mappings":"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"}