{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport {debounce} from 'core/utils';\n\n/**\n * The class that manages the state of the search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.user-search',\n    trigger: '.usersearchwidget',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    dropdown: '.usersearchdropdown',\n    resultitems: '[role=\"option\"]',\n    viewall: '#select-all',\n};\n\n// Reused variables for the class.\nconst events = [\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nconst UP = -1;\nconst DOWN = 1;\n\nexport default class {\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // What did the user search for as a lowercase.\n    preppedSearchTerm = null;\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    results = [];\n\n    dataset = null;\n\n    // DOM nodes that persist.\n    component = document.querySelector(selectors.component);\n    searchInput = this.component.querySelector(selectors.input);\n    searchDropdown = this.component.querySelector(selectors.dropdown);\n    $searchButton = $(selectors.trigger);\n    clearSearchButton = this.component.querySelector(selectors.clearSearch);\n    $component = $(this.component);\n\n    constructor() {\n        this.searchTerm = this.searchInput.value ?? '';\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerKeyHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    fetchDataset() {\n        throw new Error(`fetchDataset() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    filterDataset() {\n        throw new Error(`filterDataset() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    filterMatchDataset() {\n        throw new Error(`filterMatchDataset() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Stub out a required function.\n     */\n    renderDropdown() {\n        throw new Error(`renderDropdown() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * When called, close the dropdown and reset the input field attributes.\n     */\n    closeSearch() {\n        this.toggleDropdown();\n        // Hide the \"clear\" search button search bar.\n        this.clearSearchButton.classList.add('d-none');\n        // Clear the entered search query in the search bar and hide the search results container.\n        this.searchTerm = \"\";\n        this.searchInput.value = \"\";\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    toggleDropdown(on = false) {\n        this.$component.dropdown('toggle');\n        this.$searchButton.attr('aria-expanded', on);\n        if (on) {\n            this.searchDropdown.classList.add('show');\n            $(this.searchDropdown).show();\n        } else {\n            this.searchDropdown.classList.remove('show');\n            $(this.searchDropdown).hide();\n        }\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...this.component.querySelectorAll(selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = this.component.querySelector(selectors.viewall);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Prevent the click triggering the dropdown.\n        this.$searchButton.on('click', () => {\n            this.toggleDropdown();\n        });\n\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        // Register a small click event onto the document since we need to check if they are clicking off the component.\n        document.addEventListener('click', (e) => {\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n            if (!e.target.closest(selectors.component) && this.searchDropdown.classList.contains('show')) {\n                this.toggleDropdown();\n            }\n        });\n    }\n\n    /**\n     * Register key event listeners.\n     */\n    registerKeyHandlers() {\n        CustomEvents.define(document, events);\n\n        // Register click events.\n        events.forEach((event) => {\n            this.component.addEventListener(event, this.keyHandler.bind(this));\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.searchTerm = this.searchInput.value;\n            // We can also require a set amount of input before search.\n            if (this.searchTerm === '') {\n                this.toggleDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n                await this.renderAndShow();\n            }\n        }, 300));\n    }\n\n    /**\n     * A combo method to take the matching fields and render out the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderAndShow() {\n        this.preppedSearchTerm = this.searchTerm.toLowerCase();\n        // User has given something for us to filter against.\n        this.matchedResults = await this.filterDataset();\n        // Replace the dropdown node contents and show the results.\n        await this.renderDropdown(await this.filterMatchDataset());\n        // Set the dropdown to open.\n        this.toggleDropdown(true);\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {Event} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === this.searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                this.moveToLastNode();\n            } else {\n                this.moveToFirstNode();\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    this.moveToLastNode();\n                } else {\n                    this.moveToNode(index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    this.moveToFirstNode();\n                } else {\n                    this.moveToNode(index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.clearSearch) && e.button === 0) {\n            this.closeSearch();\n            this.searchInput.focus({preventScroll: true});\n        }\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\n        if (e.target.closest(selectors.input) && this.searchTerm !== '' && e.button === 0) {\n            this.renderAndShow();\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        this.updateNodes();\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'ArrowUp':\n                this.keyUpDown(UP, e);\n                break;\n            case 'ArrowDown':\n                this.keyUpDown(DOWN, e);\n                break;\n            case 'Home':\n                e.preventDefault();\n                this.moveToFirstNode();\n                break;\n            case 'End':\n                e.preventDefault();\n                this.moveToLastNode();\n                break;\n            case 'Escape':\n                this.toggleDropdown();\n                this.searchInput.focus({preventScroll: true});\n                break;\n            case 'Tab':\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        this.closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                if (e.target.closest(selectors.viewall)) {\n                    this.closeSearch();\n                }\n                break;\n        }\n    }\n\n    /**\n     * Set focus on a given node after parsed through the calling functions.\n     *\n     * @param {HTMLElement} node The node to set focus upon.\n     */\n    selectNode = (node) => {\n        node.focus({preventScroll: true});\n        this.searchDropdown.scrollTop = node.offsetTop - (node.clientHeight / 2);\n    };\n\n    /**\n     * Set the focus on the first node within the array.\n     */\n    moveToFirstNode = () => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[0]);\n        }\n    };\n\n    /**\n     * Set the focus to the final node within the array.\n     */\n    moveToLastNode = () => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[this.resultNodes.length - 1]);\n        }\n    };\n\n    /**\n     * Set focus on any given specified node within the node array.\n     *\n     * @param {Number} index Which item within the array to set focus upon.\n     */\n    moveToNode = (index) => {\n        if (this.resultNodes.length > 0) {\n            this.selectNode(this.resultNodes[index]);\n        }\n    };\n}\n"],"names":["selectors","events","CustomEvents","activate","keyboardActivate","constructor","document","querySelector","this","component","node","focus","preventScroll","searchDropdown","scrollTop","offsetTop","clientHeight","resultNodes","length","selectNode","index","searchTerm","searchInput","value","registerClickHandlers","registerKeyHandlers","registerInputHandlers","fetchDataset","Error","name","filterDataset","filterMatchDataset","renderDropdown","closeSearch","toggleDropdown","clearSearchButton","classList","add","on","$component","dropdown","$searchButton","attr","show","remove","hide","updateNodes","querySelectorAll","currentNode","find","r","id","activeElement","currentViewAll","addEventListener","clickHandler","bind","e","target","closest","contains","define","forEach","event","keyHandler","async","renderAndShow","preppedSearchTerm","toLowerCase","matchedResults","keyUpDown","direction","preventDefault","stopPropagation","moveToLastNode","moveToFirstNode","indexOf","moveToNode","button","window","location","href","key"],"mappings":"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"}