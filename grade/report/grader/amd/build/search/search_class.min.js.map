{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport {enter, arrowUp, arrowDown, home, end, space, escape, tab} from 'core/key_codes';\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport Url from 'core/url';\nimport {moveToFirstNode, moveToLastNode, moveToNode} from 'gradereport_grader/search/node_handling';\n\n/**\n * The class that manages the state of the user search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Define our standard lookups.\nconst selectors = {\n    'component': '.user-search',\n    'courseid': '[data-region=\"courseid\"]',\n    'trigger': '.usersearchwidget',\n    'input': '[data-action=\"search\"]',\n    'clearSearch': '[data-action=\"clearsearch\"]',\n    'dropdown': '.usersearchdropdown',\n    'resultitems': '[role=\"menuitem\"]',\n    'viewall': '#select-all',\n};\n\n// DOM nodes that persist.\nconst component = document.querySelector(selectors.component);\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst searchInput = component.querySelector(selectors.input);\nconst searchDropdown = component.querySelector(selectors.dropdown);\nconst $searchButton = $(selectors.trigger);\nconst clearSearchButton = component.querySelector(selectors.clearSearch);\n\n// Reused variables for the class.\nconst UP = -1;\nconst DOWN = 1;\nconst events = [\n    'click',\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nlet dataset = [];\n\nexport const gradebookSearchClass = class {\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    // The function defined by the caller that'll filter the dataset.\n    filterFunction = null;\n\n    // The function defined by the caller that mutates the results to indicate to the user what matched.\n    filterFunctionIndicator = null;\n\n    constructor(fetchFunc, filterFunc, filterMatchIndFunc) {\n        // Assign the appropriate filter and indicator functions for this search.\n        this.filterFunction = filterFunc;\n        this.filterFunctionIndicator = filterMatchIndFunc;\n\n        // Grab the dataset via the passed in function that dicates what we are filtering.\n        this.fetchDataset(fetchFunc);\n\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...component.querySelectorAll(selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = component.querySelector(selectors.viewall);\n    }\n\n    /**\n     * Given we have been provided with a caller, grab the data ready to search.\n     *\n     * @param {Function} fetchFunc Call the curried function to populate the dataset.\n     * @returns {Promise<void>}\n     */\n    async fetchDataset(fetchFunc) {\n        dataset = await fetchFunc(courseID);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        CustomEvents.define(document, events);\n\n        // Prevent the click triggering the dropdown.\n        $searchButton.on('click', () => {\n            this.mutateDropdown();\n        });\n        // Register click events.\n        events.forEach((event) => {\n            component.addEventListener(event, this.clickHandler.bind(this));\n\n            // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n            document.addEventListener(event, (e) => {\n                if (!e.target.closest(selectors.component) && searchDropdown.classList.contains('show')) {\n                    this.mutateDropdown();\n                }\n            });\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        searchInput.addEventListener('input', debounce(async() => {\n            this.searchTerm = searchInput.value;\n            // We can also require a set amount of input before search.\n            if (this.searchTerm === '') {\n                this.mutateDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                clearSearchButton.classList.remove('d-none');\n                // User has given something for us to filter against.\n                this.matchedResults = this.filterDataset();\n                // Replace the dropdown node contents and show the results.\n                await this.renderDropdown(\n                    this.filterFunctionIndicator(\n                        this.matchedResults.slice(0, 20),\n                        selectOneLink(this.searchTerm),\n                        this.searchTerm\n                    )\n                );\n                // Set the dropdown to open.\n                this.mutateDropdown(true);\n            }\n        }, 300));\n    }\n\n    /**\n     * Filter the dataset to find if any of the fields include the string the user is searching for.\n     *\n     * @returns {Array} The results found for the given search term.\n     */\n    filterDataset() {\n        return this.filterFunction(dataset, this.searchTerm);\n    }\n\n    /**\n     * Build the content then replace the node.\n     *\n     * @param {Array} results The results of the dataset having its' matching indicators applied.\n     */\n    async renderDropdown(results) {\n        const {html, js} = await Templates.renderForPromise('gradereport_grader/search/resultset', {\n            'users': results,\n            'hasusers': results.length > 0,\n            'total': dataset.length,\n            'found': results.length,\n            'searchterm': this.searchTerm,\n            'selectall': selectAllResultsLink(this.searchTerm),\n        });\n        Templates.replaceNodeContents(searchDropdown, html, js);\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    mutateDropdown(on = false) {\n        $(component).dropdown('toggle');\n        $searchButton.attr('aria-expanded', on);\n        if (on) {\n            searchDropdown.classList.add('show');\n            $(searchDropdown).show();\n        } else {\n            searchDropdown.classList.remove('show');\n            $(searchDropdown).hide();\n        }\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {Event} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                moveToLastNode(this.resultNodes);\n            } else {\n                moveToFirstNode(this.resultNodes);\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    moveToLastNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    moveToFirstNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        // Handy little function to handle general closing of the search component.\n        const closeSearch = () => {\n            this.mutateDropdown();\n            // Hide the \"clear\" search button search bar.\n            clearSearchButton.classList.add('d-none');\n            // Clear the entered search query in the search bar and hide the search results container.\n            searchInput.value = \"\";\n        };\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.which === 1) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        if (e.target === this.currentViewAll && (e.which === enter || e.which === space || e.which === 1)) {\n            window.location = selectAllResultsLink(this.searchTerm);\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.clearSearch) && e.which === 1) {\n            closeSearch();\n            searchInput.focus({preventScroll: true});\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        this.keySwitching(e, closeSearch);\n    }\n\n    /**\n     * Switch the users key input.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     * @param {Function} closeSearch Helper function that handles the case we want to close the dropdown.\n     */\n    keySwitching(e, closeSearch) {\n        switch (e.which) {\n            case arrowUp:\n                this.keyUpDown(UP, e);\n                break;\n            case arrowDown:\n                this.keyUpDown(DOWN, e);\n                break;\n            case home:\n                e.preventDefault();\n                moveToFirstNode(this.resultNodes);\n                break;\n            case end:\n                e.preventDefault();\n                moveToLastNode(this.resultNodes);\n                break;\n            case escape:\n                this.mutateDropdown();\n                searchInput.focus({preventScroll: true});\n                break;\n            case enter:\n            case space:\n                if (document.activeElement === searchInput) {\n                    if (e.which === space) {\n                        break;\n                    } else {\n                        window.location = selectAllResultsLink(this.searchTerm);\n                        break;\n                    }\n                }\n                if (document.activeElement === clearSearchButton) {\n                    closeSearch();\n                    break;\n                }\n                e.preventDefault();\n                window.location = e.target.closest('.dropdown-item').href;\n                break;\n            case tab:\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                if (e.target.closest(selectors.viewall)) {\n                    closeSearch();\n                }\n                break;\n        }\n    }\n};\n\n/**\n * Build up the view all link.\n *\n * @param {String} searchTerm The current users' search term.\n * @param {Null|Number} userID The potential ID of the user selected.\n * @returns {string|*}\n */\nconst selectAllResultsLink = (searchTerm, userID = null) => {\n    const params = {\n        id: courseID,\n        searchvalue: searchTerm\n    };\n    if (userID !== null) {\n        params.userid = userID;\n    }\n    return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n};\n\n/**\n * Build up the view all link that is dedicated to a particular result.\n *\n * @param {String} searchTerm The current users' search term.\n * @returns {Function|*}\n */\nconst selectOneLink = (searchTerm) => {\n    return (userID = null) => {\n        const params = {\n            id: courseID,\n            searchvalue: searchTerm\n        };\n        params.userid = userID;\n        return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n    };\n};\n"],"names":["selectors","component","document","querySelector","courseID","dataset","courseid","searchInput","searchDropdown","$searchButton","clearSearchButton","events","CustomEvents","activate","keyboardActivate","constructor","fetchFunc","filterFunc","filterMatchIndFunc","filterFunction","filterFunctionIndicator","fetchDataset","registerClickHandlers","registerInputHandlers","updateNodes","resultNodes","querySelectorAll","currentNode","this","find","r","id","activeElement","currentViewAll","define","on","mutateDropdown","forEach","event","addEventListener","clickHandler","bind","e","target","closest","classList","contains","async","searchTerm","value","add","remove","matchedResults","filterDataset","renderDropdown","slice","selectOneLink","results","html","js","Templates","renderForPromise","length","selectAllResultsLink","replaceNodeContents","dropdown","attr","show","hide","keyUpDown","direction","preventDefault","stopPropagation","index","indexOf","closeSearch","which","window","location","href","enter","space","focus","preventScroll","keySwitching","arrowUp","arrowDown","home","end","escape","tab","userID","params","searchvalue","userid","Url","relativeUrl"],"mappings":"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"}