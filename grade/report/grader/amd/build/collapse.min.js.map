{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport Notification from 'core/notification';\nimport GradebookSearchClass from 'gradereport_grader/search/search_class';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    trigger: '.collapsecolumn',\n    dropdown: '.collapsecolumndropdown',\n    parentDomNode: '.collapse-columns',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    userid: '[data-region=\"userid\"]',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        type: 'submit',\n        save: 'save',\n        cancel: 'cancel'\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    menu: '[data-collapse=\"menu\"]',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends GradebookSearchClass {\n\n    userID = -1;\n    courseID = null;\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID) {\n        return new ColumnSearch(userID, courseID);\n    }\n\n    constructor(userID, courseID) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n\n        this.renderDefault();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.collapsecolumn';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Promise<Array>}\n     */\n    async getDataset() {\n        if (!this.dataset) {\n            const cols = await this.fetchDataset();\n            this.dataset = cols[0].value?.split(',') ?? [];\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        const ds = await this.getDataset();\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            if (idx === -1) {\n                ds.push(desiredToHide);\n            }\n            this.setPreferences();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n\n            const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${desiredToHide}\"]`)];\n            const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${desiredToHide}\"]`)];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            ds.splice(idx, 1);\n\n            this.setPreferences();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n\n            const colNodesToHide = [...document.querySelectorAll(\n                `[data-col=\"${e.target.closest(selectors.colVal)?.dataset.col}\"]`\n            )];\n            const itemIDNodesToHide = [\n                ...document.querySelectorAll(`[data-itemid=\"${e.target.closest(selectors.itemVal)?.dataset.itemid}\"]`)\n            ];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        this.stringMap = new Map([...stringMap, ...stringGradeMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    async filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {function(*): Promise<*>}\n     */\n    fetchDataset() {\n        return Repository.prefFetch(this.userID).then(r => r.preferences).catch(Notification.exception);\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.component = document.querySelector(selectors.component);\n        super.updateNodes();\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            this.updateNodes();\n            await this.renderDropdown();\n        }, 300));\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                $(this.component).dropdown('toggle');\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            const ds = await this.getDataset();\n            checkedItems.forEach((item) => {\n                const idx = ds.indexOf(item.dataset.collapse);\n                ds.splice(idx, 1);\n\n                const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item.dataset.collapse}\"]`)];\n                const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item.dataset.collapse}\"]`)];\n                this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n                this.updateDisplay();\n            });\n            await this.setPreferences();\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n        }, false);\n    }\n\n    /**\n     * When given an array of nodes, switch their classes and values.\n     */\n    updateDisplay() {\n        this.nodes.forEach((element) => {\n            const content = element.querySelector(selectors.content);\n            const menu = element.querySelector(selectors.menu);\n            const expandButton = element.querySelector(selectors.expandbutton);\n\n            if (element.classList.contains('cell')) {\n                // We should always have content but some cells do not contain menus or other actions.\n                if (content.classList.contains('d-none')) {\n                    element.classList.remove('collapsed');\n                    content.classList.remove('d-none');\n                    content.setAttribute('aria-hidden', 'false');\n\n                    menu?.classList.remove('d-none');\n                    menu?.setAttribute('aria-hidden', 'false');\n                    expandButton?.classList.add('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'true');\n                } else {\n                    element.classList.add('collapsed');\n                    content.classList.add('d-none');\n                    content.setAttribute('aria-hidden', 'true');\n\n                    menu?.classList.add('d-none');\n                    menu?.setAttribute('aria-hidden', 'true');\n                    expandButton?.classList.remove('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'false');\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a user performs an action update the users' preferences.\n     */\n    async setPreferences() {\n        const ds = await this.getDataset();\n        const preferences = [{\n            'name': 'grade_report_grader_collapsed_columns',\n            'value': `${ds.join(',')}`,\n            'userid': this.userID\n        }];\n        Repository.prefSet(preferences);\n    }\n\n    /**\n     * Given the set of gradeable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeitems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        await this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        countIndicator.textContent = this.getDatasetSize();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n}\n"],"names":["selectors","type","save","cancel","countIndicator","document","querySelector","ColumnSearch","GradebookSearchClass","userID","courseID","constructor","renderDefault","setComponentSelector","setDropdownSelector","setTriggerSelector","this","dataset","cols","fetchDataset","value","_cols$0$value","split","datasetSize","length","e","ds","getDataset","target","hider","preventDefault","desiredToHide","closest","_e$target$closest","col","_e$target$closest2","itemid","indexOf","push","setPreferences","textContent","getDatasetSize","setMatchedResults","filterDataset","filterMatchDataset","renderDropdown","colNodesToHide","querySelectorAll","itemIDNodesToHide","nodes","updateDisplay","_e$target$closest4","_e$target$closest5","idx","splice","_e$target$closest6","_e$target$closest7","html","js","getMatchedResults","getSearchTerm","getHTMLElements","searchDropdown","filterableData","stringMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","Map","searching","map","s","mapObj","get","key","string","itemname","category","getPreppedSearchTerm","filter","toString","toLowerCase","includes","column","name","displayName","Repository","prefFetch","then","r","preferences","catch","Notification","exception","updateNodes","component","registerInputEvents","searchInput","addEventListener","async","setSearchTerms","clearSearchButton","classList","add","remove","registerClickHandlers","clickHandler","bind","docClickHandler","registerFormEvents","form","submitter","action","dropdown","checkedItems","elements","item","checked","forEach","collapse","element","content","menu","expandButton","contains","setAttribute","join","prefSet","gradeStrings","gradeItems","result","gradeitems","id","userStrings","requiredStrings","stringArray","index"],"mappings":"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"}