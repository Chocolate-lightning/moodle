{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport Notification from 'core/notification';\nimport GradebookSearchClass from 'gradereport_grader/search/search_class';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    trigger: '.collapsecolumn',\n    dropdown: '.collapsecolumndropdown',\n    parentDomNode: '.collapse-columns',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    userid: '[data-region=\"userid\"]',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        type: 'submit',\n        save: 'save',\n        cancel: 'cancel'\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    menu: '[data-collapse=\"menu\"]',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends GradebookSearchClass {\n\n    userID = -1;\n    courseID = null;\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID) {\n        return new ColumnSearch(userID, courseID);\n    }\n\n    constructor(userID, courseID) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n\n        this.renderDefault();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.collapsecolumn';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Promise<Array>}\n     */\n    async getDataset() {\n        if (!this.dataset) {\n            const cols = await this.fetchDataset();\n            this.dataset = cols[0].value?.split(',') ?? [];\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        const ds = await this.getDataset();\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            if (idx === -1) {\n                ds.push(desiredToHide);\n            }\n            this.setPreferences();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n\n            const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${desiredToHide}\"]`)];\n            const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${desiredToHide}\"]`)];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            ds.splice(idx, 1);\n\n            this.setPreferences();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n\n            const colNodesToHide = [...document.querySelectorAll(\n                `[data-col=\"${e.target.closest(selectors.colVal)?.dataset.col}\"]`\n            )];\n            const itemIDNodesToHide = [\n                ...document.querySelectorAll(`[data-itemid=\"${e.target.closest(selectors.itemVal)?.dataset.itemid}\"]`)\n            ];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        this.stringMap = new Map([...stringMap, ...stringGradeMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    async filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {function(*): Promise<*>}\n     */\n    fetchDataset() {\n        return Repository.prefFetch(this.userID).then(r => r.preferences).catch(Notification.exception);\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.component = document.querySelector(selectors.component);\n        super.updateNodes();\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            this.updateNodes();\n            await this.renderDropdown();\n        }, 300));\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                $(this.component).dropdown('toggle');\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            const ds = await this.getDataset();\n            checkedItems.forEach((item) => {\n                const idx = ds.indexOf(item.dataset.collapse);\n                ds.splice(idx, 1);\n\n                const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item.dataset.collapse}\"]`)];\n                const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item.dataset.collapse}\"]`)];\n                this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n                this.updateDisplay();\n            });\n            await this.setPreferences();\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n            // Update the collapsed button pill.\n            countIndicator.textContent = this.getDatasetSize();\n        }, false);\n    }\n\n    /**\n     * When given an array of nodes, switch their classes and values.\n     */\n    updateDisplay() {\n        this.nodes.forEach((element) => {\n            const content = element.querySelector(selectors.content);\n            const menu = element.querySelector(selectors.menu);\n            const expandButton = element.querySelector(selectors.expandbutton);\n\n            if (element.classList.contains('cell')) {\n                // We should always have content but some cells do not contain menus or other actions.\n                if (content.classList.contains('d-none')) {\n                    element.classList.remove('collapsed');\n                    content.classList.remove('d-none');\n                    content.setAttribute('aria-hidden', 'false');\n\n                    menu?.classList.remove('d-none');\n                    menu?.setAttribute('aria-hidden', 'false');\n                    expandButton?.classList.add('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'true');\n                } else {\n                    element.classList.add('collapsed');\n                    content.classList.add('d-none');\n                    content.setAttribute('aria-hidden', 'true');\n\n                    menu?.classList.add('d-none');\n                    menu?.setAttribute('aria-hidden', 'true');\n                    expandButton?.classList.remove('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'false');\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a user performs an action update the users' preferences.\n     */\n    async setPreferences() {\n        const ds = await this.getDataset();\n        const preferences = [{\n            'name': 'grade_report_grader_collapsed_columns',\n            'value': `${ds.join(',')}`,\n            'userid': this.userID\n        }];\n        Repository.prefSet(preferences);\n    }\n\n    /**\n     * Given the set of gradeable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeitems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        await this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        countIndicator.textContent = this.getDatasetSize();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","Repository","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","desc","set","_interopRequireWildcard","_notification","_search_class","_jquery","selectors","type","save","cancel","countIndicator","document","querySelector","ColumnSearch","GradebookSearchClass","static","userID","courseID","constructor","super","this","renderDefault","setComponentSelector","setDropdownSelector","setTriggerSelector","async","dataset","_cols$0$value$split","_cols$0$value","cols","fetchDataset","split","datasetSize","length","e","_e$target$closest3","ds","getDataset","target","hider","_e$target$closest","_e$target$closest2","preventDefault","desiredToHide","closest","col","itemid","indexOf","push","setPreferences","textContent","getDatasetSize","setMatchedResults","filterDataset","filterMatchDataset","renderDropdown","colNodesToHide","querySelectorAll","concat","itemIDNodesToHide","nodes","updateDisplay","_e$target$closest4","_e$target$closest5","_e$target$closest6","_e$target$closest7","idx","splice","html","js","renderForPromise","results","getMatchedResults","searchTerm","getSearchTerm","replaceNodeContents","getHTMLElements","searchDropdown","filterableData","stringMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","Map","searching","map","s","_mapObj$itemname","_mapObj$category","mapObj","string","itemname","category","getPreppedSearchTerm","filter","toString","toLowerCase","includes","column","_column$string","_column$category","name","displayName","prefFetch","then","r","preferences","catch","Notification","exception","updateNodes","component","registerInputEvents","searchInput","addEventListener","debounce","setSearchTerms","clearSearchButton","classList","add","remove","registerClickHandlers","clickHandler","bind","docClickHandler","registerFormEvents","form","submitter","action","$","dropdown","checkedItems","elements","item","checked","forEach","collapse","element","content","menu","expandButton","contains","setAttribute","join","userid","prefSet","gradeStrings","gradeItems","result","gradeitems","id","replaceNode","userStrings","requiredStrings","getStrings","stringArray","index","_exports"],"mappings":"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"}