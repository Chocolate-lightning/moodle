{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport Notification from 'core/notification';\nimport GradebookSearchClass from 'gradereport_grader/search/search_class';\nimport {renderForPromise, replaceNodeContents, replaceNode} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\nimport CustomEvents from \"core/custom_interaction_events\";\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        cancel: 'cancel',\n        save: 'save',\n        checked: 'input[type=\"checkbox\"]:checked'\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    sort: '[data-collapse=\"sort\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    menu: '[data-collapse=\"menu\"]',\n    icons: '[data-collapse=\"gradeicons\"]',\n    count: '[data-collapse=\"count\"]',\n    placeholder: '.collapsecolumndropdown [data-region=\"placeholder\"]',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\n\nexport default class ColumnSearch extends GradebookSearchClass {\n\n    userID = -1;\n    courseID = null;\n    defaultSort = '';\n\n    nodes = [];\n\n    gradeStrings = null;\n    userStrings = null;\n    stringMap = [];\n\n    static init(userID, courseID, defaultSort) {\n        return new ColumnSearch(userID, courseID, defaultSort);\n    }\n\n    constructor(userID, courseID, defaultSort) {\n        super();\n        this.userID = userID;\n        this.courseID = courseID;\n        this.defaultSort = defaultSort;\n\n        this.renderDefault();\n    }\n\n    /**\n     * The overall div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setComponentSelector() {\n        return '.collapse-columns';\n    }\n\n    /**\n     * The dropdown div that contains the searching widget result space.\n     *\n     * @returns {string}\n     */\n    setDropdownSelector() {\n        return '.searchresultitemscontainer';\n    }\n\n    /**\n     * The triggering div that contains the searching widget.\n     *\n     * @returns {string}\n     */\n    setTriggerSelector() {\n        return '.collapsecolumn';\n    }\n\n    /**\n     * Return the dataset that we will be searching upon.\n     *\n     * @returns {Promise<Array>}\n     */\n    async getDataset() {\n        if (!this.dataset) {\n            const cols = await this.fetchDataset();\n            if (cols[0].value === '') {\n                this.dataset = [];\n            } else {\n                this.dataset = cols[0].value?.split(',') ?? [];\n            }\n        }\n        this.datasetSize = this.dataset.length;\n        return this.dataset;\n    }\n\n    /**\n     * Externally defined click function to improve memory handling.\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<void>}\n     */\n    async docClickHandler(e) {\n        const ds = await this.getDataset();\n        if (e.target.dataset.hider === selectors.hider) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            if (idx === -1) {\n                ds.push(desiredToHide);\n            }\n            await this.setPreferences();\n            // Update the collapsed button pill.\n            this.countUpdate();\n\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(ds));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n\n            const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${desiredToHide}\"]`)];\n            const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${desiredToHide}\"]`)];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n\n        if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n            e.preventDefault();\n            const desiredToHide = e.target.closest(selectors.colVal) ?\n                e.target.closest(selectors.colVal)?.dataset.col :\n                e.target.closest(selectors.itemVal)?.dataset.itemid;\n            const idx = ds.indexOf(desiredToHide);\n            ds.splice(idx, 1);\n\n            await this.setPreferences();\n            // Update the collapsed button pill.\n            this.countUpdate();\n\n            const colNodesToHide = [...document.querySelectorAll(\n                `[data-col=\"${e.target.closest(selectors.colVal)?.dataset.col}\"]`\n            )];\n            const itemIDNodesToHide = [\n                ...document.querySelectorAll(`[data-itemid=\"${e.target.closest(selectors.itemVal)?.dataset.itemid}\"]`)\n            ];\n            this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n            this.updateDisplay();\n        }\n    }\n\n    /**\n     * Build the content then replace the node.\n     */\n    async renderDropdown() {\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapseresults', {\n            'results': this.getMatchedResults(),\n            'searchTerm': this.getSearchTerm(),\n        });\n        replaceNodeContents(this.getHTMLElements().searchDropdown, html, js);\n    }\n\n    /**\n     * Dictate to the search component how and what we want to match upon.\n     *\n     * @param {Array} filterableData\n     * @returns {Array} An array of objects containing the system reference and the user readable value.\n     */\n    async filterDataset(filterableData) {\n        const stringUserMap = await this.fetchRequiredUserStrings();\n        const stringGradeMap = await this.fetchRequiredGradeStrings();\n        // Custom user profile fields are not in our string map and need a bit of extra love.\n        const customFieldMap = this.fetchCustomFieldValues();\n        this.stringMap = new Map([...stringGradeMap, ...stringUserMap, ...customFieldMap]);\n\n        const searching = filterableData.map(s => {\n            const mapObj = this.stringMap.get(s);\n            if (mapObj === undefined) {\n                return {\n                    key: s,\n                    string: s,\n                    category: '',\n                };\n            }\n            return {\n                key: s,\n                string: mapObj.itemname ?? this.stringMap.get(s),\n                category: mapObj.category ?? '',\n            };\n        });\n        // Sometimes we just want to show everything.\n        if (this.getPreppedSearchTerm() === '') {\n            return searching;\n        }\n        // Other times we want to actually filter the content.\n        return searching.filter((col) => {\n            return col.string.toString().toLowerCase().includes(this.getPreppedSearchTerm());\n        });\n    }\n\n    /**\n     * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n     *\n     * @returns {Array} The results with the matched fields inserted.\n     */\n    async filterMatchDataset() {\n        this.setMatchedResults(\n            this.getMatchedResults().map((column) => {\n                return {\n                    name: column.key,\n                    displayName: column.string ?? column.key,\n                    category: column.category ?? '',\n                };\n            })\n        );\n    }\n\n    /**\n     * Get the data we will be searching against in this component.\n     *\n     * @returns {function(*): Promise<*>}\n     */\n    fetchDataset() {\n        return Repository.prefFetch(this.userID).then(r => r.preferences).catch(Notification.exception);\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.component = document.querySelector(selectors.component);\n        super.updateNodes();\n    }\n\n    /**\n     * Handle any keyboard inputs.\n     */\n    registerInputEvents() {\n        // Register & handle the text input.\n        this.searchInput.addEventListener('input', debounce(async() => {\n            this.setSearchTerms(this.searchInput.value);\n            // We can also require a set amount of input before search.\n            if (this.searchInput.value === '') {\n                // Hide the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                this.clearSearchButton.classList.remove('d-none');\n            }\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            this.updateNodes();\n            await this.renderDropdown();\n        }, 300));\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Register click events within the component.\n        this.component.addEventListener('click', this.clickHandler.bind(this));\n\n        document.addEventListener('click', this.docClickHandler.bind(this));\n    }\n\n    /**\n     * Handle the form submission within the dropdown.\n     */\n    registerFormEvents() {\n        const form = this.component.querySelector(selectors.formDropdown);\n        const events = [\n            'click',\n            CustomEvents.events.activate,\n            CustomEvents.events.keyboardActivate\n        ];\n        CustomEvents.define(document, events);\n\n        // Register clicks & keyboard form handling.\n        events.forEach((event) => {\n            form.addEventListener(event, (e) => {\n                // Stop Bootstrap from being clever.\n                e.stopPropagation();\n                const submitBtn = form.querySelector(`[data-action=\"${selectors.formItems.save}\"`);\n                if (e.target.closest('input')) {\n                    const checkedCount = Array.from(form.querySelectorAll(selectors.formItems.checked)).length;\n                    // Check if any are clicked or not then change disabled.\n                    submitBtn.disabled = checkedCount > 0 ? false : true;\n\n                }\n            }, false);\n        });\n\n        form.addEventListener('submit', async(e) => {\n            e.preventDefault();\n            if (e.submitter.dataset.action === selectors.formItems.cancel) {\n                $(this.component).dropdown('toggle');\n                return;\n            }\n            // Get the users' checked columns to change.\n            const checkedItems = [...form.elements].filter(item => item.checked);\n            const ds = await this.getDataset();\n            checkedItems.forEach((item) => {\n                const idx = ds.indexOf(item.dataset.collapse);\n                ds.splice(idx, 1);\n\n                const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item.dataset.collapse}\"]`)];\n                const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item.dataset.collapse}\"]`)];\n                this.nodes = [...colNodesToHide, ...itemIDNodesToHide];\n                this.updateDisplay();\n            });\n            await this.setPreferences();\n            // User has given something for us to filter against.\n            this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n            await this.filterMatchDataset();\n            await this.renderDropdown();\n            // Update the collapsed button pill.\n            this.countUpdate();\n        }, false);\n    }\n\n    /**\n     * When given an array of nodes, switch their classes and values.\n     */\n    updateDisplay() {\n        this.nodes.forEach((element) => {\n            const content = element.querySelector(selectors.content);\n            const sort = element.querySelector(selectors.sort);\n            const menu = element.querySelector(selectors.menu);\n            const icons = element.querySelector(selectors.icons);\n            const expandButton = element.querySelector(selectors.expandbutton);\n\n            if (element.classList.contains('cell')) {\n                // The column is actively being sorted, lets reset that and reload the page.\n                if (sort !== null) {\n                    window.location = this.defaultSort;\n                }\n                // We should always have content but some cells do not contain menus or other actions.\n                if (content.classList.contains('d-none')) {\n                    element.classList.remove('collapsed');\n                    content.classList.remove('d-none');\n                    content.setAttribute('aria-hidden', 'false');\n\n                    menu?.classList.remove('d-none');\n                    menu?.setAttribute('aria-hidden', 'false');\n                    icons?.classList.remove('d-none');\n                    icons?.setAttribute('aria-hidden', 'false');\n                    expandButton?.classList.add('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'true');\n                } else {\n                    element.classList.add('collapsed');\n                    content.classList.add('d-none');\n                    content.setAttribute('aria-hidden', 'true');\n\n                    menu?.classList.add('d-none');\n                    menu?.setAttribute('aria-hidden', 'true');\n                    icons?.classList.add('d-none');\n                    icons?.setAttribute('aria-hidden', 'true');\n                    expandButton?.classList.remove('d-none');\n                    expandButton?.setAttribute('aria-hidden', 'false');\n                }\n            }\n        });\n    }\n\n    countUpdate() {\n        countIndicator.textContent = this.getDatasetSize();\n        // TODO: Add SR handling.\n        if (this.getDatasetSize() > 0) {\n            this.component.parentElement.classList.add('d-flex');\n            this.component.parentElement.classList.remove('d-none');\n        } else {\n            this.component.parentElement.classList.remove('d-flex');\n            this.component.parentElement.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Given a user performs an action update the users' preferences.\n     */\n    async setPreferences() {\n        const ds = await this.getDataset();\n        const preferences = [{\n            'name': 'grade_report_grader_collapsed_columns',\n            'value': `${ds.join(',')}`,\n            'userid': this.userID\n        }];\n        Repository.prefSet(preferences);\n    }\n\n    /**\n     * Given the set of gradeable items we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredGradeStrings() {\n        if (!this.gradeStrings) {\n            this.gradeStrings = Repository.gradeItems(this.courseID)\n                .then((result) => new Map(\n                    result.gradeItems.map(key => ([key.id, key]))\n                ));\n        }\n        return this.gradeStrings;\n    }\n\n    /**\n     * Build the content then replace the node by default we want our form to exist.\n     */\n    async renderDefault() {\n        this.setMatchedResults(await this.filterDataset(await this.getDataset()));\n        await this.filterMatchDataset();\n\n        // Update the collapsed button pill.\n        this.countUpdate();\n        const {html, js} = await renderForPromise('gradereport_grader/collapse/collapsebody', {\n            'results': this.getMatchedResults(),\n            'userid': this.userID,\n        });\n        replaceNode(selectors.placeholder, html, js);\n        this.updateNodes();\n\n        // Given we now have the body, we can set up more triggers.\n        this.registerFormEvents();\n        this.registerInputEvents();\n    }\n\n    /**\n     * If we have any custom user profile fields, grab their system & readable names to add to our string map.\n     *\n     * @returns {[string,*][]} An array of associated string arrays ready for our map.\n     */\n    fetchCustomFieldValues() {\n        const customFields = document.querySelectorAll('[data-collapse-name]');\n        // Cast from NodeList to array to grab all the values.\n        return [...customFields].map(field => [field.parentElement.dataset.col, field.dataset.collapseName]);\n    }\n\n    /**\n     * Given the set of profile fields we can possibly search, fetch their strings,\n     * so we can report to screen readers the field that matched.\n     *\n     * @returns {Promise<void>}\n     */\n    fetchRequiredUserStrings() {\n        if (!this.userStrings) {\n            const requiredStrings = [\n                'username',\n                'firstname',\n                'lastname',\n                'email',\n                'city',\n                'country',\n                'department',\n                'institution',\n                'idnumber',\n                'phone1',\n                'phone2',\n            ];\n            this.userStrings = getStrings(requiredStrings.map((key) => ({key})))\n                .then((stringArray) => new Map(\n                    requiredStrings.map((key, index) => ([key, stringArray[index]]))\n                ));\n        }\n        return this.userStrings;\n    }\n}\n"],"names":["selectors","cancel","save","checked","countIndicator","document","querySelector","ColumnSearch","GradebookSearchClass","userID","courseID","defaultSort","constructor","renderDefault","setComponentSelector","setDropdownSelector","setTriggerSelector","this","dataset","cols","fetchDataset","value","_cols$0$value","split","datasetSize","length","e","ds","getDataset","target","hider","preventDefault","desiredToHide","closest","_e$target$closest","col","_e$target$closest2","itemid","indexOf","push","setPreferences","countUpdate","setMatchedResults","filterDataset","filterMatchDataset","renderDropdown","colNodesToHide","querySelectorAll","itemIDNodesToHide","nodes","updateDisplay","_e$target$closest4","_e$target$closest5","idx","splice","_e$target$closest6","_e$target$closest7","html","js","getMatchedResults","getSearchTerm","getHTMLElements","searchDropdown","filterableData","stringUserMap","fetchRequiredUserStrings","stringGradeMap","fetchRequiredGradeStrings","customFieldMap","fetchCustomFieldValues","stringMap","Map","searching","map","s","mapObj","get","undefined","key","string","category","itemname","getPreppedSearchTerm","filter","toString","toLowerCase","includes","column","name","displayName","Repository","prefFetch","then","r","preferences","catch","Notification","exception","updateNodes","component","registerInputEvents","searchInput","addEventListener","async","setSearchTerms","clearSearchButton","classList","add","remove","registerClickHandlers","clickHandler","bind","docClickHandler","registerFormEvents","form","events","CustomEvents","activate","keyboardActivate","define","forEach","event","stopPropagation","submitBtn","checkedCount","Array","from","disabled","submitter","action","dropdown","checkedItems","elements","item","collapse","element","content","sort","menu","icons","expandButton","contains","window","location","setAttribute","textContent","getDatasetSize","parentElement","join","prefSet","gradeStrings","gradeItems","result","id","field","collapseName","userStrings","requiredStrings","stringArray","index"],"mappings":"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"}