{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport Notification from 'core/notification';\n//import GradebookSearchClass from 'gradereport_grader/search/search_class';\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\n\nlet userPrefs;\nlet colsToHide;\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    trigger: '.collapsecolumn',\n    dropdown: '.collapsecolumndropdown',\n    parentDomNode: '.collapse-columns',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    resultContainer: '[data-region=\"search-result-items-container\"]',\n    userid: '[data-region=\"userid\"]',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        type: 'submit',\n        save: 'save',\n        cancel: 'cancel'\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    menu: '[data-collapse=\"menu\"]',\n    count: '[data-collapse=\"count\"]',\n};\n\nconst countIndicator = document.querySelector(selectors.count);\nlet component;\nlet searchInput;\nlet clearSearchButton;\nlet resultContainer;\nlet userID;\n\nconst selectorUpdate = () => {\n    component = document.querySelector(selectors.component);\n    searchInput = component.querySelector(selectors.input);\n    clearSearchButton = component.querySelector(selectors.clearSearch);\n    resultContainer = component.querySelector(selectors.resultContainer);\n    userID = component.querySelector(selectors.userid).dataset.userid;\n};\n\nlet stringMap = [];\n\n/**\n * Given the set of profile fields we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @returns {Promise<void>}\n */\nconst fetchRequiredUserStrings = () => {\n    const requiredStrings = [\n        'username',\n        'firstname',\n        'lastname',\n        'email',\n        'city',\n        'country',\n        'department',\n        'institution',\n        'idnumber',\n        'phone1',\n        'phone2',\n    ];\n    return getStrings(requiredStrings.map((key) => ({key})))\n        .then((stringArray) => new Map(\n            requiredStrings.map((key, index) => ([key, stringArray[index]]))\n        ));\n};\n\n/**\n * Given the set of gradeable items we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @param {number} courseID Get the gradeable item names from within the course.\n * @returns {Promise<void>}\n */\nconst fetchRequiredGradeStrings = (courseID) => {\n     return Repository.gradeItems(courseID)\n        .then((result) => new Map(\n            result.gradeitems.map(key => ([key.id, key]))\n        ));\n};\n\n/**\n * Given a user performs an action update the users' preferences.\n */\nconst setPreferences = () => {\n    const preferences = [{\n        'name': 'grade_report_grader_collapsed_columns',\n        'value': `${colsToHide.join(',')}`,\n        'userid': userID\n    }];\n    Repository.prefSet(preferences);\n};\n\n/**\n * When given an array of nodes, switch their classes and values.\n *\n * @param {array} nodes The nodes to manipulate within the grader report.\n */\nconst updateDisplay = (nodes) => {\n    nodes.forEach((element) => {\n        const content = element.querySelector(selectors.content);\n        const menu = element.querySelector(selectors.menu);\n        const expandButton = element.querySelector(selectors.expandbutton);\n\n        if (element.classList.contains('cell')) {\n            // We should always have content but some cells do not contain menus or other actions.\n            if (content.classList.contains('d-none')) {\n                element.classList.remove('collapsed');\n                content.classList.remove('d-none');\n                content.setAttribute('aria-hidden', 'false');\n\n                menu?.classList.remove('d-none');\n                menu?.setAttribute('aria-hidden', 'false');\n                expandButton?.classList.add('d-none');\n                expandButton?.setAttribute('aria-hidden', 'true');\n            } else {\n                element.classList.add('collapsed');\n                content.classList.add('d-none');\n                content.setAttribute('aria-hidden', 'true');\n\n                menu?.classList.add('d-none');\n                menu?.setAttribute('aria-hidden', 'true');\n                expandButton?.classList.remove('d-none');\n                expandButton?.setAttribute('aria-hidden', 'false');\n            }\n        }\n    });\n};\n\n/**\n * Handle the form submission within the dropdown.\n */\nconst registerFormEvents = () => {\n    const form = component.querySelector(selectors.formDropdown);\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        if (e.submitter.dataset.action === selectors.formItems.cancel) {\n            $(component).dropdown('toggle');\n            return;\n        }\n        // Get the users' checked columns to change.\n        const checkedItems = [...form.elements].filter(item => item.checked);\n        checkedItems.forEach((item) => {\n            const idx = colsToHide.indexOf(item.dataset.collapse);\n            colsToHide.splice(idx, 1);\n\n            const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item.dataset.collapse}\"]`)];\n            const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item.dataset.collapse}\"]`)];\n            updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n        });\n        await setPreferences();\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n        // Update the collapsed button pill.\n        countIndicator.textContent = colsToHide.length;\n    }, false);\n};\n\n/**\n * Externally defined click function to improve memory handling.\n *\n * @param {HTMLElement} e\n * @returns {Promise<void>}\n */\nconst clickFunc = async(e) => {\n    if (e.target.dataset.hider === selectors.hider) {\n        e.preventDefault();\n        const desiredToHide = e.target.closest(selectors.colVal) ?\n            e.target.closest(selectors.colVal)?.dataset.col :\n            e.target.closest(selectors.itemVal)?.dataset.itemid;\n        const idx = colsToHide.indexOf(desiredToHide);\n        if (idx === -1) {\n            colsToHide.push(desiredToHide);\n        }\n        setPreferences();\n        // Update the collapsed button pill.\n        countIndicator.textContent = colsToHide.length;\n\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${desiredToHide}\"]`)];\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${desiredToHide}\"]`)];\n        updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n    }\n\n    if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n        const desiredToHide = e.target.closest(selectors.colVal) ?\n            e.target.closest(selectors.colVal)?.dataset.col :\n            e.target.closest(selectors.itemVal)?.dataset.itemid;\n        const idx = colsToHide.indexOf(desiredToHide);\n        colsToHide.splice(idx, 1);\n\n        setPreferences();\n        // Update the collapsed button pill.\n        countIndicator.textContent = colsToHide.length;\n\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${e.target.closest(selectors.colVal)?.dataset.col}\"]`)];\n        const itemIDNodesToHide = [\n            ...document.querySelectorAll(`[data-itemid=\"${e.target.closest(selectors.itemVal)?.dataset.itemid}\"]`)\n        ];\n        updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n    }\n};\n\n/**\n * Handle any click events.\n */\nconst registerListenerEvents = () => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n    CustomEvents.define(document, events);\n\n    // Register events.\n    events.forEach((event) => {\n        document.addEventListener(event, e => clickFunc(e));\n    });\n};\n\n/**\n * Handle any keyboard inputs.\n */\nconst registerInputEvents = () => {\n    // Register & handle the text input.\n    searchInput.addEventListener('input', debounce(async() => {\n        // We can also require a set amount of input before search.\n        if (searchInput.value === '') {\n            // Hide the \"clear\" search button in the search bar.\n            clearSearchButton.classList.add('d-none');\n        } else {\n            // Display the \"clear\" search button in the search bar.\n            clearSearchButton.classList.remove('d-none');\n        }\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n    }, 300));\n};\n\n/**\n * Entry point to create the column collapsing dropdown.\n *\n * @param {number} userID The current users' ID.\n * @param {number} courseID The ID of the course this report is for.\n * @returns {Promise<void>}\n */\nexport const init = async(userID, courseID) => {\n    const pendingPromise = new Pending();\n\n    const gradeItem = await fetchRequiredGradeStrings(courseID);\n    const userStrings = await fetchRequiredUserStrings();\n    // Merge the string maps.\n    stringMap = new Map([...userStrings, ...gradeItem]);\n\n    userPrefs = await fetchFilterbleData(userID);\n    // Optionally chain the split and nullishly check if the array has contents.\n    colsToHide = userPrefs[0].value?.split(',') ?? [];\n\n    await renderDefault(filterMatchIndicator(filter(colsToHide, '')), userID);\n    selectorUpdate();\n\n    registerListenerEvents();\n    registerInputEvents();\n    registerFormEvents();\n\n    //new GradebookSearchClass(fetchFilterableData, filter, filterMatchIndicator);\n\n    pendingPromise.resolve();\n};\n\n//const fetchFilterableData = () => colsToHide;\n/**\n * Get the data we will be searching against in this component.\n *\n * @param {Null|Number} userID The potential ID of the user whishing to update their collapsed columns.\n * @returns {function(*): Promise<*>}\n */\nconst fetchFilterbleData = (userID) => {\n    return Repository.prefFetch(userID).then(r => {\n        return r.preferences;\n    }).catch(Notification.exception);\n};\n\n/**\n * Dictate to the search component how and what we want to match upon.\n *\n * @param {Array} dataset All of the columns to search within.\n * @param {String} searchTerm The term that the user is searching for.\n * @returns {Array} An array of objects containing the system reference and the user readable value.\n */\nconst filter = (dataset, searchTerm = '') => {\n    const preppedSearchTerm = searchTerm.toLowerCase();\n    const searching = dataset.map(s => {\n        const mapObj = stringMap.get(s);\n        return {\n            key: s,\n            string: mapObj['itemname'] ?? stringMap.get(s),\n            category: mapObj['category'] ?? '',\n        };\n    });\n    // Sometimes we just want to show everything.\n    if (preppedSearchTerm === '') {\n        return searching;\n    }\n    // Other times we want to actually filter the content.\n    return searching.filter((col) => {\n        return col.string.toString().toLowerCase().includes(preppedSearchTerm);\n    });\n};\n\n/**\n * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n *\n * @param {Array} matchedResultsSubset The results we will render out.\n * @returns {Array} The results with the matched fields inserted.\n */\nconst filterMatchIndicator = (matchedResultsSubset) => {\n    return matchedResultsSubset.map((column) => {\n        return {\n            name: column.key,\n            displayName: column.string ?? column.key,\n            category: column.category ?? '',\n        };\n    });\n};\n\n/**\n * Build the content then replace the node.\n *\n * @param {Array} results The results of the dataset having its' matching indicators applied.\n * @param {Array} dataset All of the columns to search within.\n * @param {int} userID ID of the course to fetch the columns of.\n * @param {HTMLElement} resultContainer Where we will be updating the users' view.\n * @param {String} searchTerm The term that the user is searching for.\n * @returns {Promise<void>}\n */\nconst render = async(results, dataset, userID, resultContainer, searchTerm) => {\n    const {html, js} = await Templates.renderForPromise('gradereport_grader/collapse/collapseresults', {\n        'results': results,\n        'searchTerm': searchTerm,\n    });\n    Templates.replaceNodeContents(resultContainer, html, js);\n};\n\n/**\n * Build the content then replace the node in the general zero state.\n *\n * @param {Array} filtermatchResults The results of the dataset having its' matching indicators applied.\n * @param {int} userID ID of the course to fetch the columns of.\n * @returns {Promise<void>}\n */\nconst renderDefault = async(filtermatchResults, userID) => {\n    // Update the collapsed button pill.\n    countIndicator.textContent = colsToHide.length;\n    const {html, js} = await Templates.renderForPromise('gradereport_grader/collapse/collapsebody', {\n        'results': filtermatchResults,\n        'userid': userID,\n    });\n    Templates.replaceNode('.collapsecolumndropdown [data-region=\"placeholder\"]', html, js);\n};\n"],"names":["userPrefs","colsToHide","selectors","type","save","cancel","countIndicator","document","querySelector","component","searchInput","clearSearchButton","resultContainer","userID","selectorUpdate","dataset","userid","stringMap","setPreferences","preferences","join","Repository","prefSet","updateDisplay","nodes","forEach","element","content","menu","expandButton","classList","contains","remove","setAttribute","add","registerFormEvents","form","addEventListener","async","e","preventDefault","submitter","action","dropdown","elements","filter","item","checked","idx","indexOf","collapse","splice","colNodesToHide","querySelectorAll","itemIDNodesToHide","filteredResults","value","filtermatchResults","filterMatchIndicator","render","textContent","length","registerListenerEvents","events","CustomEvents","activate","keyboardActivate","define","event","target","hider","desiredToHide","closest","_e$target$closest","col","_e$target$closest2","itemid","push","_e$target$closest4","_e$target$closest5","_e$target$closest6","_e$target$closest7","clickFunc","registerInputEvents","courseID","pendingPromise","Pending","gradeItem","gradeItems","then","result","Map","gradeitems","map","key","id","fetchRequiredGradeStrings","userStrings","requiredStrings","stringArray","index","fetchRequiredUserStrings","fetchFilterbleData","_userPrefs$0$value","split","renderDefault","resolve","prefFetch","r","catch","Notification","exception","searchTerm","preppedSearchTerm","toLowerCase","searching","s","mapObj","get","string","category","toString","includes","matchedResultsSubset","column","name","displayName","results","html","js","Templates","renderForPromise","replaceNodeContents","replaceNode"],"mappings":"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"}