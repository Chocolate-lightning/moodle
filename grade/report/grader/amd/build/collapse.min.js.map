{"version":3,"file":"collapse.min.js","sources":["../src/collapse.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allow the user to show and hide columns of the report at will.\n *\n * @module    gradereport_grader/collapse\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport * as Repository from 'gradereport_grader/collapse/repository';\nimport Notification from 'core/notification';\n//import {gradebookSearchClass} from 'gradereport_grader/search/search_class';\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport $ from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\n\nlet userPrefs;\nlet colsToHide;\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    component: '.collapse-columns',\n    trigger: '.collapsecolumn',\n    dropdown: '.collapsecolumndropdown',\n    parentDomNode: '.collapse-columns',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    resultContainer: '[data-region=\"search-result-items-container\"]',\n    userid: '[data-region=\"userid\"]',\n    formDropdown: '.columnsdropdownform',\n    formItems: {\n        type: 'submit',\n        save: 'save',\n        cancel: 'cancel'\n    },\n    hider: 'hide',\n    expand: 'expand',\n    colVal: '[data-col]',\n    itemVal: '[data-itemid]',\n    content: '[data-collapse=\"content\"]',\n    expandbutton: '[data-collapse=\"expandbutton\"]',\n    menu: '[data-collapse=\"menu\"]',\n};\n\nlet component;\nlet searchInput;\nlet clearSearchButton;\nlet resultContainer;\nlet userID;\n\nconst selectorUpdate = () => {\n    component = document.querySelector(selectors.component);\n    searchInput = component.querySelector(selectors.input);\n    clearSearchButton = component.querySelector(selectors.clearSearch);\n    resultContainer = component.querySelector(selectors.resultContainer);\n    userID = component.querySelector(selectors.userid).dataset.userid;\n};\n\nlet stringMap = [];\n\n/**\n * Given the set of profile fields we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @returns {Promise<void>}\n */\nconst fetchRequiredUserStrings = () => {\n    const requiredStrings = [\n        'username',\n        'firstname',\n        'lastname',\n        'email',\n        'city',\n        'country',\n        'department',\n        'institution',\n        'idnumber',\n        'phone1',\n        'phone2',\n    ];\n    return getStrings(requiredStrings.map((key) => ({key})))\n        .then((stringArray) => new Map(\n            requiredStrings.map((key, index) => ([key, stringArray[index]]))\n        ));\n};\n\n/**\n * Given the set of gradeable items we can possibly search, fetch their strings,\n * so we can report to screen readers the field that matched.\n *\n * @param {number} courseID Get the gradeable item names from within the course.\n * @returns {Promise<void>}\n */\nconst fetchRequiredGradeStrings = (courseID) => {\n     return Repository.gradeItems(courseID)\n        .then((result) => new Map(\n            result.gradeitems.map(key => ([key.id, key.itemname]))\n        ));\n};\n\n/**\n * Given a user performs an action update the users' preferences.\n */\nconst setPreferences = () => {\n    const preferences = [{\n        'name': 'grade_report_grader_collapsed_columns',\n        'value': `${colsToHide.join(',')}`,\n        'userid': userID\n    }];\n    Repository.prefSet(preferences);\n};\n\n/**\n * When given an array of nodes, switch their classes and values.\n *\n * @param {array} nodes The nodes to manipulate within the grader report.\n */\nconst updateDisplay = (nodes) => {\n    nodes.forEach((element) => {\n        const content = element.querySelector(selectors.content);\n        const menu = element.querySelector(selectors.menu);\n        const expandButton = element.querySelector(selectors.expandbutton);\n\n        if (element.classList.contains('cell')) {\n            // We should always have content but some cells do not contain menus or other actions.\n            if (content.classList.contains('d-none')) {\n                element.classList.remove('collapsed');\n                content.classList.remove('d-none');\n                content.setAttribute('aria-hidden', 'false');\n\n                menu?.classList.remove('d-none');\n                menu?.setAttribute('aria-hidden', 'false');\n                expandButton?.classList.add('d-none');\n                expandButton?.setAttribute('aria-hidden', 'true');\n            } else {\n                element.classList.add('collapsed');\n                content.classList.add('d-none');\n                content.setAttribute('aria-hidden', 'true');\n\n                menu?.classList.add('d-none');\n                menu?.setAttribute('aria-hidden', 'true');\n                expandButton?.classList.remove('d-none');\n                expandButton?.setAttribute('aria-hidden', 'false');\n            }\n        }\n    });\n};\n\n/**\n * Handle the form submission within the dropdown.\n */\nconst registerFormEvents = () => {\n    const form = component.querySelector(selectors.formDropdown);\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        if (e.submitter.dataset.action === selectors.formItems.cancel) {\n            $(component).dropdown('toggle');\n            return;\n        }\n        // Get the users' checked columns to change.\n        const checkedItems = [...form.elements].filter(item => item.checked);\n        checkedItems.forEach((item) => {\n            const idx = colsToHide.indexOf(item.dataset.collapse);\n            colsToHide.splice(idx, 1);\n\n            const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${item.dataset.collapse}\"]`)];\n            const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${item.dataset.collapse}\"]`)];\n            updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n        });\n        await setPreferences();\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n    }, false);\n};\n\n/**\n * Externally defined click function to improve memory handling.\n *\n * @param {HTMLElement} e\n * @returns {Promise<void>}\n */\nconst clickFunc = async(e) => {\n    if (e.target.dataset.hider === selectors.hider) {\n        e.preventDefault();\n        const desiredToHide = e.target.closest(selectors.colVal) ?\n            e.target.closest(selectors.colVal)?.dataset.col :\n            e.target.closest(selectors.itemVal)?.dataset.itemid;\n        const idx = colsToHide.indexOf(desiredToHide);\n        if (idx === -1) {\n            colsToHide.push(desiredToHide);\n        }\n        setPreferences();\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${desiredToHide}\"]`)];\n        const itemIDNodesToHide = [...document.querySelectorAll(`[data-itemid=\"${desiredToHide}\"]`)];\n        updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n    }\n\n    if (e.target.closest('button')?.dataset.hider === selectors.expand) {\n        const desiredToHide = e.target.closest(selectors.colVal) ?\n            e.target.closest(selectors.colVal)?.dataset.col :\n            e.target.closest(selectors.itemVal)?.dataset.itemid;\n        const idx = colsToHide.indexOf(desiredToHide);\n        colsToHide.splice(idx, 1);\n\n        setPreferences();\n\n        const colNodesToHide = [...document.querySelectorAll(`[data-col=\"${e.target.closest(selectors.colVal)?.dataset.col}\"]`)];\n        const itemIDNodesToHide = [\n            ...document.querySelectorAll(`[data-itemid=\"${e.target.closest(selectors.itemVal)?.dataset.itemid}\"]`)\n        ];\n        updateDisplay([...colNodesToHide, ...itemIDNodesToHide]);\n    }\n};\n\n/**\n * Handle any click events.\n */\nconst registerListenerEvents = () => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n    CustomEvents.define(document, events);\n\n    // Register events.\n    events.forEach((event) => {\n        document.addEventListener(event, e => clickFunc(e));\n    });\n};\n\n/**\n * Handle any keyboard inputs.\n */\nconst registerInputEvents = () => {\n    // Register & handle the text input.\n    searchInput.addEventListener('input', debounce(async() => {\n        // We can also require a set amount of input before search.\n        if (searchInput.value === '') {\n            // Hide the \"clear\" search button in the search bar.\n            clearSearchButton.classList.add('d-none');\n        } else {\n            // Display the \"clear\" search button in the search bar.\n            clearSearchButton.classList.remove('d-none');\n        }\n        const filteredResults = filter(colsToHide, searchInput.value);\n        const filtermatchResults = filterMatchIndicator(filteredResults);\n        await render(filtermatchResults, colsToHide, userID, resultContainer, searchInput.value);\n    }, 300));\n};\n\n/**\n * Entry point to create the column collapsing dropdown.\n *\n * @param {number} userID The current users' ID.\n * @param {number} courseID The ID of the course this report is for.\n * @returns {Promise<void>}\n */\nexport const init = async(userID, courseID) => {\n    const pendingPromise = new Pending();\n\n    const gradeItem = await fetchRequiredGradeStrings(courseID);\n    const userStrings = await fetchRequiredUserStrings();\n    // Merge the string maps.\n    stringMap = new Map([...userStrings, ...gradeItem]);\n    //new gradebookSearchClass(fetchFilterbleData(), filter(), filterMatchIndicator(), render());\n\n    userPrefs = await fetchFilterbleData(userID);\n    // Optionally chain the split and nullishly check if the array has contents.\n    colsToHide = userPrefs[0].value?.split(',') ?? [];\n\n    await renderDefault(filterMatchIndicator(filter(colsToHide, '')), userID);\n    selectorUpdate();\n\n    registerListenerEvents();\n    registerInputEvents();\n    registerFormEvents();\n\n    pendingPromise.resolve();\n};\n\n/**\n * Get the data we will be searching against in this component.\n *\n * @param {Null|Number} userID The potential ID of the user whishing to update their collapsed columns.\n * @returns {function(*): Promise<*>}\n */\nconst fetchFilterbleData = (userID) => {\n    return Repository.prefFetch(userID).then(r => {\n        return r.preferences;\n    }).catch(Notification.exception);\n};\n\n/**\n * Dictate to the search component how and what we want to match upon.\n *\n * @param {Array} dataset All of the columns to search within.\n * @param {String} searchTerm The term that the user is searching for.\n * @returns {Array} An array of objects containing the system reference and the user readable value.\n */\nconst filter = (dataset, searchTerm = '') => {\n    const preppedSearchTerm = searchTerm.toLowerCase();\n    const searching = dataset.map(s => {\n        return {\n            key: s,\n            string: stringMap.get(s) ?? s,\n            //category: dataset.get(s)?.category\n        };\n    });\n    // Sometimes we just want to show everything.\n    if (preppedSearchTerm === '') {\n        return searching;\n    }\n    // Other times we want to actually filter the content.\n    return searching.filter((col) => {\n        return col.string.toString().toLowerCase().includes(preppedSearchTerm);\n    });\n};\n\n/**\n * Given we have a subset of the dataset, set the field that we matched upon to inform the end user.\n *\n * @param {Array} matchedResultsSubset The results we will render out.\n * @returns {Array} The results with the matched fields inserted.\n */\nconst filterMatchIndicator = (matchedResultsSubset) => {\n    return matchedResultsSubset.map((column) => {\n        return {\n            name: column.key,\n            displayName: column.string ?? column.key,\n        };\n    });\n};\n\n/**\n * Build the content then replace the node.\n *\n * @param {Array} results The results of the dataset having its' matching indicators applied.\n * @param {Array} dataset All of the columns to search within.\n * @param {int} userID ID of the course to fetch the columns of.\n * @param {HTMLElement} resultContainer Where we will be updating the users' view.\n * @param {String} searchTerm The term that the user is searching for.\n * @returns {Promise<void>}\n */\nconst render = async(results, dataset, userID, resultContainer, searchTerm) => {\n    const {html, js} = await Templates.renderForPromise('gradereport_grader/collapse/collapseresults', {\n        'results': results,\n        'searchTerm': searchTerm,\n    });\n    Templates.replaceNodeContents(resultContainer, html, js);\n};\n\n/**\n * Build the content then replace the node in the general zero state.\n *\n * @param {Array} filtermatchResults The results of the dataset having its' matching indicators applied.\n * @param {int} userID ID of the course to fetch the columns of.\n * @returns {Promise<void>}\n */\nconst renderDefault = async(filtermatchResults, userID) => {\n    const {html, js} = await Templates.renderForPromise('gradereport_grader/collapse/collapsebody', {\n        'results': filtermatchResults,\n        'userid': userID,\n    });\n    Templates.replaceNode('.collapsecolumndropdown [data-region=\"placeholder\"]', html, js);\n};\n"],"names":["userPrefs","colsToHide","selectors","type","save","cancel","component","searchInput","clearSearchButton","resultContainer","userID","selectorUpdate","document","querySelector","dataset","userid","stringMap","setPreferences","preferences","join","Repository","prefSet","updateDisplay","nodes","forEach","element","content","menu","expandButton","classList","contains","remove","setAttribute","add","registerFormEvents","form","addEventListener","async","e","preventDefault","submitter","action","dropdown","elements","filter","item","checked","idx","indexOf","collapse","splice","colNodesToHide","querySelectorAll","itemIDNodesToHide","filteredResults","value","filtermatchResults","filterMatchIndicator","render","registerListenerEvents","events","CustomEvents","activate","keyboardActivate","define","event","target","hider","desiredToHide","closest","_e$target$closest","col","_e$target$closest2","itemid","push","_e$target$closest4","_e$target$closest5","_e$target$closest6","_e$target$closest7","clickFunc","registerInputEvents","courseID","pendingPromise","Pending","gradeItem","gradeItems","then","result","Map","gradeitems","map","key","id","itemname","fetchRequiredGradeStrings","userStrings","requiredStrings","stringArray","index","fetchRequiredUserStrings","fetchFilterbleData","_userPrefs$0$value","split","renderDefault","resolve","prefFetch","r","catch","Notification","exception","searchTerm","preppedSearchTerm","toLowerCase","searching","s","string","get","toString","includes","matchedResultsSubset","column","name","displayName","results","html","js","Templates","renderForPromise","replaceNodeContents","replaceNode"],"mappings":"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"}