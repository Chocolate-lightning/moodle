{"version":3,"file":"repository.min.js","sources":["../../src/collapse/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A repo for the collapsing in the grader report.\n *\n * @module    gradereport_grader/collapse/repository\n * @copyright 2022 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ajax from 'core/ajax';\n\n/**\n * Given a user ID, we want to fetch the users' report preferences.\n *\n * @method userFetch\n * @param {int} userID ID of the user to fetch the preferences of.\n * @return {object} jQuery promise\n */\nexport const prefFetch = (userID) => {\n    const request = {\n        methodname: 'core_user_get_user_preferences',\n        args: {\n            userid: userID,\n            name: 'grade_report_grader_collapsed_columns',\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Given a preference array of objects, we want to set the users' report preferences.\n *\n * @method prefSet\n * @param {array} prefs Array of objects containing the preferences we need to update.\n * @return {object} jQuery promise\n */\nexport const prefSet = (prefs) => {\n    var request = {\n        methodname: 'core_user_set_user_preferences',\n        args: {\n            preferences: prefs\n        }\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Fetch all the information on gradeitems we'll need in the column collapser.\n *\n * @method gradeItems\n * @param {Number} courseid What course to fetch the gradeitems for\n * @return {object} jQuery promise\n */\nexport const gradeItems = (courseid) => {\n    const request = {\n        methodname: 'core_grades_get_gradeitems',\n        args: {\n            courseid: courseid,\n        },\n    };\n    return ajax.call([request])[0];\n};\n"],"names":["userID","request","methodname","args","userid","name","ajax","call","prefs","preferences","courseid"],"mappings":";;;;;;;mMAgC0BA,eAChBC,QAAU,CACZC,WAAY,iCACZC,KAAM,CACFC,OAAQJ,OACRK,KAAM,iDAGPC,cAAKC,KAAK,CAACN,UAAU,qBAURO,YAChBP,QAAU,CACVC,WAAY,iCACZC,KAAM,CACFM,YAAaD,eAGdF,cAAKC,KAAK,CAACN,UAAU,wBAULS,iBACjBT,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFO,SAAUA,kBAGXJ,cAAKC,KAAK,CAACN,UAAU"}