{"version":3,"file":"move.min.js","sources":["../../../../src/bulkactions/edit/tree/move.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Class that defines the bulk move action in the gradebook setup page.\n *\n * @module     core_grades/bulkactions/edit/tree/move\n * @copyright  2023 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BulkAction from 'core/bulkactions/bulk_action';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport $ from 'jquery';\nimport ModalEvents from 'core/modal_events';\n\n/** @constant {Object} The object containing the relevant selectors. */\nconst Selectors = {\n    editTreeForm: '#gradetreeform',\n    gradeTreeSection: '#destination-selector [role=\"tree\"] [data-for=\"sectionnode\"][role=\"treeitem\"]',\n    gradeTreeItem: '#destination-selector [role=\"tree\"] [role=\"treeitem\"]',\n    gradeTreeSectionVisibilityToggle: '#destination-selector [role=\"tree\"] .collapse-list-link',\n    gradeTreeSectionContent: '#destination-selector [role=\"tree\"] .collapse-list-item-content',\n    bulkMoveInput: 'input[name=\"bulkmove\"]',\n    bulkMoveAfterInput: 'input[name=\"moveafter\"]'\n};\n\nexport default class GradebookEditTreeBulkMove extends BulkAction {\n\n    /** @property {int|null} courseID The course ID. */\n    courseID = null;\n\n    /** @property {Object|null} modal The modal object. */\n    modal = null;\n\n    /** @property {Array|null} visibleGradeTreeItems The array containing the visible grade tree item elements. */\n    visibleGradeTreeItems = null;\n\n    /** @property {HTMLElement|null} selectedGradeTreeItem The selected grade tree item element. */\n    selectedGradeTreeItem = null;\n\n    /** @property {string|null} gradeTree The grade tree HTML. */\n    gradeTree = null;\n\n    /**\n     * The class constructor.\n     *\n     * @param {int} courseID The course ID.\n     * @returns {void}\n     */\n    constructor(courseID) {\n        super();\n        this.courseID = courseID;\n    }\n\n    /**\n     * Defines the selector of the element that triggers the bulk move action.\n     *\n     * @returns {string}\n     */\n    getBulkActionTriggerSelector() {\n        return 'button[data-action=\"move\"]';\n    }\n\n    /**\n     * Defines the behavior once the bulk move action is triggered.\n     *\n     * @method executeBulkAction\n     * @returns {void}\n     */\n    async triggerBulkAction() {\n        this.modal = await this.showModal();\n        this.setVisibleGradeTreeItems();\n    }\n\n    /**\n     * Renders the bulk move action trigger element.\n     *\n     * @method renderBulkActionTrigger\n     * @returns {Promise}\n     */\n    async renderBulkActionTrigger() {\n        return Templates.render('core_grades/bulkactions/edit/tree/bulk_move_trigger', {});\n    }\n\n    /**\n     * Register custom event listeners.\n     *\n     * @method registerCustomClickListenerEvents\n     * @returns {void}\n     */\n    registerCustomListenerEvents() {\n        // Click event listeners.\n        document.addEventListener('click', (e) => {\n            // If the click event is targeting a grade tree item element.\n            if (e.target.closest(Selectors.gradeTreeItem) &&\n                    !e.target.closest(Selectors.gradeTreeSectionVisibilityToggle)) {\n                // Select the grade tree item and enable the save button.\n                this.selectGradeTreeItem(e.target.closest(Selectors.gradeTreeItem));\n                this.modal.setButtonDisabled('save', false);\n            }\n        });\n\n        // Reset the stored state of the current visible grade tree items once a grade category section is fully\n        // shown or collapsed.\n        $(Selectors.gradeTreeSectionContent).on('hidden.bs.collapse shown.bs.collapse', () => {\n            this.setVisibleGradeTreeItems();\n        });\n\n        // Keyboard event listeners.\n        document.addEventListener('keydown', (e) => {\n            const currentGradeTreeItem = e.target.closest(Selectors.gradeTreeItem);\n            // If the key event is targeting a grade tree item element.\n            if (currentGradeTreeItem) {\n                switch (e.key) {\n                    case 'ArrowRight':\n                        // Make sure that the element is a grade category section.\n                        if (currentGradeTreeItem.matches(Selectors.gradeTreeSection)) {\n                            // Expand the category section.\n                            this.collapseGradeCategory(currentGradeTreeItem, false);\n                        }\n                        break;\n                    case 'ArrowLeft':\n                        // Make sure that the element is a grade category section.\n                        if (currentGradeTreeItem.matches(Selectors.gradeTreeSection)) {\n                            // Collapse the category section.\n                            this.collapseGradeCategory(currentGradeTreeItem, true);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        this.moveToNextGradeTreeItem(currentGradeTreeItem);\n                        break;\n                    case 'ArrowUp':\n                        this.moveToPreviousGradeTreeItem(currentGradeTreeItem);\n                        break;\n                    case 'Home':\n                        this.moveToFirstGradeTreeItem();\n                        break;\n                    case 'End':\n                        this.moveToLastGradeTreeItem();\n                        break;\n                    case 'Enter':\n                    case ' ':\n                        this.selectGradeTreeItem(currentGradeTreeItem);\n                        this.modal.setButtonDisabled('save', false);\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * Fetch the grade tree structure for the current course.\n     *\n     * @method fetchGradeTree\n     * @returns {Promise}\n     */\n    fetchGradeTree() {\n        const request = {\n            methodname: 'core_grades_get_grade_tree',\n            args: {\n                courseid: this.courseID,\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n\n    /**\n     * Show the bulk move modal.\n     *\n     * @method showModal\n     * @returns {Promise} The modal promise\n     */\n    async showModal() {\n        // We need to fetch the grade tree structure only once.\n        if (this.gradeTree === null) {\n            this.gradeTree = await this.fetchGradeTree();\n        }\n\n        return ModalFactory.create({\n            title: await getString('movesitems', 'grades'),\n            body: await Templates.render('core_grades/bulkactions/edit/tree/bulk_move_grade_tree', JSON.parse(this.gradeTree)),\n            buttons: {\n                save: await getString('move')\n            },\n            large: true,\n            type: ModalFactory.types.SAVE_CANCEL,\n        }).then(modal => {\n            modal.show();\n            // Disable the 'Move' action button until something is selected.\n            modal.setButtonDisabled('save', true);\n            // Make the top grade tree section node focusable.\n            modal.getBody()[0].querySelector(Selectors.gradeTreeSection).tabIndex = 0;\n            // Define the behavior of the modal's 'Move' action button.\n            modal.getRoot().on(ModalEvents.save, () => {\n                // Set the relevant form values.\n                document.querySelector(Selectors.bulkMoveInput).value = 1;\n                document.querySelector(Selectors.bulkMoveAfterInput).value = this.selectedGradeTreeItem.dataset.id;\n                // Submit the form.\n                document.querySelector(Selectors.editTreeForm).submit();\n            });\n            // Destroy the modal once it is hidden.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.destroy();\n            });\n            return modal;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Collapse or expand a grade category section.\n     *\n     * @method collapseGradeCategory\n     * @param {HTMLElement} gradeCategorySection The grade category section element.\n     * @param {Boolean} setCollapsed Whether the grade category section should be collapsed or not.\n     * @returns {void}\n     */\n    collapseGradeCategory(gradeCategorySection, setCollapsed) {\n        const sectionContent = gradeCategorySection.querySelector(Selectors.gradeTreeSectionContent);\n        if (setCollapsed) {\n            $(sectionContent).collapse('hide');\n        } else {\n            $(sectionContent).collapse('show');\n        }\n    }\n\n    /**\n     * Move the focus to the next grade tree item element.\n     *\n     * @method moveToNextGradeTreeItem\n     * @param {HTMLElement} gradeTreeItem The grade tree item element.\n     * @returns {void}\n     */\n    moveToNextGradeTreeItem(gradeTreeItem) {\n        const currentGradeTreeItemIndex = this.visibleGradeTreeItems.findIndex(item => item === gradeTreeItem);\n        this.focusGradeTreeItem(this.visibleGradeTreeItems[currentGradeTreeItemIndex + 1]);\n    }\n\n    /**\n     * Move the focus to the previous grade tree item element.\n     *\n     * @method moveToPreviousGradeTreeItem\n     * @param {HTMLElement} gradeTreeItem The grade tree item element.\n     * @returns {void}\n     */\n    moveToPreviousGradeTreeItem(gradeTreeItem) {\n        const currentGradeTreeItemIndex = this.visibleGradeTreeItems.findIndex(item => item === gradeTreeItem);\n        this.focusGradeTreeItem(this.visibleGradeTreeItems[currentGradeTreeItemIndex - 1]);\n    }\n\n    /**\n     * Move the focus to the first grade tree item element.\n     *\n     * @method moveToFirstGradeTreeItem\n     * @returns {void}\n     */\n    moveToFirstGradeTreeItem() {\n        this.focusGradeTreeItem(this.visibleGradeTreeItems[0]);\n    }\n\n    /**\n     * Move the focus to the last grade tree item element.\n     *\n     * @method moveToLastGradeTreeItem\n     * @returns {void}\n     */\n    moveToLastGradeTreeItem() {\n        this.focusGradeTreeItem(this.visibleGradeTreeItems[this.visibleGradeTreeItems.length - 1]);\n    }\n\n    /**\n     * Mark particular grade tree item as selected.\n     *\n     * @method getEditButton\n     * @param {HTMLElement} gradeTreeItem The grade tree item element.\n     * @returns {void}\n     */\n    selectGradeTreeItem(gradeTreeItem) {\n        document.querySelectorAll(Selectors.gradeTreeItem).forEach(item => {\n            item.dataset.selected = \"false\";\n        });\n\n        gradeTreeItem.dataset.selected = \"true\";\n        this.selectedGradeTreeItem = gradeTreeItem;\n    }\n\n    /**\n     * Set the focus on a given grade tree item.\n     *\n     * @method focusGradeTreeItem\n     * @param {HTMLElement|null} gradeTreeItem The grade tree item element.\n     * @returns {void}\n     */\n    focusGradeTreeItem(gradeTreeItem) {\n        if (gradeTreeItem) {\n            gradeTreeItem.focus();\n        }\n    }\n\n    /**\n     * Store the current visible grade items.\n     *\n     * @method setVisibleGradeTreeItems\n     * @returns {void}\n     */\n    setVisibleGradeTreeItems() {\n        const allGradeTreeItems = Array.from(this.modal.getBody()[0].querySelectorAll(Selectors.gradeTreeItem));\n        // If the visible grade tree items have not been stored yet, this means we are in the initial state where all\n        // grade tree items are visible.\n        if (!this.visibleGradeTreeItems) {\n            this.visibleGradeTreeItems = allGradeTreeItems;\n        } else { // Otherwise, identify the current visible grade tree items and store them.\n            this.visibleGradeTreeItems = allGradeTreeItems.filter(gradeTreeItem => {\n                return gradeTreeItem.offsetWidth > 0 && gradeTreeItem.offsetHeight > 0;\n            });\n        }\n    }\n}\n"],"names":["Selectors","GradebookEditTreeBulkMove","BulkAction","constructor","courseID","getBulkActionTriggerSelector","modal","this","showModal","setVisibleGradeTreeItems","Templates","render","registerCustomListenerEvents","document","addEventListener","e","target","closest","selectGradeTreeItem","setButtonDisabled","on","currentGradeTreeItem","key","matches","collapseGradeCategory","moveToNextGradeTreeItem","moveToPreviousGradeTreeItem","moveToFirstGradeTreeItem","moveToLastGradeTreeItem","fetchGradeTree","request","methodname","args","courseid","Ajax","call","gradeTree","ModalFactory","create","title","body","JSON","parse","buttons","save","large","type","types","SAVE_CANCEL","then","show","getBody","querySelector","tabIndex","getRoot","ModalEvents","value","selectedGradeTreeItem","dataset","id","submit","hidden","destroy","catch","Notification","exception","gradeCategorySection","setCollapsed","sectionContent","collapse","gradeTreeItem","currentGradeTreeItemIndex","visibleGradeTreeItems","findIndex","item","focusGradeTreeItem","length","querySelectorAll","forEach","selected","focus","allGradeTreeItems","Array","from","filter","offsetWidth","offsetHeight"],"mappings":"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"}