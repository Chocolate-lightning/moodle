{"version":3,"file":"grader.min.js","sources":["../../src/local/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/local/grades/grader\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Templates from 'core/templates';\nimport Selectors from './grader/selectors';\nimport getUserPicker from './grader/user_picker';\nimport {createLayout as createFullScreenWindow} from 'mod_forum/local/layout/fullscreen';\nimport getGradingPanelFunctions from './grader/gradingpanel';\nimport {add as addToast} from 'core/toast';\nimport {addNotification} from 'core/notification';\nimport {getString} from 'core/str';\nimport {failedUpdate} from 'core_grades/grades/grader/gradingpanel/normalise';\nimport {addIconToContainerWithPromise, getIcon as getSpinner} from 'core/loadingicon';\nimport {debounce} from 'core/utils';\nimport {fillInitialValues} from 'core_grades/grades/grader/gradingpanel/comparison';\nimport Modal from 'core/modal_cancel';\nimport {subscribe} from 'core/pubsub';\nimport DrawerEvents from 'core/drawer_events';\nimport Pending from 'core/pending';\n\nconst templateNames = {\n    grader: {\n        app: 'core_grades/grades/grader',\n        gradingPanel: {\n            error: 'core_grades/grades/grader/gradingpanel/util/error',\n        },\n        searchResults: 'core_grades/grades/grader/gradingpanel/user_picker/user_search',\n        status: 'core_grades/grades/grader/gradingpanel/util/status',\n    },\n};\n\n/**\n * Helper function that replaces the user picker placeholder with what we get back from the user picker class.\n *\n * @param {HTMLElement} root\n * @param {String} html\n */\nconst displayUserPicker = (root, html) => {\n    const pickerRegion = root.querySelector(Selectors.regions.pickerRegion);\n    Templates.replaceNodeContents(pickerRegion, html, '');\n};\n\n/**\n * To be removed, this is now done as a part of Templates.renderForPromise()\n *\n * @param {String} html\n * @param {String} js\n * @returns {array} An array containing the HTML, and JS.\n */\nconst fetchContentFromRender = (html, js) => {\n    return [html, js];\n};\n\n/**\n * Here we build the function that is passed to the user picker that'll handle updating the user content area\n * of the grading interface.\n *\n * @param {HTMLElement} root\n * @param {Function} getContentForUser\n * @param {Function} getGradeForUser\n * @param {Function} saveGradeForUser\n * @return {Function}\n */\nconst getUpdateUserContentFunction = (root, getContentForUser, getGradeForUser, saveGradeForUser) => {\n    let firstLoad = true;\n\n    return async(user) => {\n        const spinner = firstLoad ? null : addIconToContainerWithPromise(root);\n        const [\n            [html, js],\n            userGrade,\n        ] = await Promise.all([\n            getContentForUser(user.id).then(fetchContentFromRender),\n            getGradeForUser(user.id),\n        ]);\n        await Templates.replaceNodeContents(root.querySelector(Selectors.regions.moduleReplace), html, js);\n\n        const [\n            gradingPanelHtml,\n            gradingPanelJS\n        ] = await Templates.render(userGrade.templatename, userGrade.grade).then(fetchContentFromRender);\n        const panelContainer = root.querySelector(Selectors.regions.gradingPanelContainer);\n        const panel = panelContainer.querySelector(Selectors.regions.gradingPanel);\n        await Templates.replaceNodeContents(panel, gradingPanelHtml, gradingPanelJS);\n\n        const form = panel.querySelector('form');\n        fillInitialValues(form);\n\n        form.addEventListener('submit', event => {\n            saveGradeForUser(user);\n            event.preventDefault();\n        });\n\n        panelContainer.scrollTop = 0;\n        firstLoad = false;\n\n        if (spinner) {\n            spinner.resolve();\n        }\n        return userGrade;\n    };\n};\n\n/**\n * Show the search results container and hide the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst showSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.add('hidden');\n    userPickerContainer.classList.add('hidden');\n    searchResultsContainer.classList.remove('hidden');\n};\n\n/**\n * Hide the search results container and show the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst hideSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.remove('hidden');\n    userPickerContainer.classList.remove('hidden');\n    searchResultsContainer.classList.add('hidden');\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst showUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.remove('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'true');\n    toggleSearchButton.classList.add('expand');\n    toggleSearchButton.classList.remove('collapse');\n\n    // Hide the grading info container from screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.setAttribute('aria-hidden', 'true');\n\n    // Hide the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.setAttribute('aria-hidden', 'true');\n    collapseGradingDrawer.setAttribute('tabindex', '-1');\n\n    searchInput.focus();\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst hideUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.add('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'false');\n    toggleSearchButton.classList.add('collapse');\n    toggleSearchButton.classList.remove('expand');\n    toggleSearchButton.focus();\n\n    // Show the grading info container to screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.removeAttribute('aria-hidden');\n\n    // Show the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.removeAttribute('aria-hidden');\n    collapseGradingDrawer.setAttribute('tabindex', '0');\n\n    searchInput.value = '';\n};\n\n/**\n * Find the list of users who's names include the given search term.\n *\n * @param {Array} userList List of users for the grader\n * @param {String} searchTerm The search term to match\n * @return {Array}\n */\nconst searchForUsers = (userList, searchTerm) => {\n    if (searchTerm === '') {\n        return userList;\n    }\n\n    searchTerm = searchTerm.toLowerCase();\n\n    return userList.filter((user) => {\n        return user.fullname.toLowerCase().includes(searchTerm);\n    });\n};\n\n/**\n * Render the list of users in the search results area.\n *\n * @param {HTMLElement} searchResultsContainer The container element for search results\n * @param {Array} users The list of users to display\n */\nconst renderSearchResults = async(searchResultsContainer, users) => {\n    const {html, js} = await Templates.renderForPromise(templateNames.grader.searchResults, {users});\n    await Templates.replaceNodeContents(searchResultsContainer, html, js);\n};\n\n/**\n * Add click handlers to the buttons in the header of the grading interface.\n *\n * @param {HTMLElement} graderLayout\n */\nconst registerStaticEventListeners = (graderLayout) => {\n    const graderContainer = graderLayout.getContainer();\n    graderContainer.addEventListener('click', (e) => {\n        if (e.target.closest(Selectors.buttons.toggleFullscreen)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n            graderLayout.toggleFullscreen();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.closeGrader)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            graderLayout.close();\n\n            return;\n        }\n    });\n};\n\n/**\n * Add click handlers to the buttons that often have their content changed.\n *\n * @param {HTMLElement} graderLayout\n * @param {Object} userPicker\n * @param {Function} saveGradeFunction\n * @param {Array} userList List of users for the grader.\n */\nconst registerDynamicEventListeners = (graderLayout, userPicker, saveGradeFunction, userList) => {\n    const graderContainer = graderLayout.getContainer();\n    const toggleSearchButton = graderContainer.querySelector(Selectors.buttons.toggleSearch);\n    const searchInputContainer = graderContainer.querySelector(Selectors.regions.userSearchContainer);\n    const searchInput = searchInputContainer.querySelector(Selectors.regions.userSearchInput);\n    const bodyContainer = graderContainer.querySelector(Selectors.regions.bodyContainer);\n    const userPickerContainer = graderContainer.querySelector(Selectors.regions.pickerRegion);\n    const searchResultsContainer = graderContainer.querySelector(Selectors.regions.searchResultsContainer);\n\n    graderContainer.addEventListener('click', (e) => {\n\n        if (e.target.closest(Selectors.buttons.saveGrade)) {\n            saveGradeFunction(userPicker.currentUser);\n        }\n\n        if (e.target.closest(Selectors.buttons.toggleSearch)) {\n            if (toggleSearchButton.getAttribute('aria-expanded') === 'true') {\n                // Search is open so let's close it.\n                hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                searchResultsContainer.innerHTML = '';\n            } else {\n                // Search is closed so let's open it.\n                showUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                showSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                renderSearchResults(searchResultsContainer, userList);\n            }\n\n            return;\n        }\n\n        const selectUserButton = e.target.closest(Selectors.buttons.selectUser);\n        if (selectUserButton) {\n            const userId = selectUserButton.getAttribute('data-userid');\n            const user = userList.find(user => user.id == userId);\n            userPicker.setUserId(userId);\n            userPicker.showUser(user);\n            hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n            hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n            searchResultsContainer.innerHTML = '';\n        }\n    });\n\n    // Debounce the search input so that it only executes 300 milliseconds after the user has finished typing.\n    searchInput.addEventListener('input', debounce(() => {\n        const users = searchForUsers(userList, searchInput.value);\n        renderSearchResults(searchResultsContainer, users);\n    }, 300));\n\n    // Remove the right margin of the content container when the grading panel is hidden so that it expands to full-width.\n    subscribe(DrawerEvents.DRAWER_HIDDEN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, 0);\n        }\n    });\n\n    // Bring back the right margin of the content container when the grading panel is shown to give space for the grading panel.\n    subscribe(DrawerEvents.DRAWER_SHOWN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, gradingPanel.offsetWidth);\n        }\n    });\n};\n\n/**\n * Adjusts the right margin of the content container.\n *\n * @param {HTMLElement} graderContainer The container for the grader app.\n * @param {Number} rightMargin The right margin value.\n */\nconst setContentContainerMargin = (graderContainer, rightMargin) => {\n    const contentContainer = graderContainer.querySelector(Selectors.regions.moduleContainer);\n    if (contentContainer) {\n        contentContainer.style.marginRight = `${rightMargin}px`;\n    }\n};\n\n/**\n * Get the function used to save a user grade.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Function} setGradeForUser The function that will be called.\n * @return {Function}\n */\nconst getSaveUserGradeFunction = (root, setGradeForUser) => {\n    return async(user) => {\n        try {\n            root.querySelector(Selectors.regions.gradingPanelErrors).innerHTML = '';\n            const result = await setGradeForUser(\n                user.id,\n                root.querySelector(Selectors.values.sendStudentNotifications).value,\n                root.querySelector(Selectors.regions.gradingPanel)\n            );\n            if (result.success) {\n                addToast(await getString('grades:gradesavedfor', 'mod_forum', user));\n            }\n            if (result.failed) {\n                displayGradingError(root, user, result.error);\n            }\n\n            return result;\n        } catch (err) {\n            displayGradingError(root, user, err);\n\n            return failedUpdate(err);\n        }\n    };\n};\n\n/**\n * Display a grading error, typically from a failed save.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Object} user The user who was errored\n * @param {Object} err The details of the error\n */\nconst displayGradingError = async(root, user, err) => {\n    const [\n        {html, js},\n        errorString\n    ] = await Promise.all([\n        Templates.renderForPromise(templateNames.grader.gradingPanel.error, {error: err}),\n        await getString('grades:gradesavefailed', 'mod_forum', {error: err.message, ...user}),\n    ]);\n\n    await Templates.replaceNodeContents(root.querySelector(Selectors.regions.gradingPanelErrors), html, js);\n    addToast(errorString, {type: 'warning'});\n};\n\n/**\n * Launch the grader interface with the specified parameters.\n *\n * @param {Function} getListOfUsers A function to get the list of users\n * @param {Function} getContentForUser A function to get the content for a specific user\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Function} setGradeForUser A function to set the grade for a specific user\n * @param {Object} preferences Preferences for the launch function\n * @param {Number} preferences.initialUserId\n * @param {string} preferences.moduleName\n * @param {string} preferences.courseName\n * @param {string} preferences.courseUrl\n * @param {boolean} preferences.sendStudentNotifications\n * @param {null|HTMLElement} preferences.focusOnClose\n */\nexport const launch = async(getListOfUsers, getContentForUser, getGradeForUser, setGradeForUser, {\n    initialUserId = null,\n    moduleName,\n    courseName,\n    courseUrl,\n    sendStudentNotifications,\n    focusOnClose = null,\n} = {}) => {\n\n    // We need all of these functions to be executed in series, if one step runs before another the interface\n    // will not work.\n\n    // We need this promise to resolve separately so that we can avoid loading the whole interface if there are no users.\n    const userList = await getListOfUsers();\n    if (!userList.length) {\n        addNotification({\n            message: await getString('nouserstograde', 'core_grades'),\n            type: \"error\",\n        });\n        return;\n    }\n\n    const pendingPromise = new Pending();\n    // Now that we have confirmed there are at least some users let's boot up the grader interface.\n    const [\n        graderLayout,\n        {html, js},\n    ] = await Promise.all([\n        createFullScreenWindow({\n            fullscreen: false,\n            showLoader: false,\n            focusOnClose,\n            callerName: await getString('forumgrader', 'mod_forum'),\n        }),\n        Templates.renderForPromise(templateNames.grader.app, {\n            moduleName,\n            courseName,\n            courseUrl,\n            drawer: {show: true},\n            defaultsendnotifications: sendStudentNotifications,\n        }),\n    ]);\n\n    registerStaticEventListeners(graderLayout);\n\n    const graderContainer = graderLayout.getContainer();\n\n    const saveGradeFunction = getSaveUserGradeFunction(graderContainer, setGradeForUser);\n\n    await Templates.replaceNodeContents(graderContainer, html, js);\n    const updateUserContent = getUpdateUserContentFunction(graderContainer, getContentForUser, getGradeForUser, saveGradeFunction);\n\n    const userIds = userList.map(user => user.id);\n    const statusContainer = graderContainer.querySelector(Selectors.regions.statusContainer);\n    // Fetch the userpicker for display.\n    const userPicker = await getUserPicker(\n        userList,\n        async(user) => {\n            const userGrade = await updateUserContent(user);\n            const renderContext = {\n                status: userGrade.hasgrade,\n                index: userIds.indexOf(user.id) + 1,\n                total: userList.length\n            };\n            await Templates.render(templateNames.grader.status, renderContext).then(html => {\n                statusContainer.innerHTML = html;\n                return html;\n            }).catch();\n        },\n        saveGradeFunction,\n        {\n            initialUserId,\n        },\n    );\n\n    pendingPromise.resolve();\n    // Register all event listeners.\n    registerDynamicEventListeners(graderLayout, userPicker, saveGradeFunction, userList);\n\n    // Display the newly created user picker.\n    displayUserPicker(graderContainer, userPicker.rootNode);\n};\n\n/**\n * Show the grade for a specific user.\n *\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Number} userid The ID of a specific user\n * @param {String} moduleName the name of the module\n * @param {object} param\n * @param {null|HTMLElement} param.focusOnClose\n */\nexport const view = async(getGradeForUser, userid, moduleName, {\n    focusOnClose = null,\n} = {}) => {\n\n    const [\n        userGrade,\n        modal,\n    ] = await Promise.all([\n        getGradeForUser(userid),\n        Modal.create({\n            title: moduleName,\n            large: true,\n            removeOnClose: true,\n            returnElement: focusOnClose,\n            show: true,\n            body: getSpinner(),\n        }),\n    ]);\n\n    modal.setBodyContent(Templates.renderForPromise('mod_forum/local/grades/view_grade', userGrade));\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const [{html, js}] = await Promise.all([modal.getBodyPromise(), renderGradeTemplate(userGrade)]);\n    const gradeReplace = modal.getRoot()[0].querySelector('[data-region=\"grade-template\"]');\n    await Templates.replaceNodeContents(gradeReplace, html, js);\n};\n\nconst renderGradeTemplate = (userGrade) => Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n\nexport {getGradingPanelFunctions};\n"],"names":["templateNames","app","gradingPanel","error","searchResults","status","displayUserPicker","root","html","pickerRegion","querySelector","Selectors","regions","replaceNodeContents","fetchContentFromRender","js","getUpdateUserContentFunction","getContentForUser","getGradeForUser","saveGradeForUser","firstLoad","async","spinner","userGrade","Promise","all","user","id","then","Templates","moduleReplace","gradingPanelHtml","gradingPanelJS","render","templatename","grade","panelContainer","gradingPanelContainer","panel","form","addEventListener","event","preventDefault","scrollTop","resolve","hideSearchResultContainer","bodyContainer","userPickerContainer","searchResultsContainer","classList","remove","add","hideUserSearchInput","toggleSearchButton","searchContainer","searchInput","setAttribute","focus","parentElement","gradingInfoContainer","removeAttribute","collapseGradingDrawer","buttons","value","renderSearchResults","users","renderForPromise","registerStaticEventListeners","graderLayout","getContainer","e","target","closest","toggleFullscreen","stopImmediatePropagation","closeGrader","close","registerDynamicEventListeners","userPicker","saveGradeFunction","userList","graderContainer","toggleSearch","searchInputContainer","userSearchContainer","userSearchInput","saveGrade","currentUser","getAttribute","innerHTML","showUserSearchInput","showSearchResultContainer","selectUserButton","selectUser","userId","find","setUserId","showUser","searchTerm","toLowerCase","filter","fullname","includes","searchForUsers","DrawerEvents","DRAWER_HIDDEN","drawerRoot","setContentContainerMargin","DRAWER_SHOWN","offsetWidth","rightMargin","contentContainer","moduleContainer","style","marginRight","getSaveUserGradeFunction","setGradeForUser","gradingPanelErrors","result","values","sendStudentNotifications","success","failed","displayGradingError","err","errorString","message","type","getListOfUsers","initialUserId","moduleName","courseName","courseUrl","focusOnClose","length","pendingPromise","Pending","fullscreen","showLoader","callerName","drawer","show","defaultsendnotifications","updateUserContent","userIds","map","statusContainer","renderContext","hasgrade","index","indexOf","total","catch","rootNode","userid","modal","Modal","create","title","large","removeOnClose","returnElement","body","setBodyContent","getBodyPromise","renderGradeTemplate","gradeReplace","getRoot"],"mappings":"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"}